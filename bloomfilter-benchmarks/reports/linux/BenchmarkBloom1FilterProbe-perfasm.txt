# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe1Bloom1Filter
# Parameters: (size = 10000)

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 176.663 ns/op
# Warmup Iteration   2: 142.465 ns/op
# Warmup Iteration   3: 91.529 ns/op
# Warmup Iteration   4: 90.476 ns/op
# Warmup Iteration   5: 90.667 ns/op
Iteration   1: 91.622 ns/op
Iteration   2: 118.562 ns/op
Iteration   3: 116.797 ns/op
Iteration   4: 118.071 ns/op
Iteration   5: 93.035 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe1Bloom1Filter":
  107.617 ±(99.9%) 53.834 ns/op [Average]
  (min, avg, max) = (91.622, 107.617, 118.562), stdev = 13.980
  CI (99.9%): [53.783, 161.451] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe1Bloom1Filter:·asm":
PrintAssembly processed: 188068 total address lines.
Perf output processed (skipped 11.369 seconds):
 Column 1: cycles (5392 events)
 Column 2: instructions (5383 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub, version 603 (543 bytes) 

                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                           0x00007f9685491776: cmp    %edi,%edx
                           0x00007f9685491778: jl     0x00007f968549147c
                           0x00007f968549177e: jmpq   0x00007f96854914aa
                           0x00007f9685491783: nop                       ;*imul
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@82 (line 189)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  1.80%    1.60%   ↗       0x00007f9685491784: mov    %r10d,%esi
                   │       0x00007f9685491787: add    %r8d,%esi          ;*iadd
                   │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@83 (line 189)
                   │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                   │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                   │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.82%    1.47%   │       0x00007f968549178a: mov    %esi,%r11d
                   │       0x00007f968549178d: not    %r11d
  1.80%    1.39%   │       0x00007f9685491790: test   %esi,%esi
                   │       0x00007f9685491792: cmovl  %r11d,%esi
  0.96%            │       0x00007f9685491796: and    $0x3f,%esi
  2.02%    1.13%   │       0x00007f9685491799: mov    $0x1,%r10d
                   │       0x00007f968549179f: mov    %esi,%ecx
  0.74%    0.04%   │       0x00007f96854917a1: shl    %cl,%r10
  1.72%    1.62%   │       0x00007f96854917a4: or     %r10,%rax          ;*lor  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@110 (line 195)
                   │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                   │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                   │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                   │       0x00007f96854917a7: inc    %edi               ;*iinc
                   │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@113 (line 188)
                   │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                   │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                   │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.91%    0.07%   │       0x00007f96854917a9: cmp    %edx,%edi
                  ╭│       0x00007f96854917ab: jge    0x00007f96854917b6  ;*if_icmpgt
                  ││                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@73 (line 188)
                  ││                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  ││                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                  ││                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                  ││       0x00007f96854917ad: mov    %edi,%r10d
  0.91%    0.41%  ││       0x00007f96854917b0: imul   %r9d,%r10d         ;*imul
                  ││                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@82 (line 189)
                  ││                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  ││                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                  ││                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                  │╰       0x00007f96854917b4: jmp    0x00007f9685491784
           0.02%  ↘        0x00007f96854917b6: and    %rax,%rbx          ;*land
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@123 (line 198)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.61%    1.37%           0x00007f96854917b9: cmp    %rax,%rbx
                           0x00007f96854917bc: jne    0x00007f9685491be9  ;*ifne
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@127 (line 198)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        ↗  0x00007f96854917c2: mov    0x14(%rsp),%r10d
  0.02%                 │  0x00007f96854917c7: dec    %r10d              ;*iinc
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@16 (line 61)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007f96854917ca: cmp    $0xffffffffffffffff,%r10d
                    ╭   │  0x00007f96854917ce: jle    0x00007f96854917db  ;*iflt
                    │   │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@3 (line 61)
                    │   │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.57%    0.61%    │   │  0x00007f96854917d0: mov    0x50(%rsp),%r9
                    │   │  0x00007f96854917d5: mov    (%rsp),%rbx
                    │╭  │  0x00007f96854917d9: jmp    0x00007f9685491805
  0.41%    0.59%    ↘│  │  0x00007f96854917db: mov    0x50(%rsp),%r9
                     │  │  0x00007f96854917e0: movzbl 0x94(%r9),%r10d    ;*getfield isDone
                     │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@25 (line 234)
                     │  │  0x00007f96854917e8: mov    (%rsp),%rbx
                     │  │  0x00007f96854917ec: add    $0x1,%rbx          ; OopMap{r9=Oop [80]=Oop [88]=Oop [8]=Oop off=944}
                     │  │                                                ;*ifeq
                     │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@28 (line 234)
  0.32%    0.20%     │  │  0x00007f96854917f0: test   %eax,0x159bc80a(%rip)        # 0x00007f969ae4e000
                     │  │                                                ;   {poll}
  0.06%              │  │  0x00007f96854917f6: test   %r10d,%r10d
                     │  │  0x00007f96854917f9: jne    0x00007f9685491b58  ;*aload
                     │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@13 (line 232)
                     │  │  0x00007f96854917ff: mov    $0x1,%r10d         ;*aload_0
                     │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@6 (line 62)
                     │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                     ↘  │  0x00007f9685491805: mov    0x8(%rsp),%r8
  0.80%    1.02%        │  0x00007f968549180a: mov    0x10(%r8),%ebp     ;*getfield bf
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@7 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007f968549180e: movslq %r10d,%r11         ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@11 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007f9685491811: test   %ebp,%ebp
                        │  0x00007f9685491813: je     0x00007f9685491abd  ;*invokevirtual testLong
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007f9685491819: mov    0x60(%r15),%rax
  0.83%    1.23%        │  0x00007f968549181d: mov    %rax,%rcx
                        │  0x00007f9685491820: add    $0x18,%rcx
                        │  0x00007f9685491824: lea    (%r12,%rbp,8),%rdi  ;*getfield bf
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@7 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007f9685491828: cmp    0x70(%r15),%rcx
                        │  0x00007f968549182c: jae    0x00007f9685491a81
  0.63%    1.17%        │  0x00007f9685491832: mov    %rcx,0x60(%r15)
                        │  0x00007f9685491836: prefetchnta 0xc0(%rcx)
  0.85%    0.58%        │  0x00007f968549183d: movq   $0x1,(%rax)
  0.02%                 │  0x00007f9685491844: prefetchnta 0x100(%rcx)
  2.87%    1.30%        │  0x00007f968549184b: movl   $0x768,0x8(%rax)   ;   {metadata({type array byte})}
  0.04%                 │  0x00007f9685491852: prefetchnta 0x140(%rcx)
  1.41%    0.28%        │  0x00007f9685491859: movl   $0x8,0xc(%rax)
                        │  0x00007f9685491860: prefetchnta 0x180(%rcx)
  2.61%    1.62%        │  0x00007f9685491867: movl   $0x0,0x10(%rax)
  0.06%                 │  0x00007f968549186e: movl   $0x0,0x14(%rax)
           0.02%        │  0x00007f9685491875: mov    %r9,0x50(%rsp)
                        │  0x00007f968549187a: mov    %rbx,(%rsp)
  0.72%    1.45%        │  0x00007f968549187e: mov    %ebp,0x10(%rsp)
                        │  0x00007f9685491882: mov    %rdi,0x18(%rsp)    ;*newarray
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@2 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.04%                 │  0x00007f9685491887: mov    %r10b,0x10(%rax)   ;*bastore
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@11 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007f968549188b: mov    %r10d,0x14(%rsp)
  1.06%    1.04%        │  0x00007f9685491890: mov    %r11,%r10
                        │  0x00007f9685491893: sar    $0x30,%r10
                        │  0x00007f9685491897: mov    %r11,%r8
                        │  0x00007f968549189a: sar    $0x28,%r8
  1.02%    1.21%        │  0x00007f968549189e: mov    %r10d,%r10d
                        │  0x00007f96854918a1: mov    %r8d,%r8d
  0.02%                 │  0x00007f96854918a4: mov    %r11,%rdx
                        │  0x00007f96854918a7: sar    $0x20,%r11
  0.98%    1.28%        │  0x00007f96854918ab: mov    %rdx,%r9
                        │  0x00007f96854918ae: sar    $0x18,%r9
  0.04%                 │  0x00007f96854918b2: mov    %r11d,%r11d
                        │  0x00007f96854918b5: mov    %r9d,%ecx
  0.78%    1.54%        │  0x00007f96854918b8: mov    %rdx,%r9
                        │  0x00007f96854918bb: sar    $0x10,%r9
                        │  0x00007f96854918bf: mov    %rdx,%rbx
           0.02%        │  0x00007f96854918c2: sar    $0x8,%rbx
  0.96%    1.15%        │  0x00007f96854918c6: mov    %r9d,%r9d
                        │  0x00007f96854918c9: mov    %ebx,%edi
  0.02%                 │  0x00007f96854918cb: mov    %dil,0x11(%rax)    ;*bastore
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@20 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.11%                 │  0x00007f96854918cf: mov    %r9b,0x12(%rax)    ;*bastore
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@29 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  1.35%    1.04%        │  0x00007f96854918d3: mov    %cl,0x13(%rax)     ;*bastore
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@38 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007f96854918d6: mov    %r11b,0x14(%rax)   ;*bastore
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@47 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.02%                 │  0x00007f96854918da: mov    %r8b,0x15(%rax)    ;*bastore
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@56 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.07%                 │  0x00007f96854918de: mov    %r10b,0x16(%rax)   ;*bastore
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@66 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.98%    1.34%        │  0x00007f96854918e2: sar    $0x38,%rdx
                        │  0x00007f96854918e6: mov    %edx,%r11d
  0.09%                 │  0x00007f96854918e9: mov    %r11b,0x17(%rax)
  0.11%                 │  0x00007f96854918ed: mov    %rax,%rsi          ;*synchronization entry
                        │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  1.08%    1.43%        │  0x00007f96854918f0: mov    $0x8,%edx
                        │  0x00007f96854918f5: xor    %ecx,%ecx
                        │  0x00007f96854918f7: callq  0x00007f9685046160  ; OopMap{[80]=Oop [88]=Oop [8]=Oop [16]=NarrowOop [24]=Oop off=1212}
                        │                                                ;*invokestatic hash64
                        │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │                                                ;   {static_call}
  0.98%    1.10%        │  0x00007f96854918fc: mov    %eax,%r8d          ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@6 (line 177)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007f96854918ff: shr    $0x20,%rax
                        │  0x00007f9685491903: mov    %eax,%r9d          ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@13 (line 178)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.13%    0.26%        │  0x00007f9685491906: mov    %r8d,%r10d
  0.67%    1.11%        │  0x00007f9685491909: add    %r9d,%r10d         ;*iadd
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@22 (line 180)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.13%    0.26%        │  0x00007f968549190c: test   %r10d,%r10d
                        │  0x00007f968549190f: jl     0x00007f9685491b86  ;*ifge
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@27 (line 182)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.17%    0.35%        │  0x00007f9685491915: mov    0x10(%rsp),%ebp
  0.59%    0.98%        │  0x00007f9685491919: mov    0x2c(%r12,%rbp,8),%ecx  ;*getfield bitSet
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@39 (line 185)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007f968549191e: mov    0xc(%r12,%rcx,8),%r11d  ;*getfield data
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@42 (line 185)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │                                                ; implicit exception: dispatches to 0x00007f9685491d5d
  0.15%    0.22%        │  0x00007f9685491923: mov    0xc(%r12,%r11,8),%ecx  ;*arraylength
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@45 (line 185)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │                                                ; implicit exception: dispatches to 0x00007f9685491d6d
  0.15%    0.20%        │  0x00007f9685491928: test   %ecx,%ecx
                        │  0x00007f968549192a: je     0x00007f9685491ad1
  0.74%    1.10%        │  0x00007f9685491930: mov    %r10d,%eax
                        │  0x00007f9685491933: cmp    $0x80000000,%eax
                      ╭ │  0x00007f9685491938: jne    0x00007f9685491941
                      │ │  0x00007f968549193a: xor    %edx,%edx
                      │ │  0x00007f968549193c: cmp    $0xffffffffffffffff,%ecx
                      │╭│  0x00007f968549193f: je     0x00007f9685491944
  0.04%    0.32%      ↘││  0x00007f9685491941: cltd   
                       ││  0x00007f9685491942: idiv   %ecx               ;*irem
                       ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@46 (line 185)
                       ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                       ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                       ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
 17.47%   22.01%       ↘│  0x00007f9685491944: cmp    %ecx,%edx
                        │  0x00007f9685491946: jae    0x00007f9685491ae5  ;*laload
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@58 (line 186)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.72%    0.02%        │  0x00007f968549194c: mov    0xc(%r12,%rbp,8),%esi  ;*getfield k
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@70 (line 188)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007f9685491951: cmp    $0x1,%esi
                        ╰  0x00007f9685491954: jl     0x00007f96854917c2  ;*if_icmpgt
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@73 (line 188)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.04%    0.07%           0x00007f968549195a: shl    $0x3,%r11
                           0x00007f968549195e: mov    0x10(%r11,%rdx,8),%rbx  ;*laload
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@58 (line 186)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  3.88%    0.09%           0x00007f9685491963: cmp    $0x7ffffffe,%esi
                           0x00007f9685491969: jg     0x00007f9685491b19  ;*iload
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@76 (line 189)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                           0x00007f968549196f: mov    %r10d,%r11d
  0.04%    0.13%           0x00007f9685491972: mov    %esi,%edx
                           0x00007f9685491974: inc    %edx
  0.95%                    0x00007f9685491976: mov    %r9d,%r10d
                           0x00007f9685491979: shl    %r10d              ;*imul
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@82 (line 189)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.04%    0.06%           0x00007f968549197c: mov    %r11d,%ecx
                           0x00007f968549197f: not    %ecx
  1.02%                    0x00007f9685491981: test   %r11d,%r11d
                           0x00007f9685491984: cmovl  %ecx,%r11d
  0.02%    0.06%           0x00007f9685491988: add    $0xfffffffffffffffe,%esi
  0.56%    0.02%           0x00007f968549198b: cmp    %esi,%edx
                           0x00007f968549198d: mov    $0x80000000,%edi
           0.07%           0x00007f9685491992: cmovl  %edi,%esi
  0.91%                    0x00007f9685491995: mov    %r11d,%ecx
                           0x00007f9685491998: and    $0x3f,%ecx
                           0x00007f968549199b: mov    $0x1,%eax
                           0x00007f96854919a0: shl    %cl,%rax           ;*lshl
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@109 (line 195)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.87%                    0x00007f96854919a3: cmp    $0x2,%esi
                           0x00007f96854919a6: jle    0x00007f9685491b49
                           0x00007f96854919ac: mov    $0x2,%edi          ;*iload
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@76 (line 189)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
....................................................................................................
 63.50%   57.68%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 575 (300 bytes) 

                     Decoding compiled method 0x00007f968547f710:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007f967c987f50} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  0.96%    1.69%       0x00007f968547f8a0: mov    %eax,-0x14000(%rsp)
  0.06%    0.02%       0x00007f968547f8a7: push   %rbp
                       0x00007f968547f8a8: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  0.76%    1.89%       0x00007f968547f8ac: mov    %edx,0x8(%rsp)
                       0x00007f968547f8b0: mov    %edx,%ebx
  0.02%                0x00007f968547f8b2: sar    $0x3,%ebx          ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  0.80%    1.63%       0x00007f968547f8b5: movslq %ecx,%r14          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
                       0x00007f968547f8b8: mov    $0x87c37b91114253d5,%rdi
                       0x00007f968547f8c2: test   %ebx,%ebx
                  ╭    0x00007f968547f8c4: jle    0x00007f968547f9ac  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.02%           │    0x00007f968547f8ca: mov    0xc(%rsi),%r10d    ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007f968547fd11
  0.96%    1.13%  │    0x00007f968547f8ce: xor    %r9d,%r9d
                  │    0x00007f968547f8d1: xor    %r8d,%r8d
                  │    0x00007f968547f8d4: nopl   0x0(%rax,%rax,1)
                  │    0x00007f968547f8dc: xchg   %ax,%ax            ;*iload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  0.74%    1.32%  │ ↗  0x00007f968547f8e0: cmp    %r10d,%r9d
                  │ │  0x00007f968547f8e3: jae    0x00007f968547fb5e  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │ │  0x00007f968547f8e9: movzbq 0x10(%rsi,%r9,1),%rcx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
           0.02%  │ │  0x00007f968547f8ef: mov    %r9d,%r11d
                  │ │  0x00007f968547f8f2: add    $0x7,%r11d
  0.93%    1.15%  │ │  0x00007f968547f8f6: cmp    %r10d,%r11d
                  │ │  0x00007f968547f8f9: jae    0x00007f968547fb91  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
                  │ │  0x00007f968547f8ff: mov    %rcx,(%rsp)
                  │ │  0x00007f968547f903: movslq %r9d,%r11          ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
                  │ │  0x00007f968547f906: movzbq 0x11(%rsi,%r11,1),%r9
  1.08%    1.30%  │ │  0x00007f968547f90c: movzbq 0x17(%rsi,%r11,1),%rcx
           0.02%  │ │  0x00007f968547f912: movzbq 0x12(%rsi,%r11,1),%rdx
  0.02%    0.04%  │ │  0x00007f968547f918: movzbq 0x13(%rsi,%r11,1),%rax
           0.02%  │ │  0x00007f968547f91e: movzbq 0x14(%rsi,%r11,1),%rbp
  0.93%    1.26%  │ │  0x00007f968547f924: movzbq 0x15(%rsi,%r11,1),%r13
                  │ │  0x00007f968547f92a: movzbq 0x16(%rsi,%r11,1),%r11
                  │ │  0x00007f968547f930: shl    $0x8,%r9
                  │ │  0x00007f968547f934: or     (%rsp),%r9
  0.85%    1.50%  │ │  0x00007f968547f938: shl    $0x30,%r11
                  │ │  0x00007f968547f93c: shl    $0x28,%r13
                  │ │  0x00007f968547f940: shl    $0x20,%rbp
                  │ │  0x00007f968547f944: shl    $0x18,%rax
  0.72%    1.39%  │ │  0x00007f968547f948: shl    $0x10,%rdx
                  │ │  0x00007f968547f94c: or     %rdx,%r9
           0.02%  │ │  0x00007f968547f94f: or     %rax,%r9
  0.02%           │ │  0x00007f968547f952: or     %rbp,%r9
  0.89%    1.47%  │ │  0x00007f968547f955: or     %r13,%r9
                  │ │  0x00007f968547f958: or     %r11,%r9
                  │ │  0x00007f968547f95b: shl    $0x38,%rcx
                  │ │  0x00007f968547f95f: or     %rcx,%r9
  0.87%    1.52%  │ │  0x00007f968547f962: imul   %rdi,%r9           ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.02%    0.02%  │ │  0x00007f968547f966: rol    $0x1f,%r9
  0.02%    0.02%  │ │  0x00007f968547f96a: mov    $0x4cf5ad432745937f,%r11
                  │ │  0x00007f968547f974: imul   %r11,%r9
  0.85%    1.41%  │ │  0x00007f968547f978: xor    %r14,%r9           ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.02%    0.04%  │ │  0x00007f968547f97b: rol    $0x1b,%r9          ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.02%    0.02%  │ │  0x00007f968547f97f: mov    %r9,%r14
                  │ │  0x00007f968547f982: shl    $0x2,%r14
  0.83%    1.41%  │ │  0x00007f968547f986: add    %r9,%r14
  0.02%    0.02%  │ │  0x00007f968547f989: add    $0x52dce729,%r14   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.02%    0.02%  │ │  0x00007f968547f990: mov    %r8d,%ecx
                  │ │  0x00007f968547f993: inc    %ecx               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
  0.85%    1.28%  │ │  0x00007f968547f995: cmp    %ebx,%ecx
                  │╭│  0x00007f968547f997: jge    0x00007f968547f9ac  ;*if_icmpge
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │││  0x00007f968547f999: shl    $0x3,%r8d
                  │││  0x00007f968547f99d: mov    %r8d,%r9d
                  │││  0x00007f968547f9a0: add    $0x8,%r9d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007f968547f9a4: mov    %ecx,%r8d
                  ││╰  0x00007f968547f9a7: jmpq   0x00007f968547f8e0  ;*if_icmpge
                  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  ↘↘   0x00007f968547f9ac: mov    0x8(%rsp),%r8d
  0.02%                0x00007f968547f9b1: and    $0xfffffffffffffff8,%r8d  ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
                       0x00007f968547f9b5: mov    0x8(%rsp),%r10d
  0.78%    0.97%       0x00007f968547f9ba: sub    %r8d,%r10d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
                       0x00007f968547f9bd: movslq %r8d,%r9           ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
           0.02%       0x00007f968547f9c0: xor    %ecx,%ecx
                       0x00007f968547f9c2: cmp    $0x4,%r10d
                       0x00007f968547f9c6: je     0x00007f968547fa6d
  0.72%    1.17%       0x00007f968547f9cc: cmp    $0x4,%r10d
                       0x00007f968547f9d0: jle    0x00007f968547f9ed
                       0x00007f968547f9d2: cmp    $0x7,%r10d
                       0x00007f968547f9d6: je     0x00007f968547fa10
                       0x00007f968547f9d8: cmp    $0x7,%r10d
                       0x00007f968547f9dc: jg     0x00007f968547fb10
                       0x00007f968547f9e2: cmp    $0x6,%r10d
                       0x00007f968547f9e6: je     0x00007f968547fa2d
                       0x00007f968547f9e8: xor    %r11d,%r11d
                       0x00007f968547f9eb: jmp    0x00007f968547fa4d
                       0x00007f968547f9ed: cmp    $0x2,%r10d
....................................................................................................
 14.80%   23.80%  <total for region 2>

....[Hottest Regions]...............................................................................
 63.50%   57.68%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub, version 603 (543 bytes) 
 14.80%   23.80%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 575 (300 bytes) 
  4.53%    6.37%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 575 (72 bytes) 
  2.15%    2.14%   [kernel.kallsyms]  native_write_msr_safe (0 bytes) 
  1.22%    0.04%   [kernel.kallsyms]  mem_cgroup_page_lruvec (24 bytes) 
  1.17%    0.09%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub, version 603 (0 bytes) 
  0.96%    0.87%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 575 (0 bytes) 
  0.87%            [kernel.kallsyms]  page_fault (0 bytes) 
  0.82%    0.02%   [kernel.kallsyms]  __list_del_entry (21 bytes) 
  0.46%    0.26%   [kernel.kallsyms]  get_page_from_freelist (204 bytes) 
  0.30%    0.22%           libjvm.so  [unknown] (117 bytes) 
  0.26%    0.15%   [kernel.kallsyms]  next_zones_zonelist (71 bytes) 
  0.22%    0.02%   [kernel.kallsyms]  change_protection_range (32 bytes) 
  0.15%    0.19%   [kernel.kallsyms]  __srcu_read_lock (88 bytes) 
  0.15%    0.07%   [kernel.kallsyms]  mutex_lock (7 bytes) 
  0.13%    0.06%   [kernel.kallsyms]  avc_has_perm_flags (50 bytes) 
  0.13%    0.06%   [kernel.kallsyms]  mutex_unlock (22 bytes) 
  0.11%    0.13%   [kernel.kallsyms]  get_page_from_freelist (10 bytes) 
  0.11%    0.11%   [kernel.kallsyms]  get_page_from_freelist (96 bytes) 
  0.11%    0.02%   [kernel.kallsyms]  __lru_cache_add (26 bytes) 
  7.83%    7.71%  <...other 430 warm regions...>
....................................................................................................
 99.98%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 64.71%   57.81%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub, version 603 
 20.29%   31.04%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 575 
  2.34%    2.28%           libjvm.so  [unknown] 
  2.15%    2.14%   [kernel.kallsyms]  native_write_msr_safe 
  1.30%    0.04%   [kernel.kallsyms]  mem_cgroup_page_lruvec 
  0.87%            [kernel.kallsyms]  page_fault 
  0.82%    0.02%   [kernel.kallsyms]  __list_del_entry 
  0.78%    0.72%   [kernel.kallsyms]  get_page_from_freelist 
  0.26%    0.15%   [kernel.kallsyms]  next_zones_zonelist 
  0.24%    0.06%   [kernel.kallsyms]  change_protection_range 
  0.22%    0.13%        libc-2.17.so  vfprintf 
  0.20%    0.11%   [kernel.kallsyms]  handle_mm_fault 
  0.15%    0.07%   [kernel.kallsyms]  mutex_lock 
  0.15%    0.19%   [kernel.kallsyms]  __srcu_read_lock 
  0.15%    0.15%   [kernel.kallsyms]  vfs_write 
  0.13%    0.06%   [kernel.kallsyms]  avc_has_perm_flags 
  0.13%    0.06%   [kernel.kallsyms]  mutex_unlock 
  0.11%    0.02%   [kernel.kallsyms]  __lru_cache_add 
  0.11%    0.06%   [kernel.kallsyms]  isolate_lru_page 
  0.11%    0.04%   [kernel.kallsyms]  _raw_spin_lock 
  4.77%    3.79%  <...other 134 warm methods...>
....................................................................................................
 99.98%   98.92%  <totals>

....[Distribution by Source]........................................................................
 85.00%   88.85%         C2, level 4
 11.11%    7.41%   [kernel.kallsyms]
  2.36%    2.30%           libjvm.so
  0.65%    0.76%        libc-2.17.so
  0.24%    0.19%      hsdis-amd64.so
  0.24%    0.09%              [jbd2]
  0.15%    0.22%              [ext4]
  0.11%    0.11%  libpthread-2.17.so
  0.06%    0.06%         interpreter
  0.04%                      [ixgbe]
  0.02%                             
  0.02%             Unknown, level 0
....................................................................................................
 99.98%  100.00%  <totals>



# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe1Bloom1Filter
# Parameters: (size = 10000000)

# Run progress: 16.67% complete, ETA 00:01:39
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 170.851 ns/op
# Warmup Iteration   2: 95.838 ns/op
# Warmup Iteration   3: 92.767 ns/op
# Warmup Iteration   4: 95.771 ns/op
# Warmup Iteration   5: 123.748 ns/op
Iteration   1: 110.650 ns/op
Iteration   2: 97.688 ns/op
Iteration   3: 92.723 ns/op
Iteration   4: 95.937 ns/op
Iteration   5: 90.435 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe1Bloom1Filter":
  97.486 ±(99.9%) 30.329 ns/op [Average]
  (min, avg, max) = (90.435, 97.486, 110.650), stdev = 7.876
  CI (99.9%): [67.158, 127.815] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe1Bloom1Filter:·asm":
PrintAssembly processed: 190680 total address lines.
Perf output processed (skipped 12.563 seconds):
 Column 1: cycles (6008 events)
 Column 2: instructions (5998 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub, version 623 (543 bytes) 

                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                           0x00007fae5d49f876: cmp    %edi,%edx
                           0x00007fae5d49f878: jl     0x00007fae5d49f57c
                           0x00007fae5d49f87e: jmpq   0x00007fae5d49f5aa
                           0x00007fae5d49f883: nop                       ;*imul
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@82 (line 189)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  1.66%    1.47%   ↗       0x00007fae5d49f884: mov    %r10d,%esi
                   │       0x00007fae5d49f887: add    %r8d,%esi          ;*iadd
                   │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@83 (line 189)
                   │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                   │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                   │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.92%    1.30%   │       0x00007fae5d49f88a: mov    %esi,%r11d
                   │       0x00007fae5d49f88d: not    %r11d
  1.73%    1.13%   │       0x00007fae5d49f890: test   %esi,%esi
                   │       0x00007fae5d49f892: cmovl  %r11d,%esi
  0.82%            │       0x00007fae5d49f896: and    $0x3f,%esi
  1.80%    1.27%   │       0x00007fae5d49f899: mov    $0x1,%r10d
                   │       0x00007fae5d49f89f: mov    %esi,%ecx
  0.87%            │       0x00007fae5d49f8a1: shl    %cl,%r10
  1.68%    1.70%   │       0x00007fae5d49f8a4: or     %r10,%rax          ;*lor  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@110 (line 195)
                   │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                   │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                   │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                   │       0x00007fae5d49f8a7: inc    %edi               ;*iinc
                   │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@113 (line 188)
                   │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                   │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                   │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.88%    0.05%   │       0x00007fae5d49f8a9: cmp    %edx,%edi
                  ╭│       0x00007fae5d49f8ab: jge    0x00007fae5d49f8b6  ;*if_icmpgt
                  ││                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@73 (line 188)
                  ││                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  ││                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                  ││                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                  ││       0x00007fae5d49f8ad: mov    %edi,%r10d
  0.72%    0.15%  ││       0x00007fae5d49f8b0: imul   %r9d,%r10d         ;*imul
                  ││                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@82 (line 189)
                  ││                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  ││                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                  ││                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                  │╰       0x00007fae5d49f8b4: jmp    0x00007fae5d49f884
                  ↘        0x00007fae5d49f8b6: and    %rax,%rbx          ;*land
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@123 (line 198)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.67%    1.20%           0x00007fae5d49f8b9: cmp    %rax,%rbx
                           0x00007fae5d49f8bc: jne    0x00007fae5d49fcec  ;*ifne
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@127 (line 198)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        ↗  0x00007fae5d49f8c2: mov    0x14(%rsp),%r10d
                        │  0x00007fae5d49f8c7: dec    %r10d              ;*iinc
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@16 (line 61)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007fae5d49f8ca: cmp    $0xffffffffffffffff,%r10d
                    ╭   │  0x00007fae5d49f8ce: jle    0x00007fae5d49f8db  ;*iflt
                    │   │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@3 (line 61)
                    │   │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.42%    0.58%    │   │  0x00007fae5d49f8d0: mov    0x50(%rsp),%r9
                    │   │  0x00007fae5d49f8d5: mov    (%rsp),%rbx
                    │╭  │  0x00007fae5d49f8d9: jmp    0x00007fae5d49f905
  0.38%    0.78%    ↘│  │  0x00007fae5d49f8db: mov    0x50(%rsp),%r9
                     │  │  0x00007fae5d49f8e0: movzbl 0x94(%r9),%r10d    ;*getfield isDone
                     │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@25 (line 234)
                     │  │  0x00007fae5d49f8e8: mov    (%rsp),%rbx
                     │  │  0x00007fae5d49f8ec: add    $0x1,%rbx          ; OopMap{r9=Oop [80]=Oop [88]=Oop [8]=Oop off=944}
                     │  │                                                ;*ifeq
                     │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@28 (line 234)
  0.23%    0.23%     │  │  0x00007fae5d49f8f0: test   %eax,0x182f970a(%rip)        # 0x00007fae75799000
                     │  │                                                ;   {poll}
                     │  │  0x00007fae5d49f8f6: test   %r10d,%r10d
                     │  │  0x00007fae5d49f8f9: jne    0x00007fae5d49fcbe  ;*aload
                     │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@13 (line 232)
                     │  │  0x00007fae5d49f8ff: mov    $0x1,%r10d         ;*aload_0
                     │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@6 (line 62)
                     │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                     ↘  │  0x00007fae5d49f905: mov    0x8(%rsp),%r8
  0.85%    0.92%        │  0x00007fae5d49f90a: mov    0x10(%r8),%ebp     ;*getfield bf
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@7 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.02%                 │  0x00007fae5d49f90e: movslq %r10d,%r11         ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@11 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007fae5d49f911: test   %ebp,%ebp
                        │  0x00007fae5d49f913: je     0x00007fae5d49fbbd  ;*invokevirtual testLong
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007fae5d49f919: mov    0x60(%r15),%rax
  0.82%    1.03%        │  0x00007fae5d49f91d: mov    %rax,%rcx
                        │  0x00007fae5d49f920: add    $0x18,%rcx
                        │  0x00007fae5d49f924: lea    (%r12,%rbp,8),%rdi  ;*getfield bf
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@7 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007fae5d49f928: cmp    0x70(%r15),%rcx
                        │  0x00007fae5d49f92c: jae    0x00007fae5d49fb81
  0.65%    0.63%        │  0x00007fae5d49f932: mov    %rcx,0x60(%r15)
                        │  0x00007fae5d49f936: prefetchnta 0xc0(%rcx)
  0.40%    0.13%        │  0x00007fae5d49f93d: movq   $0x1,(%rax)
           0.03%        │  0x00007fae5d49f944: prefetchnta 0x100(%rcx)
  1.07%    1.27%        │  0x00007fae5d49f94b: movl   $0x768,0x8(%rax)   ;   {metadata({type array byte})}
                        │  0x00007fae5d49f952: prefetchnta 0x140(%rcx)
  0.50%    0.15%        │  0x00007fae5d49f959: movl   $0x8,0xc(%rax)
  0.02%                 │  0x00007fae5d49f960: prefetchnta 0x180(%rcx)
  1.40%    1.23%        │  0x00007fae5d49f967: movl   $0x0,0x10(%rax)
                        │  0x00007fae5d49f96e: movl   $0x0,0x14(%rax)
                        │  0x00007fae5d49f975: mov    %r9,0x50(%rsp)
           0.02%        │  0x00007fae5d49f97a: mov    %rbx,(%rsp)
  0.78%    1.28%        │  0x00007fae5d49f97e: mov    %ebp,0x10(%rsp)
           0.02%        │  0x00007fae5d49f982: mov    %rdi,0x18(%rsp)    ;*newarray
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@2 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007fae5d49f987: mov    %r10b,0x10(%rax)   ;*bastore
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@11 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007fae5d49f98b: mov    %r10d,0x14(%rsp)
  0.92%    1.23%        │  0x00007fae5d49f990: mov    %r11,%r10
                        │  0x00007fae5d49f993: sar    $0x30,%r10
  0.02%                 │  0x00007fae5d49f997: mov    %r11,%r8
           0.02%        │  0x00007fae5d49f99a: sar    $0x28,%r8
  0.80%    0.75%        │  0x00007fae5d49f99e: mov    %r10d,%r10d
                        │  0x00007fae5d49f9a1: mov    %r8d,%r8d
                        │  0x00007fae5d49f9a4: mov    %r11,%rdx
                        │  0x00007fae5d49f9a7: sar    $0x20,%r11
  0.85%    1.17%        │  0x00007fae5d49f9ab: mov    %rdx,%r9
                        │  0x00007fae5d49f9ae: sar    $0x18,%r9
                        │  0x00007fae5d49f9b2: mov    %r11d,%r11d
                        │  0x00007fae5d49f9b5: mov    %r9d,%ecx
  0.75%    1.37%        │  0x00007fae5d49f9b8: mov    %rdx,%r9
                        │  0x00007fae5d49f9bb: sar    $0x10,%r9
                        │  0x00007fae5d49f9bf: mov    %rdx,%rbx
                        │  0x00007fae5d49f9c2: sar    $0x8,%rbx
  0.97%    1.02%        │  0x00007fae5d49f9c6: mov    %r9d,%r9d
                        │  0x00007fae5d49f9c9: mov    %ebx,%edi
  0.03%                 │  0x00007fae5d49f9cb: mov    %dil,0x11(%rax)    ;*bastore
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@20 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.08%                 │  0x00007fae5d49f9cf: mov    %r9b,0x12(%rax)    ;*bastore
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@29 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.98%    1.13%        │  0x00007fae5d49f9d3: mov    %cl,0x13(%rax)     ;*bastore
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@38 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007fae5d49f9d6: mov    %r11b,0x14(%rax)   ;*bastore
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@47 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007fae5d49f9da: mov    %r8b,0x15(%rax)    ;*bastore
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@56 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.02%                 │  0x00007fae5d49f9de: mov    %r10b,0x16(%rax)   ;*bastore
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@66 (line 233)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.90%    1.42%        │  0x00007fae5d49f9e2: sar    $0x38,%rdx
                        │  0x00007fae5d49f9e6: mov    %edx,%r11d
  0.05%                 │  0x00007fae5d49f9e9: mov    %r11b,0x17(%rax)
           0.03%        │  0x00007fae5d49f9ed: mov    %rax,%rsi          ;*synchronization entry
                        │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  1.00%    1.28%        │  0x00007fae5d49f9f0: mov    $0x8,%edx
                        │  0x00007fae5d49f9f5: xor    %ecx,%ecx
                        │  0x00007fae5d49f9f7: callq  0x00007fae5d046160  ; OopMap{[80]=Oop [88]=Oop [8]=Oop [16]=NarrowOop [24]=Oop off=1212}
                        │                                                ;*invokestatic hash64
                        │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │                                                ;   {static_call}
  0.82%    0.90%        │  0x00007fae5d49f9fc: mov    %eax,%r8d          ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@6 (line 177)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007fae5d49f9ff: shr    $0x20,%rax
  0.02%    0.03%        │  0x00007fae5d49fa03: mov    %eax,%r9d          ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@13 (line 178)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.25%    0.28%        │  0x00007fae5d49fa06: mov    %r8d,%r10d
  0.70%    0.95%        │  0x00007fae5d49fa09: add    %r9d,%r10d         ;*iadd
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@22 (line 180)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.17%    0.28%        │  0x00007fae5d49fa0c: test   %r10d,%r10d
                        │  0x00007fae5d49fa0f: jl     0x00007fae5d49fc53  ;*ifge
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@27 (line 182)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.32%    0.53%        │  0x00007fae5d49fa15: mov    0x10(%rsp),%ebp
  0.53%    1.00%        │  0x00007fae5d49fa19: mov    0x2c(%r12,%rbp,8),%ecx  ;*getfield bitSet
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@39 (line 185)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.02%    0.02%        │  0x00007fae5d49fa1e: mov    0xc(%r12,%rcx,8),%r11d  ;*getfield data
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@42 (line 185)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │                                                ; implicit exception: dispatches to 0x00007fae5d49fe5d
  0.27%    0.47%        │  0x00007fae5d49fa23: mov    0xc(%r12,%r11,8),%ecx  ;*arraylength
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@45 (line 185)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │                                                ; implicit exception: dispatches to 0x00007fae5d49fe6d
  0.22%    0.25%        │  0x00007fae5d49fa28: test   %ecx,%ecx
                        │  0x00007fae5d49fa2a: je     0x00007fae5d49fbd1
  0.48%    0.90%        │  0x00007fae5d49fa30: mov    %r10d,%eax
                        │  0x00007fae5d49fa33: cmp    $0x80000000,%eax
                      ╭ │  0x00007fae5d49fa38: jne    0x00007fae5d49fa41
                      │ │  0x00007fae5d49fa3a: xor    %edx,%edx
                      │ │  0x00007fae5d49fa3c: cmp    $0xffffffffffffffff,%ecx
                      │╭│  0x00007fae5d49fa3f: je     0x00007fae5d49fa44
  0.13%    0.37%      ↘││  0x00007fae5d49fa41: cltd   
                       ││  0x00007fae5d49fa42: idiv   %ecx               ;*irem
                       ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@46 (line 185)
                       ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                       ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                       ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
 16.39%   20.89%       ↘│  0x00007fae5d49fa44: cmp    %ecx,%edx
                        │  0x00007fae5d49fa46: jae    0x00007fae5d49fbe5  ;*laload
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@58 (line 186)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.72%    0.02%        │  0x00007fae5d49fa4c: mov    0xc(%r12,%rbp,8),%esi  ;*getfield k
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@70 (line 188)
                        │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                        │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                        │  0x00007fae5d49fa51: cmp    $0x1,%esi
                        ╰  0x00007fae5d49fa54: jl     0x00007fae5d49f8c2  ;*if_icmpgt
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@73 (line 188)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.03%                    0x00007fae5d49fa5a: shl    $0x3,%r11
                           0x00007fae5d49fa5e: mov    0x10(%r11,%rdx,8),%rbx  ;*laload
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@58 (line 186)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  3.88%    0.05%           0x00007fae5d49fa63: cmp    $0x7ffffffe,%esi
                           0x00007fae5d49fa69: jg     0x00007fae5d49fc19  ;*iload
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@76 (line 189)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
                           0x00007fae5d49fa6f: mov    %r10d,%r11d
           0.02%           0x00007fae5d49fa72: mov    %esi,%edx
                           0x00007fae5d49fa74: inc    %edx
  0.68%    0.02%           0x00007fae5d49fa76: mov    %r9d,%r10d
                           0x00007fae5d49fa79: shl    %r10d              ;*imul
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@82 (line 189)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
           0.03%           0x00007fae5d49fa7c: mov    %r11d,%ecx
                           0x00007fae5d49fa7f: not    %ecx
  0.87%    0.02%           0x00007fae5d49fa81: test   %r11d,%r11d
                           0x00007fae5d49fa84: cmovl  %ecx,%r11d
           0.02%           0x00007fae5d49fa88: add    $0xfffffffffffffffe,%esi
  1.05%                    0x00007fae5d49fa8b: cmp    %esi,%edx
                           0x00007fae5d49fa8d: mov    $0x80000000,%edi
                           0x00007fae5d49fa92: cmovl  %edi,%esi
  1.00%    0.02%           0x00007fae5d49fa95: mov    %r11d,%ecx
                           0x00007fae5d49fa98: and    $0x3f,%ecx
                           0x00007fae5d49fa9b: mov    $0x1,%eax
                           0x00007fae5d49faa0: shl    %cl,%rax           ;*lshl
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@109 (line 195)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
  0.95%                    0x00007fae5d49faa3: cmp    $0x2,%esi
                           0x00007fae5d49faa6: jle    0x00007fae5d49fc49
                           0x00007fae5d49faac: mov    $0x2,%edi          ;*iload
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@76 (line 189)
                                                                         ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe1Bloom1Filter@12 (line 62)
                                                                         ; - com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub@15 (line 232)
....................................................................................................
 56.09%   53.07%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 582 (363 bytes) 

                       Decoding compiled method 0x00007fae5d484a50:
                       Code:
                       [Entry Point]
                       [Verified Entry Point]
                       [Constants]
                         # {method} {0x00007fae70781f50} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                         # parm0:    rsi:rsi   = &apos;[B&apos;
                         # parm1:    rdx       = int
                         # parm2:    rcx       = int
                         #           [sp+0x50]  (sp of caller)
  0.90%    1.53%         0x00007fae5d484be0: mov    %eax,-0x14000(%rsp)
           0.02%         0x00007fae5d484be7: push   %rbp
           0.02%         0x00007fae5d484be8: sub    $0x40,%rsp         ;*synchronization entry
                                                                       ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  0.78%    1.25%         0x00007fae5d484bec: mov    %edx,0x8(%rsp)
                         0x00007fae5d484bf0: mov    %edx,%ebx
                         0x00007fae5d484bf2: sar    $0x3,%ebx          ;*ishr
                                                                       ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  0.80%    1.45%         0x00007fae5d484bf5: movslq %ecx,%r14          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
           0.02%         0x00007fae5d484bf8: mov    $0x87c37b91114253d5,%rdi
                         0x00007fae5d484c02: test   %ebx,%ebx
                  ╭      0x00007fae5d484c04: jle    0x00007fae5d484cec  ;*if_icmpge
                  │                                                    ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │      0x00007fae5d484c0a: mov    0xc(%rsi),%r10d    ;*baload
                  │                                                    ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                    ; implicit exception: dispatches to 0x00007fae5d485051
  0.83%    1.25%  │      0x00007fae5d484c0e: xor    %r9d,%r9d
                  │      0x00007fae5d484c11: xor    %r8d,%r8d
                  │      0x00007fae5d484c14: nopl   0x0(%rax,%rax,1)
                  │      0x00007fae5d484c1c: xchg   %ax,%ax            ;*iload
                  │                                                    ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  0.63%    1.35%  │ ↗    0x00007fae5d484c20: cmp    %r10d,%r9d
                  │ │    0x00007fae5d484c23: jae    0x00007fae5d484e9e  ;*baload
                  │ │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │ │    0x00007fae5d484c29: movzbq 0x10(%rsi,%r9,1),%rcx  ;*land
                  │ │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.03%    0.05%  │ │    0x00007fae5d484c2f: mov    %r9d,%r11d
                  │ │    0x00007fae5d484c32: add    $0x7,%r11d
  0.97%    1.35%  │ │    0x00007fae5d484c36: cmp    %r10d,%r11d
                  │ │    0x00007fae5d484c39: jae    0x00007fae5d484ed1  ;*baload
                  │ │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
                  │ │    0x00007fae5d484c3f: mov    %rcx,(%rsp)
                  │ │    0x00007fae5d484c43: movslq %r9d,%r11          ;*baload
                  │ │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
                  │ │    0x00007fae5d484c46: movzbq 0x11(%rsi,%r11,1),%r9
  0.83%    0.98%  │ │    0x00007fae5d484c4c: movzbq 0x17(%rsi,%r11,1),%rcx
                  │ │    0x00007fae5d484c52: movzbq 0x12(%rsi,%r11,1),%rdx
                  │ │    0x00007fae5d484c58: movzbq 0x13(%rsi,%r11,1),%rax
                  │ │    0x00007fae5d484c5e: movzbq 0x14(%rsi,%r11,1),%rbp
  0.85%    1.00%  │ │    0x00007fae5d484c64: movzbq 0x15(%rsi,%r11,1),%r13
                  │ │    0x00007fae5d484c6a: movzbq 0x16(%rsi,%r11,1),%r11
           0.02%  │ │    0x00007fae5d484c70: shl    $0x8,%r9
                  │ │    0x00007fae5d484c74: or     (%rsp),%r9
  0.90%    1.17%  │ │    0x00007fae5d484c78: shl    $0x30,%r11
                  │ │    0x00007fae5d484c7c: shl    $0x28,%r13
  0.02%           │ │    0x00007fae5d484c80: shl    $0x20,%rbp
                  │ │    0x00007fae5d484c84: shl    $0x18,%rax
  0.63%    1.05%  │ │    0x00007fae5d484c88: shl    $0x10,%rdx
  0.02%           │ │    0x00007fae5d484c8c: or     %rdx,%r9
                  │ │    0x00007fae5d484c8f: or     %rax,%r9
                  │ │    0x00007fae5d484c92: or     %rbp,%r9
  0.93%    1.10%  │ │    0x00007fae5d484c95: or     %r13,%r9
                  │ │    0x00007fae5d484c98: or     %r11,%r9
                  │ │    0x00007fae5d484c9b: shl    $0x38,%rcx
  0.02%           │ │    0x00007fae5d484c9f: or     %rcx,%r9
  1.15%    1.17%  │ │    0x00007fae5d484ca2: imul   %rdi,%r9           ;*lmul
                  │ │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.02%    0.02%  │ │    0x00007fae5d484ca6: rol    $0x1f,%r9
  0.02%           │ │    0x00007fae5d484caa: mov    $0x4cf5ad432745937f,%r11
                  │ │    0x00007fae5d484cb4: imul   %r11,%r9
  0.93%    1.43%  │ │    0x00007fae5d484cb8: xor    %r14,%r9           ;*lxor
                  │ │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
           0.02%  │ │    0x00007fae5d484cbb: rol    $0x1b,%r9          ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.02%    0.03%  │ │    0x00007fae5d484cbf: mov    %r9,%r14
                  │ │    0x00007fae5d484cc2: shl    $0x2,%r14
  0.97%    1.20%  │ │    0x00007fae5d484cc6: add    %r9,%r14
                  │ │    0x00007fae5d484cc9: add    $0x52dce729,%r14   ;*ladd
                  │ │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.02%           │ │    0x00007fae5d484cd0: mov    %r8d,%ecx
                  │ │    0x00007fae5d484cd3: inc    %ecx               ;*iinc
                  │ │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
  0.80%    1.20%  │ │    0x00007fae5d484cd5: cmp    %ebx,%ecx
                  │╭│    0x00007fae5d484cd7: jge    0x00007fae5d484cec  ;*if_icmpge
                  │││                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │││    0x00007fae5d484cd9: shl    $0x3,%r8d
                  │││    0x00007fae5d484cdd: mov    %r8d,%r9d
                  │││    0x00007fae5d484ce0: add    $0x8,%r9d          ;*ishl
                  │││                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││    0x00007fae5d484ce4: mov    %ecx,%r8d
                  ││╰    0x00007fae5d484ce7: jmpq   0x00007fae5d484c20  ;*if_icmpge
                  ││                                                   ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  ↘↘     0x00007fae5d484cec: mov    0x8(%rsp),%r8d
           0.02%         0x00007fae5d484cf1: and    $0xfffffffffffffff8,%r8d  ;*ishl
                                                                       ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
                         0x00007fae5d484cf5: mov    0x8(%rsp),%r10d
  0.87%    0.88%         0x00007fae5d484cfa: sub    %r8d,%r10d         ;*isub
                                                                       ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
                         0x00007fae5d484cfd: movslq %r8d,%r9           ;*baload
                                                                       ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.02%                  0x00007fae5d484d00: xor    %ecx,%ecx
                         0x00007fae5d484d02: cmp    $0x4,%r10d
                         0x00007fae5d484d06: je     0x00007fae5d484dad
  0.88%    0.85%         0x00007fae5d484d0c: cmp    $0x4,%r10d
  0.02%              ╭   0x00007fae5d484d10: jle    0x00007fae5d484d2d
                     │   0x00007fae5d484d12: cmp    $0x7,%r10d
                     │╭  0x00007fae5d484d16: je     0x00007fae5d484d50
                     ││  0x00007fae5d484d18: cmp    $0x7,%r10d
                     ││  0x00007fae5d484d1c: jg     0x00007fae5d484e50
                     ││  0x00007fae5d484d22: cmp    $0x6,%r10d
                     ││  0x00007fae5d484d26: je     0x00007fae5d484d6d
                     ││  0x00007fae5d484d28: xor    %r11d,%r11d
                     ││  0x00007fae5d484d2b: jmp    0x00007fae5d484d8d
  0.02%              ↘│  0x00007fae5d484d2d: cmp    $0x2,%r10d
                      │  0x00007fae5d484d31: je     0x00007fae5d484df3
           0.02%      │  0x00007fae5d484d37: cmp    $0x2,%r10d
                      │  0x00007fae5d484d3b: jg     0x00007fae5d484dd0
                      │  0x00007fae5d484d41: cmp    $0x1,%r10d
                      │  0x00007fae5d484d45: je     0x00007fae5d484e15  ;*tableswitch
                      │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@206 (line 156)
  0.87%    0.93%      │  0x00007fae5d484d4b: jmpq   0x00007fae5d484e50
                      ↘  0x00007fae5d484d50: mov    %r8d,%ebp
                         0x00007fae5d484d53: add    $0x6,%ebp          ;*iadd
                                                                       ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@255 (line 158)
                         0x00007fae5d484d56: mov    0xc(%rsi),%r11d    ; implicit exception: dispatches to 0x00007fae5d485091
                         0x00007fae5d484d5a: cmp    %r11d,%ebp
                         0x00007fae5d484d5d: jae    0x00007fae5d484fe1  ;*baload
                                                                       ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@256 (line 158)
                         0x00007fae5d484d63: movzbq 0x16(%rsi,%r9,1),%rcx
                         0x00007fae5d484d69: shl    $0x30,%rcx         ;*lload
....................................................................................................
 15.71%   21.37%  <total for region 2>

....[Hottest Regions]...............................................................................
 56.09%   53.07%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub, version 623 (543 bytes) 
 15.71%   21.37%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 582 (363 bytes) 
  6.34%    5.49%           libjvm.so  [unknown] (9 bytes) 
  3.76%    6.47%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 582 (77 bytes) 
  2.71%    2.95%           libjvm.so  [unknown] (47 bytes) 
  2.58%    2.43%   [kernel.kallsyms]  native_read_msr_safe (41 bytes) 
  0.92%    0.07%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub, version 623 (0 bytes) 
  0.42%    0.03%   [kernel.kallsyms]  clear_page_c_e (0 bytes) 
  0.38%    0.03%   [kernel.kallsyms]  __list_del_entry (9 bytes) 
  0.38%    0.45%           libjvm.so  [unknown] (100 bytes) 
  0.32%    0.02%   [kernel.kallsyms]  _raw_spin_lock_irqsave (26 bytes) 
  0.30%            [kernel.kallsyms]  page_fault (0 bytes) 
  0.27%            [kernel.kallsyms]  mem_cgroup_page_lruvec (26 bytes) 
  0.17%            [kernel.kallsyms]  mutex_unlock (0 bytes) 
  0.17%    0.03%   [kernel.kallsyms]  mutex_lock (26 bytes) 
  0.17%            [kernel.kallsyms]  apic_timer_interrupt (0 bytes) 
  0.17%                    libjvm.so  [unknown] (0 bytes) 
  0.15%    0.08%   [kernel.kallsyms]  __sb_start_write (45 bytes) 
  0.13%    0.02%   [kernel.kallsyms]  system_call (12 bytes) 
  0.13%    0.25%           libjvm.so  [unknown] (76 bytes) 
  8.74%    7.24%  <...other 520 warm regions...>
....................................................................................................
100.00%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 57.01%   53.13%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.generated.BenchmarkBloom1FilterProbe_testProbe1Bloom1Filter_jmhTest::testProbe1Bloom1Filter_avgt_jmhStub, version 623 
 19.47%   27.84%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 582 
 11.58%   11.50%           libjvm.so  [unknown] 
  2.58%    2.43%   [kernel.kallsyms]  native_read_msr_safe 
  0.42%    0.03%   [kernel.kallsyms]  clear_page_c_e 
  0.38%    0.03%   [kernel.kallsyms]  __list_del_entry 
  0.32%            [kernel.kallsyms]  page_fault 
  0.32%    0.02%   [kernel.kallsyms]  _raw_spin_lock_irqsave 
  0.32%    0.03%   [kernel.kallsyms]  mem_cgroup_page_lruvec 
  0.20%    0.02%   [kernel.kallsyms]  update_wall_time 
  0.20%    0.25%   [kernel.kallsyms]  get_page_from_freelist 
  0.18%    0.10%        libc-2.17.so  __memcpy_ssse3_back 
  0.18%               hsdis-amd64.so  print_insn 
  0.18%    0.02%   [kernel.kallsyms]  apic_timer_interrupt 
  0.17%    0.03%   [kernel.kallsyms]  mutex_lock 
  0.17%            [kernel.kallsyms]  mutex_unlock 
  0.15%    0.08%   [kernel.kallsyms]  __sb_start_write 
  0.13%            [kernel.kallsyms]  trigger_load_balance 
  0.13%            [kernel.kallsyms]  update_vsyscall 
  0.13%    0.02%   [kernel.kallsyms]  system_call 
  5.78%    3.20%  <...other 176 warm methods...>
....................................................................................................
100.00%   98.75%  <totals>

....[Distribution by Source]........................................................................
 76.48%   80.98%         C2, level 4
 11.58%   11.50%           libjvm.so
 10.27%    6.15%   [kernel.kallsyms]
  0.78%    0.85%        libc-2.17.so
  0.30%    0.03%      hsdis-amd64.so
  0.18%    0.15%  libpthread-2.17.so
  0.15%    0.20%              [ext4]
  0.12%    0.07%              [jbd2]
  0.10%    0.05%         interpreter
  0.02%                        [kvm]
  0.02%                  C1, level 1
....................................................................................................
100.00%  100.00%  <totals>



# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe20KBloom1Filter
# Parameters: (size = 10000)

# Run progress: 33.33% complete, ETA 00:01:22
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 73.575 ns/op
# Warmup Iteration   2: 45.335 ns/op
# Warmup Iteration   3: 32.809 ns/op
# Warmup Iteration   4: 32.699 ns/op
# Warmup Iteration   5: 43.695 ns/op
Iteration   1: 35.733 ns/op
Iteration   2: 29.314 ns/op
Iteration   3: 29.660 ns/op
Iteration   4: 28.523 ns/op
Iteration   5: 29.883 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe20KBloom1Filter":
  30.622 ±(99.9%) 11.180 ns/op [Average]
  (min, avg, max) = (28.523, 30.622, 35.733), stdev = 2.903
  CI (99.9%): [19.443, 41.802] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe20KBloom1Filter:·asm":
PrintAssembly processed: 188297 total address lines.
Perf output processed (skipped 11.544 seconds):
 Column 1: cycles (5823 events)
 Column 2: instructions (5810 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter, version 590 (328 bytes) 

                       0x00007f779548c327: push   %rbp
                       0x00007f779548c328: sub    $0x30,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@-1 (line 69)
                       0x00007f779548c32c: mov    %rsi,(%rsp)
                       0x00007f779548c330: mov    $0x4e20,%ebp
                  ╭    0x00007f779548c335: jmp    0x00007f779548c34b
                  │    0x00007f779548c337: nopw   0x0(%rax,%rax,1)   ;*lload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@119 (line 198)
                  │                                                  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  │                                                  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.03%           │    0x00007f779548c340: dec    %ebp               ;*iinc
                  │                                                  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@18 (line 69)
  1.41%    0.07%  │    0x00007f779548c342: cmp    $0xffffffffffffffff,%ebp
                  │    0x00007f779548c345: jle    0x00007f779548c50a  ;*aload_0
                  │                                                  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@8 (line 70)
  0.02%           ↘    0x00007f779548c34b: mov    (%rsp),%r11
  0.03%                0x00007f779548c34f: mov    0x10(%r11),%r8d    ;*getfield bf
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@9 (line 70)
                       0x00007f779548c353: movslq %ebp,%r9           ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@13 (line 70)
  1.27%    0.07%       0x00007f779548c356: test   %r8d,%r8d
                       0x00007f779548c359: je     0x00007f779548c516  ;*invokevirtual testLong
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
           0.02%       0x00007f779548c35f: mov    0x60(%r15),%rax
  0.03%                0x00007f779548c363: mov    %rax,%r10
  0.03%                0x00007f779548c366: add    $0x18,%r10
  1.00%    0.02%       0x00007f779548c36a: lea    (%r12,%r8,8),%rcx  ;*getfield bf
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@9 (line 70)
           0.03%       0x00007f779548c36e: cmp    0x70(%r15),%r10
                       0x00007f779548c372: jae    0x00007f779548c4dd
  0.03%    0.02%       0x00007f779548c378: mov    %r10,0x60(%r15)
                       0x00007f779548c37c: prefetchnta 0xc0(%r10)
  1.43%    0.19%       0x00007f779548c384: movq   $0x1,(%rax)
  0.02%                0x00007f779548c38b: prefetchnta 0x100(%r10)
  0.41%    0.05%       0x00007f779548c393: movl   $0x768,0x8(%rax)   ;   {metadata({type array byte})}
  0.09%                0x00007f779548c39a: prefetchnta 0x140(%r10)
  1.25%    0.03%       0x00007f779548c3a2: movl   $0x8,0xc(%rax)
                       0x00007f779548c3a9: prefetchnta 0x180(%r10)
  0.55%    0.03%       0x00007f779548c3b1: movl   $0x0,0x10(%rax)
  0.03%                0x00007f779548c3b8: movl   $0x0,0x14(%rax)
  1.29%    0.03%       0x00007f779548c3bf: mov    %r8d,0x8(%rsp)
  0.02%    0.02%       0x00007f779548c3c4: mov    %rcx,0x18(%rsp)    ;*newarray
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@2 (line 233)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.02%                0x00007f779548c3c9: mov    %bpl,0x10(%rax)    ;*bastore
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@11 (line 233)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.05%                0x00007f779548c3cd: mov    %ebp,0xc(%rsp)
  1.08%    0.05%       0x00007f779548c3d1: mov    %r9,%r10
                       0x00007f779548c3d4: sar    $0x30,%r10
  0.12%                0x00007f779548c3d8: mov    %r9,%r11
                       0x00007f779548c3db: sar    $0x28,%r11
  1.24%    0.02%       0x00007f779548c3df: mov    %r10d,%r10d
           0.03%       0x00007f779548c3e2: mov    %r11d,%r8d
  0.05%    0.02%       0x00007f779548c3e5: mov    %r9,%r11
  0.02%                0x00007f779548c3e8: sar    $0x20,%r11
  1.20%    0.05%       0x00007f779548c3ec: mov    %r9,%rcx
           0.02%       0x00007f779548c3ef: sar    $0x18,%rcx
  0.02%    0.05%       0x00007f779548c3f3: mov    %r11d,%r11d
                       0x00007f779548c3f6: mov    %ecx,%ecx
  1.20%                0x00007f779548c3f8: mov    %r9,%rdx
                       0x00007f779548c3fb: sar    $0x10,%r9
  0.03%    0.07%       0x00007f779548c3ff: mov    %rdx,%rbx
                       0x00007f779548c402: sar    $0x8,%rbx
  1.27%    0.05%       0x00007f779548c406: mov    %r9d,%r9d
           0.02%       0x00007f779548c409: mov    %ebx,%edi
  0.03%    0.02%       0x00007f779548c40b: mov    %dil,0x11(%rax)    ;*bastore
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@20 (line 233)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.10%    0.12%       0x00007f779548c40f: mov    %r9b,0x12(%rax)    ;*bastore
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@29 (line 233)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  1.32%    0.02%       0x00007f779548c413: mov    %cl,0x13(%rax)     ;*bastore
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@38 (line 233)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.03%    0.03%       0x00007f779548c416: mov    %r11b,0x14(%rax)   ;*bastore
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@47 (line 233)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.14%    0.12%       0x00007f779548c41a: mov    %r8b,0x15(%rax)    ;*bastore
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@56 (line 233)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.10%    0.07%       0x00007f779548c41e: mov    %r10b,0x16(%rax)   ;*bastore
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@66 (line 233)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  1.13%    0.12%       0x00007f779548c422: sar    $0x38,%rdx
                       0x00007f779548c426: mov    %edx,%r11d
  0.03%    0.03%       0x00007f779548c429: mov    %r11b,0x17(%rax)
  0.14%    0.07%       0x00007f779548c42d: mov    %rax,%rsi          ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  1.36%    0.10%       0x00007f779548c430: mov    $0x8,%edx
                       0x00007f779548c435: xor    %ecx,%ecx
  0.02%    0.02%       0x00007f779548c437: callq  0x00007f7795046160  ; OopMap{[0]=Oop [8]=NarrowOop [24]=Oop off=316}
                                                                     ;*invokestatic hash64
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                                                                     ;   {static_call}
  0.93%    1.62%       0x00007f779548c43c: mov    0x8(%rsp),%r11d
  0.03%                0x00007f779548c441: mov    0x2c(%r12,%r11,8),%r10d  ;*getfield bitSet
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@39 (line 185)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.21%    0.17%       0x00007f779548c446: mov    0xc(%r12,%r10,8),%r8d  ;*getfield data
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@42 (line 185)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                                                                     ; implicit exception: dispatches to 0x00007f779548c585
  1.41%    2.07%       0x00007f779548c44b: mov    0xc(%r12,%r8,8),%ebx  ;*arraylength
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@45 (line 185)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                                                                     ; implicit exception: dispatches to 0x00007f779548c595
  0.84%    0.83%       0x00007f779548c450: mov    %eax,%ecx          ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@6 (line 177)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                       0x00007f779548c452: shr    $0x20,%rax
           0.02%       0x00007f779548c456: mov    %eax,%r10d         ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@13 (line 178)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.84%    1.26%       0x00007f779548c459: mov    %ecx,%eax
  0.33%    0.31%       0x00007f779548c45b: add    %r10d,%eax         ;*iadd
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@22 (line 180)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.02%    0.03%       0x00007f779548c45e: mov    %eax,%edi
  0.02%    0.02%       0x00007f779548c460: not    %edi
  0.88%    1.24%       0x00007f779548c462: test   %eax,%eax
  0.46%    0.53%       0x00007f779548c464: cmovl  %edi,%eax          ;*iload
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@36 (line 185)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.02%    0.07%       0x00007f779548c467: test   %ebx,%ebx
                       0x00007f779548c469: je     0x00007f779548c529
  0.81%    1.27%       0x00007f779548c46f: cmp    $0x80000000,%eax
                   ╭   0x00007f779548c474: jne    0x00007f779548c47d
                   │   0x00007f779548c476: xor    %edx,%edx
                   │   0x00007f779548c478: cmp    $0xffffffffffffffff,%ebx
                   │╭  0x00007f779548c47b: je     0x00007f779548c480
  0.36%    0.65%   ↘│  0x00007f779548c47d: cltd   
  0.02%    0.05%    │  0x00007f779548c47e: idiv   %ebx               ;*irem
                    │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@46 (line 185)
                    │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                    │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
 24.70%   29.16%    ↘  0x00007f779548c480: cmp    %ebx,%edx
                       0x00007f779548c482: jae    0x00007f779548c53d  ;*laload
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@58 (line 186)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  1.08%    0.05%       0x00007f779548c488: mov    0xc(%r12,%r11,8),%r9d  ;*getfield k
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@70 (line 188)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                       0x00007f779548c48d: cmp    $0x1,%r9d
                       0x00007f779548c491: jl     0x00007f779548c340  ;*if_icmpgt
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@73 (line 188)
                                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
....................................................................................................
 52.60%   41.03%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 579 (300 bytes) 

                     Decoding compiled method 0x00007f7795489d10:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007f778e2edf50} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  1.20%    0.60%       0x00007f7795489ea0: mov    %eax,-0x14000(%rsp)
  0.60%    0.88%       0x00007f7795489ea7: push   %rbp
  0.09%    0.21%       0x00007f7795489ea8: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  1.25%    2.84%       0x00007f7795489eac: mov    %edx,0x8(%rsp)
  0.07%    0.19%       0x00007f7795489eb0: mov    %edx,%ebx
  0.03%    0.03%       0x00007f7795489eb2: sar    $0x3,%ebx          ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  1.15%    2.07%       0x00007f7795489eb5: movslq %ecx,%r14          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
                       0x00007f7795489eb8: mov    $0x87c37b91114253d5,%rdi
  0.07%    0.07%       0x00007f7795489ec2: test   %ebx,%ebx
                  ╭    0x00007f7795489ec4: jle    0x00007f7795489fac  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.02%    0.02%  │    0x00007f7795489eca: mov    0xc(%rsi),%r10d    ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007f779548a311
  0.98%    2.01%  │    0x00007f7795489ece: xor    %r9d,%r9d
                  │    0x00007f7795489ed1: xor    %r8d,%r8d
  0.09%    0.02%  │    0x00007f7795489ed4: nopl   0x0(%rax,%rax,1)
  0.05%    0.03%  │    0x00007f7795489edc: xchg   %ax,%ax            ;*iload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  1.37%    2.44%  │ ↗  0x00007f7795489ee0: cmp    %r10d,%r9d
                  │ │  0x00007f7795489ee3: jae    0x00007f779548a15e  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
  0.02%           │ │  0x00007f7795489ee9: movzbq 0x10(%rsi,%r9,1),%rcx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.12%    0.03%  │ │  0x00007f7795489eef: mov    %r9d,%r11d
  0.02%    0.02%  │ │  0x00007f7795489ef2: add    $0x7,%r11d
  1.29%    1.91%  │ │  0x00007f7795489ef6: cmp    %r10d,%r11d
                  │ │  0x00007f7795489ef9: jae    0x00007f779548a191  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
                  │ │  0x00007f7795489eff: mov    %rcx,(%rsp)
  0.05%    0.03%  │ │  0x00007f7795489f03: movslq %r9d,%r11          ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
  0.05%    0.03%  │ │  0x00007f7795489f06: movzbq 0x11(%rsi,%r11,1),%r9
  1.17%    1.43%  │ │  0x00007f7795489f0c: movzbq 0x17(%rsi,%r11,1),%rcx
  0.02%           │ │  0x00007f7795489f12: movzbq 0x12(%rsi,%r11,1),%rdx
  0.07%    0.03%  │ │  0x00007f7795489f18: movzbq 0x13(%rsi,%r11,1),%rax
                  │ │  0x00007f7795489f1e: movzbq 0x14(%rsi,%r11,1),%rbp
  1.22%    1.74%  │ │  0x00007f7795489f24: movzbq 0x15(%rsi,%r11,1),%r13
                  │ │  0x00007f7795489f2a: movzbq 0x16(%rsi,%r11,1),%r11
  0.03%    0.05%  │ │  0x00007f7795489f30: shl    $0x8,%r9
  0.03%           │ │  0x00007f7795489f34: or     (%rsp),%r9
  1.15%    1.91%  │ │  0x00007f7795489f38: shl    $0x30,%r11
  0.02%           │ │  0x00007f7795489f3c: shl    $0x28,%r13
  0.07%    0.05%  │ │  0x00007f7795489f40: shl    $0x20,%rbp
                  │ │  0x00007f7795489f44: shl    $0x18,%rax
  1.27%    1.81%  │ │  0x00007f7795489f48: shl    $0x10,%rdx
                  │ │  0x00007f7795489f4c: or     %rdx,%r9
  0.07%    0.05%  │ │  0x00007f7795489f4f: or     %rax,%r9
  0.05%    0.02%  │ │  0x00007f7795489f52: or     %rbp,%r9
  1.31%    1.67%  │ │  0x00007f7795489f55: or     %r13,%r9
  0.03%    0.05%  │ │  0x00007f7795489f58: or     %r11,%r9
  0.12%    0.17%  │ │  0x00007f7795489f5b: shl    $0x38,%rcx
  0.02%           │ │  0x00007f7795489f5f: or     %rcx,%r9
  1.22%    1.69%  │ │  0x00007f7795489f62: imul   %rdi,%r9           ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.33%    0.22%  │ │  0x00007f7795489f66: rol    $0x1f,%r9
  0.02%    0.02%  │ │  0x00007f7795489f6a: mov    $0x4cf5ad432745937f,%r11
                  │ │  0x00007f7795489f74: imul   %r11,%r9
  1.48%    2.32%  │ │  0x00007f7795489f78: xor    %r14,%r9           ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.07%    0.05%  │ │  0x00007f7795489f7b: rol    $0x1b,%r9          ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.14%    0.12%  │ │  0x00007f7795489f7f: mov    %r9,%r14
                  │ │  0x00007f7795489f82: shl    $0x2,%r14
  1.08%    1.81%  │ │  0x00007f7795489f86: add    %r9,%r14
  0.17%    0.14%  │ │  0x00007f7795489f89: add    $0x52dce729,%r14   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.07%    0.14%  │ │  0x00007f7795489f90: mov    %r8d,%ecx
                  │ │  0x00007f7795489f93: inc    %ecx               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
  1.03%    1.79%  │ │  0x00007f7795489f95: cmp    %ebx,%ecx
                  │╭│  0x00007f7795489f97: jge    0x00007f7795489fac  ;*if_icmpge
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │││  0x00007f7795489f99: shl    $0x3,%r8d
                  │││  0x00007f7795489f9d: mov    %r8d,%r9d
                  │││  0x00007f7795489fa0: add    $0x8,%r9d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007f7795489fa4: mov    %ecx,%r8d
                  ││╰  0x00007f7795489fa7: jmpq   0x00007f7795489ee0  ;*if_icmpge
                  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.05%           ↘↘   0x00007f7795489fac: mov    0x8(%rsp),%r8d
  0.05%    0.07%       0x00007f7795489fb1: and    $0xfffffffffffffff8,%r8d  ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
                       0x00007f7795489fb5: mov    0x8(%rsp),%r10d
  1.12%    1.36%       0x00007f7795489fba: sub    %r8d,%r10d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
  0.03%    0.02%       0x00007f7795489fbd: movslq %r8d,%r9           ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.10%    0.07%       0x00007f7795489fc0: xor    %ecx,%ecx
                       0x00007f7795489fc2: cmp    $0x4,%r10d
                       0x00007f7795489fc6: je     0x00007f779548a06d
  1.32%    0.96%       0x00007f7795489fcc: cmp    $0x4,%r10d
                       0x00007f7795489fd0: jle    0x00007f7795489fed
                       0x00007f7795489fd2: cmp    $0x7,%r10d
                       0x00007f7795489fd6: je     0x00007f779548a010
                       0x00007f7795489fd8: cmp    $0x7,%r10d
                       0x00007f7795489fdc: jg     0x00007f779548a110
                       0x00007f7795489fe2: cmp    $0x6,%r10d
                       0x00007f7795489fe6: je     0x00007f779548a02d
                       0x00007f7795489fe8: xor    %r11d,%r11d
                       0x00007f7795489feb: jmp    0x00007f779548a04d
  0.02%    0.03%       0x00007f7795489fed: cmp    $0x2,%r10d
....................................................................................................
 23.44%   33.20%  <total for region 2>

....[Hottest Regions]...............................................................................
 52.60%   41.03%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter, version 590 (328 bytes) 
 23.44%   33.20%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 579 (300 bytes) 
  9.19%    9.17%   [kernel.kallsyms]  native_write_msr_safe (0 bytes) 
  5.58%    8.67%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 579 (77 bytes) 
  1.15%    1.36%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 579 (30 bytes) 
  1.05%    0.84%           libjvm.so  JVM_CurrentThread (9 bytes) 
  0.39%    0.57%           libjvm.so  JVM_CurrentThread (14 bytes) 
  0.22%            [kernel.kallsyms]  page_fault (0 bytes) 
  0.14%    0.07%           libjvm.so  JVM_CurrentThread (82 bytes) 
  0.12%    0.03%   [kernel.kallsyms]  mutex_unlock (0 bytes) 
  0.10%    0.38%           libjvm.so  JVM_CurrentThread (91 bytes) 
  0.09%    0.09%   [kernel.kallsyms]  __srcu_read_lock (59 bytes) 
  0.09%    0.02%   [kernel.kallsyms]  do_numa_page (0 bytes) 
  0.09%    0.05%   [kernel.kallsyms]  __sb_end_write (14 bytes) 
  0.09%    0.02%   [kernel.kallsyms]  fget_light (50 bytes) 
  0.09%    0.05%   [kernel.kallsyms]  mutex_lock (15 bytes) 
  0.09%    0.03%           libjvm.so  JVM_CurrentThread (44 bytes) 
  0.07%    0.03%   [kernel.kallsyms]  __sb_start_write (9 bytes) 
  0.07%    0.03%   [kernel.kallsyms]  _raw_spin_lock_irqsave (24 bytes) 
  0.07%    0.07%           libjvm.so  JVM_CurrentThread (48 bytes) 
  5.27%    4.27%  <...other 382 warm regions...>
....................................................................................................
 99.98%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 52.60%   41.03%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter, version 590 
 30.17%   43.24%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 579 
  9.19%    9.17%   [kernel.kallsyms]  native_write_msr_safe 
  2.70%    2.94%           libjvm.so  JVM_CurrentThread 
  0.50%    0.33%           libjvm.so  [unknown] 
  0.22%            [kernel.kallsyms]  page_fault 
  0.15%    0.05%      hsdis-amd64.so  print_insn 
  0.15%    0.12%        libc-2.17.so  vfprintf 
  0.12%    0.03%   [kernel.kallsyms]  mutex_unlock 
  0.10%    0.02%   [kernel.kallsyms]  do_numa_page 
  0.10%    0.12%        libc-2.17.so  _IO_fwrite 
  0.09%    0.05%   [kernel.kallsyms]  mutex_lock 
  0.09%    0.05%   [kernel.kallsyms]  fget_light 
  0.09%    0.09%   [kernel.kallsyms]  __srcu_read_lock 
  0.09%    0.05%   [kernel.kallsyms]  __sb_end_write 
  0.07%    0.07%   [kernel.kallsyms]  __audit_syscall_entry 
  0.07%    0.03%              [ext4]  ext4_mark_iloc_dirty 
  0.07%    0.02%   [kernel.kallsyms]  select_task_rq_fair 
  0.07%    0.03%   [kernel.kallsyms]  _raw_spin_lock_irqsave 
  0.07%    0.05%   [kernel.kallsyms]  __sb_start_write 
  3.28%    1.55%  <...other 136 warm methods...>
....................................................................................................
 99.98%   99.05%  <totals>

....[Distribution by Source]........................................................................
 82.78%   84.27%         C2, level 4
 12.38%   11.15%   [kernel.kallsyms]
  3.19%    3.27%           libjvm.so
  0.70%    0.77%        libc-2.17.so
  0.24%    0.09%      hsdis-amd64.so
  0.21%    0.19%              [ext4]
  0.15%    0.10%  libpthread-2.17.so
  0.15%    0.05%         interpreter
  0.14%    0.10%              [jbd2]
  0.02%                 runtime stub
  0.02%                  C1, level 1
....................................................................................................
 99.98%  100.00%  <totals>



# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe20KBloom1Filter
# Parameters: (size = 10000000)

# Run progress: 50.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 92.249 ns/op
# Warmup Iteration   2: 60.000 ns/op
# Warmup Iteration   3: 62.902 ns/op
# Warmup Iteration   4: 66.565 ns/op
# Warmup Iteration   5: 67.599 ns/op
Iteration   1: 78.051 ns/op
Iteration   2: 76.886 ns/op
Iteration   3: 66.146 ns/op
Iteration   4: 71.180 ns/op
Iteration   5: 70.805 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe20KBloom1Filter":
  72.613 ±(99.9%) 18.763 ns/op [Average]
  (min, avg, max) = (66.146, 72.613, 78.051), stdev = 4.873
  CI (99.9%): [53.850, 91.377] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe20KBloom1Filter:·asm":
PrintAssembly processed: 187619 total address lines.
Perf output processed (skipped 11.472 seconds):
 Column 1: cycles (5795 events)
 Column 2: instructions (5699 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter, version 591 (470 bytes) 

                          0x00007f07a9486ea7: push   %rbp
                          0x00007f07a9486ea8: sub    $0x30,%rsp         ;*synchronization entry
                                                                        ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@-1 (line 69)
                          0x00007f07a9486eac: mov    %rsi,(%rsp)
                          0x00007f07a9486eb0: mov    $0x4e20,%ebp
                  ╭       0x00007f07a9486eb5: jmp    0x00007f07a9486f03
                  │       0x00007f07a9486eb7: nop                       ;*imul
                  │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@82 (line 189)
                  │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.52%    0.07%  │ ↗     0x00007f07a9486eb8: add    %r8d,%r10d         ;*iadd
                  │ │                                                   ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@83 (line 189)
                  │ │                                                   ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  │ │                                                   ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                  │ │     0x00007f07a9486ebb: mov    %r10d,%ecx
  0.76%    0.09%  │ │     0x00007f07a9486ebe: not    %ecx
  0.76%    0.11%  │ │     0x00007f07a9486ec0: test   %r10d,%r10d
  0.66%    0.07%  │ │     0x00007f07a9486ec3: cmovl  %ecx,%r10d
  0.72%    0.02%  │ │     0x00007f07a9486ec7: and    $0x3f,%r10d
  0.64%    0.07%  │ │     0x00007f07a9486ecb: mov    $0x1,%edi
  0.38%    0.02%  │ │     0x00007f07a9486ed0: mov    %r10d,%ecx
                  │ │     0x00007f07a9486ed3: shl    %cl,%rdi
  0.93%    1.93%  │ │     0x00007f07a9486ed6: or     %rdi,%r11          ;*lor  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@110 (line 195)
                  │ │                                                   ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  │ │                                                   ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.48%    0.12%  │ │     0x00007f07a9486ed9: inc    %edx               ;*iinc
                  │ │                                                   ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@113 (line 188)
                  │ │                                                   ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  │ │                                                   ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                  │ │     0x00007f07a9486edb: cmp    %esi,%edx
                  │╭│     0x00007f07a9486edd: jge    0x00007f07a9486ee8  ;*if_icmpgt
                  │││                                                   ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@73 (line 188)
                  │││                                                   ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  │││                                                   ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                  │││     0x00007f07a9486edf: mov    %edx,%r10d
  0.50%           │││     0x00007f07a9486ee2: imul   %r9d,%r10d         ;*imul
                  │││                                                   ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@82 (line 189)
                  │││                                                   ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  │││                                                   ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.55%    0.09%  ││╰     0x00007f07a9486ee6: jmp    0x00007f07a9486eb8
  0.48%    1.23%  │↘      0x00007f07a9486ee8: and    %r11,%rbx          ;*land
                  │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@123 (line 198)
                  │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                  │       0x00007f07a9486eeb: cmp    %r11,%rbx
                  │       0x00007f07a9486eee: jne    0x00007f07a9487247  ;*ifne
                  │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@127 (line 198)
                  │                                                     ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  │                                                     ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                  │    ↗  0x00007f07a9486ef4: mov    0xc(%rsp),%ebp
                  │    │  0x00007f07a9486ef8: dec    %ebp               ;*iinc
                  │    │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@18 (line 69)
  0.69%    1.37%  │    │  0x00007f07a9486efa: cmp    $0xffffffffffffffff,%ebp
                  │    │  0x00007f07a9486efd: jle    0x00007f07a94871a6  ;*aload_0
                  │    │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@8 (line 70)
                  ↘    │  0x00007f07a9486f03: mov    (%rsp),%r8
                       │  0x00007f07a9486f07: mov    0x10(%r8),%r11d    ;*getfield bf
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@9 (line 70)
                       │  0x00007f07a9486f0b: movslq %ebp,%r9           ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@13 (line 70)
  0.60%    1.42%       │  0x00007f07a9486f0e: test   %r11d,%r11d
                       │  0x00007f07a9486f11: je     0x00007f07a94871b2  ;*invokevirtual testLong
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                       │  0x00007f07a9486f17: mov    0x60(%r15),%rax
  0.03%                │  0x00007f07a9486f1b: mov    %rax,%r10
                       │  0x00007f07a9486f1e: add    $0x18,%r10
  0.43%    0.63%       │  0x00007f07a9486f22: lea    (%r12,%r11,8),%rcx  ;*getfield bf
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@9 (line 70)
                       │  0x00007f07a9486f26: cmp    0x70(%r15),%r10
                       │  0x00007f07a9486f2a: jae    0x00007f07a9487176
                       │  0x00007f07a9486f30: mov    %r10,0x60(%r15)
                       │  0x00007f07a9486f34: prefetchnta 0xc0(%r10)
  1.71%    2.47%       │  0x00007f07a9486f3c: movq   $0x1,(%rax)
  0.03%                │  0x00007f07a9486f43: prefetchnta 0x100(%r10)
  1.35%    0.21%       │  0x00007f07a9486f4b: movl   $0x768,0x8(%rax)   ;   {metadata({type array byte})}
  0.03%                │  0x00007f07a9486f52: prefetchnta 0x140(%r10)
  1.79%    1.47%       │  0x00007f07a9486f5a: movl   $0x8,0xc(%rax)
  0.02%                │  0x00007f07a9486f61: prefetchnta 0x180(%r10)
  1.69%    0.26%       │  0x00007f07a9486f69: movl   $0x0,0x10(%rax)
  0.02%                │  0x00007f07a9486f70: movl   $0x0,0x14(%rax)
  0.64%    1.07%       │  0x00007f07a9486f77: mov    %r11d,0x8(%rsp)
                       │  0x00007f07a9486f7c: mov    %rcx,0x18(%rsp)    ;*newarray
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@2 (line 233)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.03%                │  0x00007f07a9486f81: mov    %bpl,0x10(%rax)    ;*bastore
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@11 (line 233)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                       │  0x00007f07a9486f85: mov    %ebp,0xc(%rsp)
  0.55%    1.74%       │  0x00007f07a9486f89: mov    %r9,%r10
                       │  0x00007f07a9486f8c: sar    $0x30,%r10
  0.05%                │  0x00007f07a9486f90: mov    %r9,%r11
                       │  0x00007f07a9486f93: sar    $0x28,%r11
  0.55%    1.56%       │  0x00007f07a9486f97: mov    %r10d,%r10d
                       │  0x00007f07a9486f9a: mov    %r11d,%r8d
  0.02%                │  0x00007f07a9486f9d: mov    %r9,%r11
                       │  0x00007f07a9486fa0: sar    $0x20,%r11
  0.57%    0.93%       │  0x00007f07a9486fa4: mov    %r9,%rbx
                       │  0x00007f07a9486fa7: sar    $0x18,%r9
  0.02%                │  0x00007f07a9486fab: mov    %r11d,%r11d
           0.02%       │  0x00007f07a9486fae: mov    %r9d,%ecx
  0.67%    0.97%       │  0x00007f07a9486fb1: mov    %rbx,%r9
                       │  0x00007f07a9486fb4: sar    $0x10,%r9
                       │  0x00007f07a9486fb8: mov    %rbx,%rdi
  0.02%                │  0x00007f07a9486fbb: sar    $0x8,%rdi
  0.50%    1.70%       │  0x00007f07a9486fbf: mov    %r9d,%r9d
                       │  0x00007f07a9486fc2: mov    %edi,%edi
  0.05%                │  0x00007f07a9486fc4: mov    %dil,0x11(%rax)    ;*bastore
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@20 (line 233)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                       │  0x00007f07a9486fc8: mov    %r9b,0x12(%rax)    ;*bastore
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@29 (line 233)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.64%    1.23%       │  0x00007f07a9486fcc: mov    %cl,0x13(%rax)     ;*bastore
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@38 (line 233)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                       │  0x00007f07a9486fcf: mov    %r11b,0x14(%rax)   ;*bastore
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@47 (line 233)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.02%                │  0x00007f07a9486fd3: mov    %r8b,0x15(%rax)    ;*bastore
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@56 (line 233)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                       │  0x00007f07a9486fd7: mov    %r10b,0x16(%rax)   ;*bastore
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@66 (line 233)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.62%    0.88%       │  0x00007f07a9486fdb: sar    $0x38,%rbx
  0.02%                │  0x00007f07a9486fdf: mov    %ebx,%r10d
                       │  0x00007f07a9486fe2: mov    %r10b,0x17(%rax)
  0.02%                │  0x00007f07a9486fe6: mov    %rax,%rsi          ;*synchronization entry
                       │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.53%    1.51%       │  0x00007f07a9486fe9: mov    $0x8,%edx
                       │  0x00007f07a9486fee: xor    %ecx,%ecx
  0.03%                │  0x00007f07a9486ff0: xchg   %ax,%ax
                       │  0x00007f07a9486ff3: callq  0x00007f07a9046160  ; OopMap{[0]=Oop [8]=NarrowOop [24]=Oop off=376}
                       │                                                ;*invokestatic hash64
                       │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                       │                                                ;   {static_call}
                       │  0x00007f07a9486ff8: mov    0x8(%rsp),%ebp
  0.74%    1.12%       │  0x00007f07a9486ffc: mov    0x2c(%r12,%rbp,8),%r11d  ;*getfield bitSet
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@39 (line 185)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.02%    0.02%       │  0x00007f07a9487001: mov    0xc(%r12,%r11,8),%r11d  ;*getfield data
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@42 (line 185)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                       │                                                ; implicit exception: dispatches to 0x00007f07a9487269
           0.02%       │  0x00007f07a9487006: mov    0xc(%r12,%r11,8),%r10d  ;*arraylength
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@45 (line 185)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                       │                                                ; implicit exception: dispatches to 0x00007f07a9487279
  0.64%    1.28%       │  0x00007f07a948700b: mov    %eax,%r8d          ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@6 (line 177)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                       │  0x00007f07a948700e: shr    $0x20,%rax
                       │  0x00007f07a9487012: mov    %eax,%r9d          ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@13 (line 178)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                       │  0x00007f07a9487015: mov    %r8d,%ecx
  0.64%    1.47%       │  0x00007f07a9487018: add    %r9d,%ecx          ;*iadd
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@22 (line 180)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                       │  0x00007f07a948701b: mov    %ecx,%edi
                       │  0x00007f07a948701d: not    %edi
                       │  0x00007f07a948701f: test   %ecx,%ecx
  0.64%    1.32%       │  0x00007f07a9487021: cmovl  %edi,%ecx          ;*iload
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@36 (line 185)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                       │  0x00007f07a9487024: test   %r10d,%r10d
                       │  0x00007f07a9487027: je     0x00007f07a94871c5
                       │  0x00007f07a948702d: mov    %ecx,%eax
  0.41%    1.37%       │  0x00007f07a948702f: cmp    $0x80000000,%eax
                     ╭ │  0x00007f07a9487034: jne    0x00007f07a948703e
                     │ │  0x00007f07a9487036: xor    %edx,%edx
                     │ │  0x00007f07a9487038: cmp    $0xffffffffffffffff,%r10d
                     │╭│  0x00007f07a948703c: je     0x00007f07a9487042
                     ↘││  0x00007f07a948703e: cltd   
  0.02%               ││  0x00007f07a948703f: idiv   %r10d              ;*irem
                      ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@46 (line 185)
                      ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                      ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  8.09%   18.83%      ↘│  0x00007f07a9487042: cmp    %r10d,%edx
                       │  0x00007f07a9487045: jae    0x00007f07a94871d9  ;*laload
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@58 (line 186)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.53%    1.21%       │  0x00007f07a948704b: mov    0xc(%r12,%rbp,8),%edi  ;*getfield k
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@70 (line 188)
                       │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                       │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.02%                │  0x00007f07a9487050: cmp    $0x1,%edi
                       ╰  0x00007f07a9487053: jl     0x00007f07a9486ef4  ;*if_icmpgt
                                                                        ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@73 (line 188)
                                                                        ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                        ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                          0x00007f07a9487059: lea    (%r12,%r11,8),%r10
           0.04%          0x00007f07a948705d: mov    0x10(%r10,%rdx,8),%rbx  ;*laload
                                                                        ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@58 (line 186)
                                                                        ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                        ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
 31.87%    4.51%          0x00007f07a9487062: cmp    $0x7ffffffe,%edi
                          0x00007f07a9487068: jg     0x00007f07a948720d  ;*iload
                                                                        ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@76 (line 189)
                                                                        ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                        ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                          0x00007f07a948706e: mov    %edi,%esi
                          0x00007f07a9487070: inc    %esi
  0.03%    0.05%          0x00007f07a9487072: mov    %r9d,%r10d
  0.60%                   0x00007f07a9487075: shl    %r10d              ;*imul
                                                                        ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@82 (line 189)
                                                                        ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                        ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                          0x00007f07a9487078: and    $0x3f,%ecx
                          0x00007f07a948707b: mov    $0x1,%r11d
           0.02%          0x00007f07a9487081: shl    %cl,%r11           ;*lshl
                                                                        ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@109 (line 195)
                                                                        ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                        ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
  0.59%                   0x00007f07a9487084: add    $0xfffffffffffffffe,%edi
                          0x00007f07a9487087: cmp    %edi,%esi
           0.05%          0x00007f07a9487089: mov    $0x80000000,%ecx
  0.57%                   0x00007f07a948708e: cmovl  %ecx,%edi
                          0x00007f07a9487091: cmp    $0x2,%edi
                          0x00007f07a9487094: jle    0x00007f07a948723d
                          0x00007f07a948709a: mov    $0x2,%edx
                          0x00007f07a948709f: nop                       ;*iload
                                                                        ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@76 (line 189)
                                                                        ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                        ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter@14 (line 70)
                          0x00007f07a94870a0: add    %r8d,%r10d
                          0x00007f07a94870a3: mov    %r10d,%ecx
                          0x00007f07a94870a6: mov    %edx,%r14d
....................................................................................................
 66.76%   54.55%  <total for region 1>

....[Hottest Regions]...............................................................................
 66.76%   54.55%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter, version 591 (470 bytes) 
  7.42%   14.79%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 579 (203 bytes) 
  4.06%    8.30%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 579 (77 bytes) 
  3.81%    3.21%           libjvm.so  [unknown] (9 bytes) 
  2.90%    2.90%   [kernel.kallsyms]  native_write_msr_safe (0 bytes) 
  2.78%    6.74%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 579 (56 bytes) 
  2.00%    1.79%           libjvm.so  [unknown] (50 bytes) 
  0.91%            [kernel.kallsyms]  page_fault (0 bytes) 
  0.62%    0.97%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 579 (23 bytes) 
  0.55%    0.04%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter, version 591 (5 bytes) 
  0.36%    0.28%           libjvm.so  [unknown] (134 bytes) 
  0.26%    0.09%   [kernel.kallsyms]  do_numa_page (31 bytes) 
  0.19%    0.04%   [kernel.kallsyms]  _raw_spin_lock_irqsave (35 bytes) 
  0.17%    0.02%           libjvm.so  [unknown] (54 bytes) 
  0.16%    0.04%   [kernel.kallsyms]  change_protection_range (3 bytes) 
  0.12%    0.16%   [kernel.kallsyms]  _raw_spin_lock (40 bytes) 
  0.12%            [kernel.kallsyms]  apic_timer_interrupt (0 bytes) 
  0.12%                    libjvm.so  [unknown] (14 bytes) 
  0.10%    0.19%           libjvm.so  [unknown] (80 bytes) 
  0.09%    0.02%   [kernel.kallsyms]  numa_migrate_prep (0 bytes) 
  6.47%    5.90%  <...other 423 warm regions...>
....................................................................................................
 99.98%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 67.32%   54.61%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20KBloom1Filter, version 591 
 14.87%   30.79%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 579 
  8.09%    7.26%           libjvm.so  [unknown] 
  2.90%    2.90%   [kernel.kallsyms]  native_write_msr_safe 
  0.91%            [kernel.kallsyms]  page_fault 
  0.29%    0.14%   [kernel.kallsyms]  do_numa_page 
  0.21%    0.14%   [kernel.kallsyms]  handle_mm_fault 
  0.19%    0.04%   [kernel.kallsyms]  _raw_spin_lock_irqsave 
  0.17%    0.07%   [kernel.kallsyms]  change_protection_range 
  0.16%    0.12%        libc-2.17.so  __memcpy_ssse3_back 
  0.16%    0.07%      hsdis-amd64.so  print_insn 
  0.14%    0.09%   [kernel.kallsyms]  pipe_write 
  0.12%            [kernel.kallsyms]  apic_timer_interrupt 
  0.12%    0.16%   [kernel.kallsyms]  _raw_spin_lock 
  0.10%    0.04%        libc-2.17.so  _IO_fwrite 
  0.10%    0.04%   [kernel.kallsyms]  __sb_start_write 
  0.09%    0.02%   [kernel.kallsyms]  __audit_syscall_entry 
  0.09%    0.02%   [kernel.kallsyms]  mutex_lock 
  0.09%    0.05%   [kernel.kallsyms]  mutex_unlock 
  0.09%    0.09%   [kernel.kallsyms]  __mem_cgroup_count_vm_event 
  3.78%    2.09%  <...other 140 warm methods...>
....................................................................................................
 99.98%   98.72%  <totals>

....[Distribution by Source]........................................................................
 82.19%   85.40%         C2, level 4
  8.20%    5.81%   [kernel.kallsyms]
  8.09%    7.30%           libjvm.so
  0.66%    0.82%        libc-2.17.so
  0.22%    0.16%      hsdis-amd64.so
  0.19%    0.23%              [ext4]
  0.17%    0.12%  libpthread-2.17.so
  0.12%                  interpreter
  0.10%    0.14%              [jbd2]
  0.03%                  C1, level 3
....................................................................................................
 99.98%  100.00%  <totals>



# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe20MBloom1Filter
# Parameters: (size = 10000)

# Run progress: 66.67% complete, ETA 00:00:40
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 69.987 ns/op
# Warmup Iteration   2: 35.242 ns/op
# Warmup Iteration   3: 33.041 ns/op
# Warmup Iteration   4: 45.355 ns/op
# Warmup Iteration   5: 32.575 ns/op
Iteration   1: 33.190 ns/op
Iteration   2: 32.811 ns/op
Iteration   3: 42.553 ns/op
Iteration   4: 32.646 ns/op
Iteration   5: 32.602 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe20MBloom1Filter":
  34.760 ±(99.9%) 16.799 ns/op [Average]
  (min, avg, max) = (32.602, 34.760, 42.553), stdev = 4.363
  CI (99.9%): [17.961, 51.559] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe20MBloom1Filter:·asm":
PrintAssembly processed: 189132 total address lines.
Perf output processed (skipped 13.721 seconds):
 Column 1: cycles (7372 events)
 Column 2: instructions (7382 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter, version 617 (341 bytes) 

                                                                       ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@-1 (line 77)
                         0x00007f23e149cfec: mov    %rsi,(%rsp)
                         0x00007f23e149cff0: mov    $0x1312d00,%ebp
                  ╭      0x00007f23e149cff5: jmp    0x00007f23e149d00b
                  │      0x00007f23e149cff7: nopw   0x0(%rax,%rax,1)   ;*lload
                  │                                                    ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@119 (line 198)
                  │                                                    ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  │                                                    ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                  │  ↗↗  0x00007f23e149d000: dec    %ebp               ;*iinc
                  │  ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@17 (line 77)
  1.14%    0.01%  │  ││  0x00007f23e149d002: cmp    $0xffffffffffffffff,%ebp
                  │  ││  0x00007f23e149d005: jle    0x00007f23e149d1ca  ;*aload_0
                  │  ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@7 (line 78)
  0.01%           ↘  ││  0x00007f23e149d00b: mov    (%rsp),%r11
  0.01%    0.03%     ││  0x00007f23e149d00f: mov    0x10(%r11),%r8d    ;*getfield bf
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@8 (line 78)
                     ││  0x00007f23e149d013: movslq %ebp,%r9           ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@12 (line 78)
  1.36%    0.01%     ││  0x00007f23e149d016: test   %r8d,%r8d
                     ││  0x00007f23e149d019: je     0x00007f23e149d1d6  ;*invokevirtual testLong
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                     ││  0x00007f23e149d01f: mov    0x60(%r15),%rax
  0.01%    0.01%     ││  0x00007f23e149d023: mov    %rax,%r10
           0.01%     ││  0x00007f23e149d026: add    $0x18,%r10
  1.42%    0.04%     ││  0x00007f23e149d02a: lea    (%r12,%r8,8),%rcx  ;*getfield bf
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@8 (line 78)
                     ││  0x00007f23e149d02e: cmp    0x70(%r15),%r10
                     ││  0x00007f23e149d032: jae    0x00007f23e149d19d
  0.01%    0.01%     ││  0x00007f23e149d038: mov    %r10,0x60(%r15)
  0.01%              ││  0x00007f23e149d03c: prefetchnta 0xc0(%r10)
  2.02%    0.28%     ││  0x00007f23e149d044: movq   $0x1,(%rax)
  0.03%              ││  0x00007f23e149d04b: prefetchnta 0x100(%r10)
  0.71%    0.11%     ││  0x00007f23e149d053: movl   $0x768,0x8(%rax)   ;   {metadata({type array byte})}
  0.04%              ││  0x00007f23e149d05a: prefetchnta 0x140(%r10)
  1.76%    0.15%     ││  0x00007f23e149d062: movl   $0x8,0xc(%rax)
                     ││  0x00007f23e149d069: prefetchnta 0x180(%r10)
  0.65%    0.08%     ││  0x00007f23e149d071: movl   $0x0,0x10(%rax)
  0.03%              ││  0x00007f23e149d078: movl   $0x0,0x14(%rax)
  1.49%              ││  0x00007f23e149d07f: mov    %r8d,0x8(%rsp)
                     ││  0x00007f23e149d084: mov    %rcx,0x18(%rsp)    ;*newarray
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@2 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.01%    0.01%     ││  0x00007f23e149d089: mov    %bpl,0x10(%rax)    ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@11 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.01%              ││  0x00007f23e149d08d: mov    %ebp,0xc(%rsp)
  1.18%    0.01%     ││  0x00007f23e149d091: mov    %r9,%r10
                     ││  0x00007f23e149d094: sar    $0x30,%r10
  0.01%              ││  0x00007f23e149d098: mov    %r9,%r11
                     ││  0x00007f23e149d09b: sar    $0x28,%r11
  1.29%              ││  0x00007f23e149d09f: mov    %r10d,%r10d
                     ││  0x00007f23e149d0a2: mov    %r11d,%r8d
           0.01%     ││  0x00007f23e149d0a5: mov    %r9,%r11
                     ││  0x00007f23e149d0a8: sar    $0x20,%r11
  1.33%    0.01%     ││  0x00007f23e149d0ac: mov    %r9,%rcx
                     ││  0x00007f23e149d0af: sar    $0x18,%rcx
                     ││  0x00007f23e149d0b3: mov    %r11d,%r11d
  0.01%              ││  0x00007f23e149d0b6: mov    %ecx,%ecx
  1.19%              ││  0x00007f23e149d0b8: mov    %r9,%rdx
                     ││  0x00007f23e149d0bb: sar    $0x10,%r9
                     ││  0x00007f23e149d0bf: mov    %rdx,%rbx
  0.01%              ││  0x00007f23e149d0c2: sar    $0x8,%rbx
  1.19%              ││  0x00007f23e149d0c6: mov    %r9d,%r9d
                     ││  0x00007f23e149d0c9: mov    %ebx,%edi
                     ││  0x00007f23e149d0cb: mov    %dil,0x11(%rax)    ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@20 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                     ││  0x00007f23e149d0cf: mov    %r9b,0x12(%rax)    ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@29 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  1.11%              ││  0x00007f23e149d0d3: mov    %cl,0x13(%rax)     ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@38 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                     ││  0x00007f23e149d0d6: mov    %r11b,0x14(%rax)   ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@47 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.03%              ││  0x00007f23e149d0da: mov    %r8b,0x15(%rax)    ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@56 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.05%              ││  0x00007f23e149d0de: mov    %r10b,0x16(%rax)   ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@66 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  1.32%              ││  0x00007f23e149d0e2: sar    $0x38,%rdx
  0.04%              ││  0x00007f23e149d0e6: mov    %edx,%r11d
  0.01%              ││  0x00007f23e149d0e9: mov    %r11b,0x17(%rax)
  0.09%    0.01%     ││  0x00007f23e149d0ed: mov    %rax,%rsi          ;*synchronization entry
                     ││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  1.42%              ││  0x00007f23e149d0f0: mov    $0x8,%edx
                     ││  0x00007f23e149d0f5: xor    %ecx,%ecx
                     ││  0x00007f23e149d0f7: callq  0x00007f23e1046160  ; OopMap{[0]=Oop [8]=NarrowOop [24]=Oop off=316}
                     ││                                                ;*invokestatic hash64
                     ││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                     ││                                                ;   {static_call}
  1.34%    2.11%     ││  0x00007f23e149d0fc: mov    0x8(%rsp),%r11d
           0.03%     ││  0x00007f23e149d101: mov    0x2c(%r12,%r11,8),%r10d  ;*getfield bitSet
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@39 (line 185)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.04%              ││  0x00007f23e149d106: mov    0xc(%r12,%r10,8),%r8d  ;*getfield data
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@42 (line 185)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                     ││                                                ; implicit exception: dispatches to 0x00007f23e149d245
  1.38%    1.84%     ││  0x00007f23e149d10b: mov    0xc(%r12,%r8,8),%ebx  ;*arraylength
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@45 (line 185)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                     ││                                                ; implicit exception: dispatches to 0x00007f23e149d255
  0.49%    0.50%     ││  0x00007f23e149d110: mov    %eax,%ecx          ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@6 (line 177)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.04%    0.04%     ││  0x00007f23e149d112: shr    $0x20,%rax
           0.01%     ││  0x00007f23e149d116: mov    %eax,%r10d         ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@13 (line 178)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  1.09%    1.73%     ││  0x00007f23e149d119: mov    %ecx,%eax
  0.38%    0.39%     ││  0x00007f23e149d11b: add    %r10d,%eax         ;*iadd
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@22 (line 180)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
           0.03%     ││  0x00007f23e149d11e: mov    %eax,%edi
  0.03%              ││  0x00007f23e149d120: not    %edi
  0.96%    1.50%     ││  0x00007f23e149d122: test   %eax,%eax
  0.24%    0.39%     ││  0x00007f23e149d124: cmovl  %edi,%eax          ;*iload
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@36 (line 185)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.04%    0.03%     ││  0x00007f23e149d127: test   %ebx,%ebx
                     ││  0x00007f23e149d129: je     0x00007f23e149d1e9
  1.10%    1.50%     ││  0x00007f23e149d12f: cmp    $0x80000000,%eax
                   ╭ ││  0x00007f23e149d134: jne    0x00007f23e149d13d
                   │ ││  0x00007f23e149d136: xor    %edx,%edx
                   │ ││  0x00007f23e149d138: cmp    $0xffffffffffffffff,%ebx
                   │╭││  0x00007f23e149d13b: je     0x00007f23e149d140
  0.23%    0.38%   ↘│││  0x00007f23e149d13d: cltd   
  0.09%    0.11%    │││  0x00007f23e149d13e: idiv   %ebx               ;*irem
                    │││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@46 (line 185)
                    │││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
 28.32%   34.46%    ↘││  0x00007f23e149d140: cmp    %ebx,%edx
                     ││  0x00007f23e149d142: jae    0x00007f23e149d1fd  ;*laload
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@58 (line 186)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  1.52%    0.03%     ││  0x00007f23e149d148: mov    0xc(%r12,%r11,8),%r9d  ;*getfield k
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@70 (line 188)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                     ││  0x00007f23e149d14d: cmp    $0x1,%r9d
                     ╰│  0x00007f23e149d151: jl     0x00007f23e149d000  ;*if_icmpgt
                      │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@73 (line 188)
                      │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                      │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.01%    0.01%      │  0x00007f23e149d157: cmp    $0x7ffffffe,%r9d
                      ╰  0x00007f23e149d15e: jle    0x00007f23e149d000  ;*iload
                                                                       ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@76 (line 189)
                                                                       ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                       ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                         0x00007f23e149d164: shl    $0x3,%r8
                         0x00007f23e149d168: mov    0x10(%r8,%rdx,8),%rbp  ;*laload
                                                                       ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@58 (line 186)
....................................................................................................
 58.37%   45.94%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 585 (300 bytes) 

                     Decoding compiled method 0x00007f23e148cdd0:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007f23d8d47f50} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  1.47%    0.42%       0x00007f23e148cf60: mov    %eax,-0x14000(%rsp)
  0.20%    0.08%       0x00007f23e148cf67: push   %rbp
  0.03%                0x00007f23e148cf68: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  1.32%    3.66%       0x00007f23e148cf6c: mov    %edx,0x8(%rsp)
  0.03%                0x00007f23e148cf70: mov    %edx,%ebx
                       0x00007f23e148cf72: sar    $0x3,%ebx          ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  1.30%    2.09%       0x00007f23e148cf75: movslq %ecx,%r14          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
                       0x00007f23e148cf78: mov    $0x87c37b91114253d5,%rdi
           0.01%       0x00007f23e148cf82: test   %ebx,%ebx
                  ╭    0x00007f23e148cf84: jle    0x00007f23e148d06c  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │    0x00007f23e148cf8a: mov    0xc(%rsi),%r10d    ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007f23e148d3d1
  1.53%    2.30%  │    0x00007f23e148cf8e: xor    %r9d,%r9d
  0.01%           │    0x00007f23e148cf91: xor    %r8d,%r8d
  0.03%           │    0x00007f23e148cf94: nopl   0x0(%rax,%rax,1)
                  │    0x00007f23e148cf9c: xchg   %ax,%ax            ;*iload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  1.34%    2.36%  │ ↗  0x00007f23e148cfa0: cmp    %r10d,%r9d
                  │ │  0x00007f23e148cfa3: jae    0x00007f23e148d21e  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │ │  0x00007f23e148cfa9: movzbq 0x10(%rsi,%r9,1),%rcx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.03%    0.01%  │ │  0x00007f23e148cfaf: mov    %r9d,%r11d
                  │ │  0x00007f23e148cfb2: add    $0x7,%r11d
  1.11%    1.99%  │ │  0x00007f23e148cfb6: cmp    %r10d,%r11d
                  │ │  0x00007f23e148cfb9: jae    0x00007f23e148d251  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
                  │ │  0x00007f23e148cfbf: mov    %rcx,(%rsp)
  0.03%           │ │  0x00007f23e148cfc3: movslq %r9d,%r11          ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
                  │ │  0x00007f23e148cfc6: movzbq 0x11(%rsi,%r11,1),%r9
  1.42%    1.99%  │ │  0x00007f23e148cfcc: movzbq 0x17(%rsi,%r11,1),%rcx
                  │ │  0x00007f23e148cfd2: movzbq 0x12(%rsi,%r11,1),%rdx
  0.01%    0.04%  │ │  0x00007f23e148cfd8: movzbq 0x13(%rsi,%r11,1),%rax
                  │ │  0x00007f23e148cfde: movzbq 0x14(%rsi,%r11,1),%rbp
  1.33%    1.99%  │ │  0x00007f23e148cfe4: movzbq 0x15(%rsi,%r11,1),%r13
  0.03%           │ │  0x00007f23e148cfea: movzbq 0x16(%rsi,%r11,1),%r11
           0.01%  │ │  0x00007f23e148cff0: shl    $0x8,%r9
                  │ │  0x00007f23e148cff4: or     (%rsp),%r9
  1.51%    1.84%  │ │  0x00007f23e148cff8: shl    $0x30,%r11
                  │ │  0x00007f23e148cffc: shl    $0x28,%r13
  0.04%    0.01%  │ │  0x00007f23e148d000: shl    $0x20,%rbp
                  │ │  0x00007f23e148d004: shl    $0x18,%rax
  1.26%    1.87%  │ │  0x00007f23e148d008: shl    $0x10,%rdx
                  │ │  0x00007f23e148d00c: or     %rdx,%r9
  0.01%           │ │  0x00007f23e148d00f: or     %rax,%r9
           0.01%  │ │  0x00007f23e148d012: or     %rbp,%r9
  1.49%    2.25%  │ │  0x00007f23e148d015: or     %r13,%r9
  0.03%    0.01%  │ │  0x00007f23e148d018: or     %r11,%r9
  0.01%    0.04%  │ │  0x00007f23e148d01b: shl    $0x38,%rcx
  0.01%           │ │  0x00007f23e148d01f: or     %rcx,%r9
  1.28%    1.99%  │ │  0x00007f23e148d022: imul   %rdi,%r9           ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.05%    0.01%  │ │  0x00007f23e148d026: rol    $0x1f,%r9
  0.05%    0.01%  │ │  0x00007f23e148d02a: mov    $0x4cf5ad432745937f,%r11
                  │ │  0x00007f23e148d034: imul   %r11,%r9
  1.48%    1.71%  │ │  0x00007f23e148d038: xor    %r14,%r9           ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.01%    0.04%  │ │  0x00007f23e148d03b: rol    $0x1b,%r9          ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
           0.08%  │ │  0x00007f23e148d03f: mov    %r9,%r14
                  │ │  0x00007f23e148d042: shl    $0x2,%r14
  1.34%    2.17%  │ │  0x00007f23e148d046: add    %r9,%r14
  0.01%    0.05%  │ │  0x00007f23e148d049: add    $0x52dce729,%r14   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.05%    0.05%  │ │  0x00007f23e148d050: mov    %r8d,%ecx
           0.01%  │ │  0x00007f23e148d053: inc    %ecx               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
  1.17%    1.82%  │ │  0x00007f23e148d055: cmp    %ebx,%ecx
                  │╭│  0x00007f23e148d057: jge    0x00007f23e148d06c  ;*if_icmpge
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │││  0x00007f23e148d059: shl    $0x3,%r8d
                  │││  0x00007f23e148d05d: mov    %r8d,%r9d
                  │││  0x00007f23e148d060: add    $0x8,%r9d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007f23e148d064: mov    %ecx,%r8d
                  ││╰  0x00007f23e148d067: jmpq   0x00007f23e148cfa0  ;*if_icmpge
                  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  ↘↘   0x00007f23e148d06c: mov    0x8(%rsp),%r8d
  0.03%    0.03%       0x00007f23e148d071: and    $0xfffffffffffffff8,%r8d  ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
                       0x00007f23e148d075: mov    0x8(%rsp),%r10d
  1.41%    1.54%       0x00007f23e148d07a: sub    %r8d,%r10d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
                       0x00007f23e148d07d: movslq %r8d,%r9           ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.01%    0.07%       0x00007f23e148d080: xor    %ecx,%ecx
                       0x00007f23e148d082: cmp    $0x4,%r10d
                       0x00007f23e148d086: je     0x00007f23e148d12d
  1.47%    1.30%       0x00007f23e148d08c: cmp    $0x4,%r10d
                       0x00007f23e148d090: jle    0x00007f23e148d0ad
                       0x00007f23e148d092: cmp    $0x7,%r10d
                       0x00007f23e148d096: je     0x00007f23e148d0d0
                       0x00007f23e148d098: cmp    $0x7,%r10d
                       0x00007f23e148d09c: jg     0x00007f23e148d1d0
                       0x00007f23e148d0a2: cmp    $0x6,%r10d
                       0x00007f23e148d0a6: je     0x00007f23e148d0ed
                       0x00007f23e148d0a8: xor    %r11d,%r11d
                       0x00007f23e148d0ab: jmp    0x00007f23e148d10d
                       0x00007f23e148d0ad: cmp    $0x2,%r10d
....................................................................................................
 23.96%   33.89%  <total for region 2>

....[Hottest Regions]...............................................................................
 58.37%   45.94%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter, version 617 (341 bytes) 
 23.96%   33.89%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 585 (300 bytes) 
  6.02%   10.53%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 585 (72 bytes) 
  1.90%    1.83%   [kernel.kallsyms]  native_write_msr_safe (3 bytes) 
  1.48%    1.33%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 585 (20 bytes) 
  0.88%    0.54%           libjvm.so  JVM_DoPrivileged (9 bytes) 
  0.42%    0.03%   [kernel.kallsyms]  mem_cgroup_page_lruvec (8 bytes) 
  0.41%            [kernel.kallsyms]  page_fault (0 bytes) 
  0.38%    0.01%   [kernel.kallsyms]  __list_del_entry (39 bytes) 
  0.28%    0.51%           libjvm.so  JVM_DoPrivileged (9 bytes) 
  0.22%    0.23%   [kernel.kallsyms]  get_page_from_freelist (271 bytes) 
  0.22%    0.01%   [kernel.kallsyms]  mutex_unlock (3 bytes) 
  0.12%    0.01%   [kernel.kallsyms]  change_protection_range (0 bytes) 
  0.12%            [kernel.kallsyms]  apic_timer_interrupt (0 bytes) 
  0.09%    0.08%   [kernel.kallsyms]  __srcu_read_lock (77 bytes) 
  0.09%    0.05%   [kernel.kallsyms]  next_zones_zonelist (66 bytes) 
  0.09%    0.03%   [kernel.kallsyms]  __sb_end_write (57 bytes) 
  0.09%    0.07%   [kernel.kallsyms]  _raw_spin_lock_irqsave (26 bytes) 
  0.08%            [kernel.kallsyms]  isolate_lru_page (10 bytes) 
  0.08%    0.04%   [kernel.kallsyms]  mutex_lock (0 bytes) 
  4.67%    4.86%  <...other 388 warm regions...>
....................................................................................................
 99.99%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 58.37%   45.94%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter, version 617 
 31.46%   45.75%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 585 
  1.90%    1.83%   [kernel.kallsyms]  native_write_msr_safe 
  1.72%    2.10%           libjvm.so  JVM_DoPrivileged 
  0.42%    0.05%   [kernel.kallsyms]  mem_cgroup_page_lruvec 
  0.41%            [kernel.kallsyms]  page_fault 
  0.38%    0.01%   [kernel.kallsyms]  __list_del_entry 
  0.35%    0.39%   [kernel.kallsyms]  get_page_from_freelist 
  0.28%    0.27%           libjvm.so  [unknown] 
  0.22%    0.01%   [kernel.kallsyms]  mutex_unlock 
  0.14%    0.03%   [kernel.kallsyms]  change_protection_range 
  0.12%            [kernel.kallsyms]  apic_timer_interrupt 
  0.11%    0.14%   [kernel.kallsyms]  __alloc_pages_nodemask 
  0.09%    0.03%   [kernel.kallsyms]  isolate_lru_page 
  0.09%    0.08%   [kernel.kallsyms]  __srcu_read_lock 
  0.09%    0.09%        libc-2.17.so  vfprintf 
  0.09%    0.07%   [kernel.kallsyms]  _raw_spin_lock_irqsave 
  0.09%    0.05%   [kernel.kallsyms]  next_zones_zonelist 
  0.09%    0.03%   [kernel.kallsyms]  __sb_end_write 
  0.08%    0.04%   [kernel.kallsyms]  mutex_lock 
  3.46%    2.51%  <...other 143 warm methods...>
....................................................................................................
 99.99%   99.42%  <totals>

....[Distribution by Source]........................................................................
 89.83%   91.68%         C2, level 4
  6.90%    4.81%   [kernel.kallsyms]
  2.02%    2.40%           libjvm.so
  0.61%    0.58%        libc-2.17.so
  0.20%    0.11%  libpthread-2.17.so
  0.16%    0.09%      hsdis-amd64.so
  0.15%    0.12%              [jbd2]
  0.08%    0.19%              [ext4]
  0.03%                  interpreter
....................................................................................................
 99.99%  100.00%  <totals>



# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe20MBloom1Filter
# Parameters: (size = 10000000)

# Run progress: 83.33% complete, ETA 00:00:21
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 54.539 ns/op
# Warmup Iteration   2: 33.908 ns/op
# Warmup Iteration   3: 35.243 ns/op
# Warmup Iteration   4: 54.536 ns/op
# Warmup Iteration   5: 35.043 ns/op
Iteration   1: 35.409 ns/op
Iteration   2: 65.162 ns/op
Iteration   3: 45.450 ns/op
Iteration   4: 39.768 ns/op
Iteration   5: 32.555 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe20MBloom1Filter":
  43.669 ±(99.9%) 49.914 ns/op [Average]
  (min, avg, max) = (32.555, 43.669, 65.162), stdev = 12.963
  CI (99.9%): [≈ 0, 93.583] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe20MBloom1Filter:·asm":
PrintAssembly processed: 189244 total address lines.
Perf output processed (skipped 14.139 seconds):
 Column 1: cycles (7894 events)
 Column 2: instructions (7892 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter, version 620 (341 bytes) 

                                                                       ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@-1 (line 77)
                         0x00007ff48d49a26c: mov    %rsi,(%rsp)
                         0x00007ff48d49a270: mov    $0x1312d00,%ebp
                  ╭      0x00007ff48d49a275: jmp    0x00007ff48d49a28b
                  │      0x00007ff48d49a277: nopw   0x0(%rax,%rax,1)   ;*lload
                  │                                                    ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@119 (line 198)
                  │                                                    ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  │                                                    ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                  │  ↗↗  0x00007ff48d49a280: dec    %ebp               ;*iinc
                  │  ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@17 (line 77)
  1.17%    0.01%  │  ││  0x00007ff48d49a282: cmp    $0xffffffffffffffff,%ebp
                  │  ││  0x00007ff48d49a285: jle    0x00007ff48d49a44a  ;*aload_0
                  │  ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@7 (line 78)
  0.04%    0.04%  ↘  ││  0x00007ff48d49a28b: mov    (%rsp),%r11
  0.04%    0.03%     ││  0x00007ff48d49a28f: mov    0x10(%r11),%r8d    ;*getfield bf
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@8 (line 78)
                     ││  0x00007ff48d49a293: movslq %ebp,%r9           ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@12 (line 78)
  1.06%    0.01%     ││  0x00007ff48d49a296: test   %r8d,%r8d
                     ││  0x00007ff48d49a299: je     0x00007ff48d49a456  ;*invokevirtual testLong
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
           0.05%     ││  0x00007ff48d49a29f: mov    0x60(%r15),%rax
           0.03%     ││  0x00007ff48d49a2a3: mov    %rax,%r10
                     ││  0x00007ff48d49a2a6: add    $0x18,%r10
  1.18%              ││  0x00007ff48d49a2aa: lea    (%r12,%r8,8),%rcx  ;*getfield bf
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@8 (line 78)
  0.03%    0.16%     ││  0x00007ff48d49a2ae: cmp    0x70(%r15),%r10
                     ││  0x00007ff48d49a2b2: jae    0x00007ff48d49a41d
  0.01%    0.01%     ││  0x00007ff48d49a2b8: mov    %r10,0x60(%r15)
  0.01%              ││  0x00007ff48d49a2bc: prefetchnta 0xc0(%r10)
  3.36%    1.00%     ││  0x00007ff48d49a2c4: movq   $0x1,(%rax)
  0.05%    0.04%     ││  0x00007ff48d49a2cb: prefetchnta 0x100(%r10)
  2.52%    0.22%     ││  0x00007ff48d49a2d3: movl   $0x768,0x8(%rax)   ;   {metadata({type array byte})}
  0.09%              ││  0x00007ff48d49a2da: prefetchnta 0x140(%r10)
  3.01%    0.20%     ││  0x00007ff48d49a2e2: movl   $0x8,0xc(%rax)
           0.01%     ││  0x00007ff48d49a2e9: prefetchnta 0x180(%r10)
  2.65%    0.24%     ││  0x00007ff48d49a2f1: movl   $0x0,0x10(%rax)
  0.03%              ││  0x00007ff48d49a2f8: movl   $0x0,0x14(%rax)
  1.19%              ││  0x00007ff48d49a2ff: mov    %r8d,0x8(%rsp)
                     ││  0x00007ff48d49a304: mov    %rcx,0x18(%rsp)    ;*newarray
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@2 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.03%              ││  0x00007ff48d49a309: mov    %bpl,0x10(%rax)    ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@11 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                     ││  0x00007ff48d49a30d: mov    %ebp,0xc(%rsp)
  1.03%              ││  0x00007ff48d49a311: mov    %r9,%r10
                     ││  0x00007ff48d49a314: sar    $0x30,%r10
  0.01%    0.01%     ││  0x00007ff48d49a318: mov    %r9,%r11
                     ││  0x00007ff48d49a31b: sar    $0x28,%r11
  1.01%              ││  0x00007ff48d49a31f: mov    %r10d,%r10d
                     ││  0x00007ff48d49a322: mov    %r11d,%r8d
  0.04%              ││  0x00007ff48d49a325: mov    %r9,%r11
  0.01%              ││  0x00007ff48d49a328: sar    $0x20,%r11
  1.04%              ││  0x00007ff48d49a32c: mov    %r9,%rcx
                     ││  0x00007ff48d49a32f: sar    $0x18,%rcx
  0.04%              ││  0x00007ff48d49a333: mov    %r11d,%r11d
                     ││  0x00007ff48d49a336: mov    %ecx,%ecx
  0.94%              ││  0x00007ff48d49a338: mov    %r9,%rdx
                     ││  0x00007ff48d49a33b: sar    $0x10,%r9
  0.05%              ││  0x00007ff48d49a33f: mov    %rdx,%rbx
                     ││  0x00007ff48d49a342: sar    $0x8,%rbx
  1.04%              ││  0x00007ff48d49a346: mov    %r9d,%r9d
                     ││  0x00007ff48d49a349: mov    %ebx,%edi
  0.03%              ││  0x00007ff48d49a34b: mov    %dil,0x11(%rax)    ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@20 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
           0.01%     ││  0x00007ff48d49a34f: mov    %r9b,0x12(%rax)    ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@29 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  1.10%    0.01%     ││  0x00007ff48d49a353: mov    %cl,0x13(%rax)     ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@38 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                     ││  0x00007ff48d49a356: mov    %r11b,0x14(%rax)   ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@47 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.16%              ││  0x00007ff48d49a35a: mov    %r8b,0x15(%rax)    ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@56 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.08%    0.01%     ││  0x00007ff48d49a35e: mov    %r10b,0x16(%rax)   ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@66 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  1.05%              ││  0x00007ff48d49a362: sar    $0x38,%rdx
                     ││  0x00007ff48d49a366: mov    %edx,%r11d
  0.08%              ││  0x00007ff48d49a369: mov    %r11b,0x17(%rax)
  0.10%              ││  0x00007ff48d49a36d: mov    %rax,%rsi          ;*synchronization entry
                     ││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  1.00%              ││  0x00007ff48d49a370: mov    $0x8,%edx
                     ││  0x00007ff48d49a375: xor    %ecx,%ecx
                     ││  0x00007ff48d49a377: callq  0x00007ff48d046160  ; OopMap{[0]=Oop [8]=NarrowOop [24]=Oop off=316}
                     ││                                                ;*invokestatic hash64
                     ││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                     ││                                                ;   {static_call}
  1.13%    1.82%     ││  0x00007ff48d49a37c: mov    0x8(%rsp),%r11d
  0.04%    0.05%     ││  0x00007ff48d49a381: mov    0x2c(%r12,%r11,8),%r10d  ;*getfield bitSet
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@39 (line 185)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
           0.01%     ││  0x00007ff48d49a386: mov    0xc(%r12,%r10,8),%r8d  ;*getfield data
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@42 (line 185)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                     ││                                                ; implicit exception: dispatches to 0x00007ff48d49a4c5
  1.06%    1.62%     ││  0x00007ff48d49a38b: mov    0xc(%r12,%r8,8),%ebx  ;*arraylength
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@45 (line 185)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                     ││                                                ; implicit exception: dispatches to 0x00007ff48d49a4d5
  0.32%    0.61%     ││  0x00007ff48d49a390: mov    %eax,%ecx          ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@6 (line 177)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.06%    0.10%     ││  0x00007ff48d49a392: shr    $0x20,%rax
  0.01%    0.01%     ││  0x00007ff48d49a396: mov    %eax,%r10d         ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@13 (line 178)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.81%    1.29%     ││  0x00007ff48d49a399: mov    %ecx,%eax
  0.54%    0.72%     ││  0x00007ff48d49a39b: add    %r10d,%eax         ;*iadd
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@22 (line 180)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.10%    0.14%     ││  0x00007ff48d49a39e: mov    %eax,%edi
           0.03%     ││  0x00007ff48d49a3a0: not    %edi
  0.73%    1.14%     ││  0x00007ff48d49a3a2: test   %eax,%eax
  0.29%    0.46%     ││  0x00007ff48d49a3a4: cmovl  %edi,%eax          ;*iload
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@36 (line 185)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.03%    0.15%     ││  0x00007ff48d49a3a7: test   %ebx,%ebx
                     ││  0x00007ff48d49a3a9: je     0x00007ff48d49a469
  0.67%    1.23%     ││  0x00007ff48d49a3af: cmp    $0x80000000,%eax
                   ╭ ││  0x00007ff48d49a3b4: jne    0x00007ff48d49a3bd
                   │ ││  0x00007ff48d49a3b6: xor    %edx,%edx
                   │ ││  0x00007ff48d49a3b8: cmp    $0xffffffffffffffff,%ebx
                   │╭││  0x00007ff48d49a3bb: je     0x00007ff48d49a3c0
  0.29%    0.68%   ↘│││  0x00007ff48d49a3bd: cltd   
  0.11%    0.15%    │││  0x00007ff48d49a3be: idiv   %ebx               ;*irem
                    │││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@46 (line 185)
                    │││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
 22.54%   31.15%    ↘││  0x00007ff48d49a3c0: cmp    %ebx,%edx
                     ││  0x00007ff48d49a3c2: jae    0x00007ff48d49a47d  ;*laload
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@58 (line 186)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.89%              ││  0x00007ff48d49a3c8: mov    0xc(%r12,%r11,8),%r9d  ;*getfield k
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@70 (line 188)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.04%    0.10%     ││  0x00007ff48d49a3cd: cmp    $0x1,%r9d
                     ╰│  0x00007ff48d49a3d1: jl     0x00007ff48d49a280  ;*if_icmpgt
                      │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@73 (line 188)
                      │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                      │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
  0.01%    0.01%      │  0x00007ff48d49a3d7: cmp    $0x7ffffffe,%r9d
                      ╰  0x00007ff48d49a3de: jle    0x00007ff48d49a280  ;*iload
                                                                       ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@76 (line 189)
                                                                       ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                       ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter@13 (line 78)
                         0x00007ff48d49a3e4: shl    $0x3,%r8
                         0x00007ff48d49a3e8: mov    0x10(%r8,%rdx,8),%rbp  ;*laload
                                                                       ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@58 (line 186)
....................................................................................................
 54.94%   43.59%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 581 (300 bytes) 

                     Decoding compiled method 0x00007ff48d486b10:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007ff4a09f3f50} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  1.22%    0.53%       0x00007ff48d486ca0: mov    %eax,-0x14000(%rsp)
  0.18%    0.04%       0x00007ff48d486ca7: push   %rbp
  0.05%    0.03%       0x00007ff48d486ca8: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  1.25%    3.65%       0x00007ff48d486cac: mov    %edx,0x8(%rsp)
  0.08%    0.03%       0x00007ff48d486cb0: mov    %edx,%ebx
                       0x00007ff48d486cb2: sar    $0x3,%ebx          ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  1.44%    2.51%       0x00007ff48d486cb5: movslq %ecx,%r14          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
                       0x00007ff48d486cb8: mov    $0x87c37b91114253d5,%rdi
  0.09%    0.03%       0x00007ff48d486cc2: test   %ebx,%ebx
                  ╭    0x00007ff48d486cc4: jle    0x00007ff48d486dac  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.03%           │    0x00007ff48d486cca: mov    0xc(%rsi),%r10d    ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007ff48d487111
  1.08%    2.52%  │    0x00007ff48d486cce: xor    %r9d,%r9d
                  │    0x00007ff48d486cd1: xor    %r8d,%r8d
           0.03%  │    0x00007ff48d486cd4: nopl   0x0(%rax,%rax,1)
                  │    0x00007ff48d486cdc: xchg   %ax,%ax            ;*iload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  1.27%    2.12%  │ ↗  0x00007ff48d486ce0: cmp    %r10d,%r9d
                  │ │  0x00007ff48d486ce3: jae    0x00007ff48d486f5e  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │ │  0x00007ff48d486ce9: movzbq 0x10(%rsi,%r9,1),%rcx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.03%           │ │  0x00007ff48d486cef: mov    %r9d,%r11d
           0.03%  │ │  0x00007ff48d486cf2: add    $0x7,%r11d
  1.13%    1.66%  │ │  0x00007ff48d486cf6: cmp    %r10d,%r11d
                  │ │  0x00007ff48d486cf9: jae    0x00007ff48d486f91  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
                  │ │  0x00007ff48d486cff: mov    %rcx,(%rsp)
  0.08%           │ │  0x00007ff48d486d03: movslq %r9d,%r11          ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
                  │ │  0x00007ff48d486d06: movzbq 0x11(%rsi,%r11,1),%r9
  1.03%    1.88%  │ │  0x00007ff48d486d0c: movzbq 0x17(%rsi,%r11,1),%rcx
  0.01%           │ │  0x00007ff48d486d12: movzbq 0x12(%rsi,%r11,1),%rdx
  0.08%    0.05%  │ │  0x00007ff48d486d18: movzbq 0x13(%rsi,%r11,1),%rax
  0.01%    0.03%  │ │  0x00007ff48d486d1e: movzbq 0x14(%rsi,%r11,1),%rbp
  1.03%    2.14%  │ │  0x00007ff48d486d24: movzbq 0x15(%rsi,%r11,1),%r13
                  │ │  0x00007ff48d486d2a: movzbq 0x16(%rsi,%r11,1),%r11
  0.05%    0.08%  │ │  0x00007ff48d486d30: shl    $0x8,%r9
                  │ │  0x00007ff48d486d34: or     (%rsp),%r9
  1.24%    1.95%  │ │  0x00007ff48d486d38: shl    $0x30,%r11
                  │ │  0x00007ff48d486d3c: shl    $0x28,%r13
  0.05%    0.09%  │ │  0x00007ff48d486d40: shl    $0x20,%rbp
  0.01%    0.01%  │ │  0x00007ff48d486d44: shl    $0x18,%rax
  1.15%    1.82%  │ │  0x00007ff48d486d48: shl    $0x10,%rdx
                  │ │  0x00007ff48d486d4c: or     %rdx,%r9
  0.06%    0.08%  │ │  0x00007ff48d486d4f: or     %rax,%r9
  0.01%           │ │  0x00007ff48d486d52: or     %rbp,%r9
  1.04%    2.19%  │ │  0x00007ff48d486d55: or     %r13,%r9
                  │ │  0x00007ff48d486d58: or     %r11,%r9
  0.04%    0.09%  │ │  0x00007ff48d486d5b: shl    $0x38,%rcx
           0.01%  │ │  0x00007ff48d486d5f: or     %rcx,%r9
  0.91%    1.80%  │ │  0x00007ff48d486d62: imul   %rdi,%r9           ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.05%    0.03%  │ │  0x00007ff48d486d66: rol    $0x1f,%r9
  0.03%    0.09%  │ │  0x00007ff48d486d6a: mov    $0x4cf5ad432745937f,%r11
                  │ │  0x00007ff48d486d74: imul   %r11,%r9
  1.19%    2.04%  │ │  0x00007ff48d486d78: xor    %r14,%r9           ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.01%    0.01%  │ │  0x00007ff48d486d7b: rol    $0x1b,%r9          ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.06%    0.08%  │ │  0x00007ff48d486d7f: mov    %r9,%r14
  0.01%           │ │  0x00007ff48d486d82: shl    $0x2,%r14
  1.03%    1.81%  │ │  0x00007ff48d486d86: add    %r9,%r14
           0.03%  │ │  0x00007ff48d486d89: add    $0x52dce729,%r14   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.04%    0.14%  │ │  0x00007ff48d486d90: mov    %r8d,%ecx
                  │ │  0x00007ff48d486d93: inc    %ecx               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
  0.96%    2.13%  │ │  0x00007ff48d486d95: cmp    %ebx,%ecx
                  │╭│  0x00007ff48d486d97: jge    0x00007ff48d486dac  ;*if_icmpge
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │││  0x00007ff48d486d99: shl    $0x3,%r8d
                  │││  0x00007ff48d486d9d: mov    %r8d,%r9d
                  │││  0x00007ff48d486da0: add    $0x8,%r9d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007ff48d486da4: mov    %ecx,%r8d
                  ││╰  0x00007ff48d486da7: jmpq   0x00007ff48d486ce0  ;*if_icmpge
                  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  ↘↘   0x00007ff48d486dac: mov    0x8(%rsp),%r8d
  0.08%    0.16%       0x00007ff48d486db1: and    $0xfffffffffffffff8,%r8d  ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
                       0x00007ff48d486db5: mov    0x8(%rsp),%r10d
  1.44%    1.19%       0x00007ff48d486dba: sub    %r8d,%r10d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
                       0x00007ff48d486dbd: movslq %r8d,%r9           ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.10%    0.08%       0x00007ff48d486dc0: xor    %ecx,%ecx
                       0x00007ff48d486dc2: cmp    $0x4,%r10d
                       0x00007ff48d486dc6: je     0x00007ff48d486e6d
  1.27%    1.57%       0x00007ff48d486dcc: cmp    $0x4,%r10d
                       0x00007ff48d486dd0: jle    0x00007ff48d486ded
                       0x00007ff48d486dd2: cmp    $0x7,%r10d
                       0x00007ff48d486dd6: je     0x00007ff48d486e10
                       0x00007ff48d486dd8: cmp    $0x7,%r10d
                       0x00007ff48d486ddc: jg     0x00007ff48d486f10
                       0x00007ff48d486de2: cmp    $0x6,%r10d
                       0x00007ff48d486de6: je     0x00007ff48d486e2d
                       0x00007ff48d486de8: xor    %r11d,%r11d
                       0x00007ff48d486deb: jmp    0x00007ff48d486e4d
                       0x00007ff48d486ded: cmp    $0x2,%r10d
....................................................................................................
 20.90%   34.72%  <total for region 2>

....[Hottest Regions]...............................................................................
 54.94%   43.59%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter, version 620 (341 bytes) 
 20.90%   34.72%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 581 (300 bytes) 
  5.71%    9.87%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 581 (72 bytes) 
  3.29%    0.01%   [kernel.kallsyms]  clear_page_c_e (2 bytes) 
  2.51%    2.47%   [kernel.kallsyms]  native_write_msr_safe (0 bytes) 
  1.28%    0.01%   [kernel.kallsyms]  page_fault (0 bytes) 
  1.03%    1.56%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 581 (20 bytes) 
  0.72%    0.10%   [kernel.kallsyms]  __list_del_entry (21 bytes) 
  0.68%            [kernel.kallsyms]  mem_cgroup_charge_common (18 bytes) 
  0.66%    0.08%   [kernel.kallsyms]  do_numa_page (31 bytes) 
  0.65%    0.60%           libjvm.so  [unknown] (9 bytes) 
  0.58%    0.05%   [kernel.kallsyms]  __mem_cgroup_commit_charge (29 bytes) 
  0.35%    0.03%   [kernel.kallsyms]  change_protection_range (16 bytes) 
  0.28%    0.42%           libjvm.so  [unknown] (9 bytes) 
  0.23%    0.05%   [kernel.kallsyms]  mem_cgroup_page_lruvec (37 bytes) 
  0.16%    0.32%   [kernel.kallsyms]  get_page_from_freelist (263 bytes) 
  0.14%    0.14%   [kernel.kallsyms]  _raw_spin_lock (55 bytes) 
  0.13%    0.01%   [kernel.kallsyms]  get_page_from_freelist (0 bytes) 
  0.13%    0.22%   [kernel.kallsyms]  next_zones_zonelist (89 bytes) 
  0.11%            [kernel.kallsyms]  mutex_unlock (0 bytes) 
  5.50%    5.77%  <...other 442 warm regions...>
....................................................................................................
 99.99%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 54.94%   43.59%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe20MBloom1Filter, version 620 
 27.64%   46.15%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 581 
  3.29%    0.01%   [kernel.kallsyms]  clear_page_c_e 
  2.51%    2.47%   [kernel.kallsyms]  native_write_msr_safe 
  1.68%    2.10%           libjvm.so  [unknown] 
  1.28%    0.01%   [kernel.kallsyms]  page_fault 
  0.77%    0.10%   [kernel.kallsyms]  __list_del_entry 
  0.71%    0.14%   [kernel.kallsyms]  do_numa_page 
  0.68%    0.03%   [kernel.kallsyms]  mem_cgroup_charge_common 
  0.61%    0.06%   [kernel.kallsyms]  __mem_cgroup_commit_charge 
  0.58%    0.85%   [kernel.kallsyms]  get_page_from_freelist 
  0.37%    0.04%   [kernel.kallsyms]  change_protection_range 
  0.24%    0.05%   [kernel.kallsyms]  mem_cgroup_page_lruvec 
  0.18%    0.25%   [kernel.kallsyms]  handle_mm_fault 
  0.15%    0.14%   [kernel.kallsyms]  __alloc_pages_nodemask 
  0.14%    0.14%   [kernel.kallsyms]  _raw_spin_lock 
  0.13%    0.22%   [kernel.kallsyms]  next_zones_zonelist 
  0.11%            [kernel.kallsyms]  mutex_unlock 
  0.11%    0.04%      hsdis-amd64.so  print_insn 
  0.10%    0.08%        libc-2.17.so  _IO_fwrite 
  3.75%    2.69%  <...other 146 warm methods...>
....................................................................................................
 99.99%   99.15%  <totals>

....[Distribution by Source]........................................................................
 82.58%   89.74%         C2, level 4
 14.77%    7.25%   [kernel.kallsyms]
  1.68%    2.10%           libjvm.so
  0.34%    0.58%        libc-2.17.so
  0.16%    0.13%  libpthread-2.17.so
  0.16%    0.04%              [ext4]
  0.14%    0.08%      hsdis-amd64.so
  0.08%    0.04%              [jbd2]
  0.05%    0.01%         interpreter
  0.01%                  [ip_tables]
....................................................................................................
 99.99%  100.00%  <totals>



# Run complete. Total time: 00:02:11

Benchmark                                                   (size)  Mode  Cnt    Score    Error  Units
BenchmarkBloom1FilterProbe.testProbe1Bloom1Filter            10000  avgt    5  107.617 ± 53.834  ns/op
BenchmarkBloom1FilterProbe.testProbe1Bloom1Filter:·asm       10000  avgt           NaN             ---
BenchmarkBloom1FilterProbe.testProbe1Bloom1Filter         10000000  avgt    5   97.486 ± 30.329  ns/op
BenchmarkBloom1FilterProbe.testProbe1Bloom1Filter:·asm    10000000  avgt           NaN             ---
BenchmarkBloom1FilterProbe.testProbe20KBloom1Filter          10000  avgt    5   30.622 ± 11.180  ns/op
BenchmarkBloom1FilterProbe.testProbe20KBloom1Filter:·asm     10000  avgt           NaN             ---
BenchmarkBloom1FilterProbe.testProbe20KBloom1Filter       10000000  avgt    5   72.613 ± 18.763  ns/op
BenchmarkBloom1FilterProbe.testProbe20KBloom1Filter:·asm  10000000  avgt           NaN             ---
BenchmarkBloom1FilterProbe.testProbe20MBloom1Filter          10000  avgt    5   34.760 ± 16.799  ns/op
BenchmarkBloom1FilterProbe.testProbe20MBloom1Filter:·asm     10000  avgt           NaN             ---
BenchmarkBloom1FilterProbe.testProbe20MBloom1Filter       10000000  avgt    5   43.669 ± 49.914  ns/op
BenchmarkBloom1FilterProbe.testProbe20MBloom1Filter:·asm  10000000  avgt           NaN             ---
