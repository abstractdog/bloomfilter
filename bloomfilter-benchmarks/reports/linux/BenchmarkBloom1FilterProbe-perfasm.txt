# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: -XX:AllocatePrefetchStyle=2
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe
# Parameters: (numEntries = 10000)

# Run progress: 0.00% complete, ETA 00:00:30
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 58.194 ns/op
# Warmup Iteration   2: 32.658 ns/op
# Warmup Iteration   3: 40.320 ns/op
# Warmup Iteration   4: 32.887 ns/op
# Warmup Iteration   5: 42.662 ns/op
Iteration   1: 51.575 ns/op
Iteration   2: 42.291 ns/op
Iteration   3: 42.137 ns/op
Iteration   4: 47.201 ns/op
Iteration   5: 46.441 ns/op
Iteration   6: 49.419 ns/op
Iteration   7: 54.557 ns/op
Iteration   8: 55.396 ns/op
Iteration   9: 54.968 ns/op
Iteration  10: 54.125 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe":
  49.811 ±(99.9%) 7.738 ns/op [Average]
  (min, avg, max) = (42.137, 49.811, 55.396), stdev = 5.118
  CI (99.9%): [42.072, 57.549] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe:·asm":
PrintAssembly processed: 191238 total address lines.
Perf output processed (skipped 14.103 seconds):
 Column 1: cycles (14862 events)
 Column 2: instructions (14799 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe, version 626 (392 bytes) 

                                                                       ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@15 (line 71)
                         0x00007f843d496419: lea    (%r12,%r8,8),%rbp  ;*getfield probeArray
                                                                       ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@1 (line 71)
                         0x00007f843d49641d: xor    %ebx,%ebx
                  ╭      0x00007f843d49641f: jmp    0x00007f843d49644e
                  │      0x00007f843d496421: nopw   0x0(%rax,%rax,1)
                  │      0x00007f843d49642c: xchg   %ax,%ax            ;*lload
                  │                                                    ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@121 (line 198)
                  │                                                    ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  │                                                    ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.97%    0.01%  │  ↗↗  0x00007f843d496430: mov    0xc(%rsp),%ebx
  0.01%    0.03%  │  ││  0x00007f843d496434: inc    %ebx               ;*iinc
                  │  ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@31 (line 71)
  0.01%    0.01%  │  ││  0x00007f843d496436: cmp    0x8(%rsp),%ebx
                  │  ││  0x00007f843d49643a: jge    0x00007f843d49665a  ;*if_icmpge
                  │  ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@12 (line 71)
                  │  ││  0x00007f843d496440: mov    (%rsp),%r9
  1.07%    0.01%  │  ││  0x00007f843d496444: mov    0x1c(%rsp),%r8d
  0.01%    0.03%  │  ││  0x00007f843d496449: mov    0x8(%rsp),%r10d    ;*aload_1
                  │  ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@15 (line 71)
  0.13%    0.01%  ↘  ││  0x00007f843d49644e: mov    0x10(%rbp,%rbx,4),%ecx  ;*iaload
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@17 (line 71)
  1.07%    0.02%     ││  0x00007f843d496452: mov    0x14(%r9),%edx     ;*getfield bf
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@21 (line 72)
  0.92%    0.01%     ││  0x00007f843d496456: movslq %ecx,%rdi          ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@26 (line 72)
  0.01%    0.05%     ││  0x00007f843d496459: test   %edx,%edx
                     ││  0x00007f843d49645b: je     0x00007f843d496666  ;*invokevirtual testLong
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
           0.01%     ││  0x00007f843d496461: mov    0x60(%r15),%rax
                     ││  0x00007f843d496465: mov    %rax,%r11
  0.92%              ││  0x00007f843d496468: add    $0x18,%r11
  0.03%    0.01%     ││  0x00007f843d49646c: lea    (%r12,%rdx,8),%rsi  ;*getfield bf
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@21 (line 72)
                     ││  0x00007f843d496470: cmp    0x70(%r15),%r11
                     ││  0x00007f843d496474: jae    0x00007f843d4965f9
  0.01%              ││  0x00007f843d49647a: mov    %rsi,0x28(%rsp)
  0.84%    0.01%     ││  0x00007f843d49647f: mov    %rdi,0x20(%rsp)
  0.01%    0.03%     ││  0x00007f843d496484: mov    %edx,0x14(%rsp)
  0.05%              ││  0x00007f843d496488: mov    %ecx,0x10(%rsp)
  0.01%    0.01%     ││  0x00007f843d49648c: mov    %ebx,0xc(%rsp)
  0.96%              ││  0x00007f843d496490: mov    %r10d,0x8(%rsp)
  0.06%    0.02%     ││  0x00007f843d496495: mov    %r8d,0x1c(%rsp)
  0.01%    0.01%     ││  0x00007f843d49649a: mov    %r9,(%rsp)
                     ││  0x00007f843d49649e: mov    0x68(%r15),%r10
  0.85%              ││  0x00007f843d4964a2: cmp    %r10,%r11
                     ││  0x00007f843d4964a5: jae    0x00007f843d496639
  0.01%    0.01%     ││  0x00007f843d4964ab: mov    %r11,0x60(%r15)
  0.72%    0.03%     ││  0x00007f843d4964af: movq   $0x1,(%rax)
  0.71%    0.04%     ││  0x00007f843d4964b6: movl   $0x768,0x8(%rax)   ;   {metadata({type array byte})}
  1.02%              ││  0x00007f843d4964bd: movl   $0x8,0xc(%rax)
  0.75%    0.03%     ││  0x00007f843d4964c4: movq   $0x0,0x10(%rax)
  0.28%              ││  0x00007f843d4964cc: mov    0x10(%rsp),%r10d
  0.01%              ││  0x00007f843d4964d1: mov    %r10b,0x10(%rax)
  1.04%    0.01%     ││  0x00007f843d4964d5: mov    %rax,%rsi          ;*newarray
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@2 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.01%    0.01%     ││  0x00007f843d4964d8: mov    0x20(%rsp),%r10
  0.16%    0.01%     ││  0x00007f843d4964dd: sar    $0x30,%r10
  0.01%              ││  0x00007f843d4964e1: mov    0x20(%rsp),%r11
  0.95%    0.01%     ││  0x00007f843d4964e6: sar    $0x28,%r11
  0.03%    0.02%     ││  0x00007f843d4964ea: mov    %r10d,%r10d
  0.17%              ││  0x00007f843d4964ed: mov    %r11d,%r8d
  0.01%              ││  0x00007f843d4964f0: mov    0x20(%rsp),%r11
  0.85%              ││  0x00007f843d4964f5: sar    $0x20,%r11
  0.01%    0.03%     ││  0x00007f843d4964f9: mov    0x20(%rsp),%r9
  0.17%              ││  0x00007f843d4964fe: sar    $0x18,%r9
  0.01%              ││  0x00007f843d496502: mov    %r11d,%r11d
  0.83%    0.01%     ││  0x00007f843d496505: mov    %r9d,%ecx
  0.01%    0.02%     ││  0x00007f843d496508: mov    0x20(%rsp),%r9
  0.08%              ││  0x00007f843d49650d: sar    $0x10,%r9
  0.01%    0.01%     ││  0x00007f843d496511: mov    0x20(%rsp),%rbx
  0.79%    0.01%     ││  0x00007f843d496516: sar    $0x8,%rbx
  0.01%    0.01%     ││  0x00007f843d49651a: mov    %r9d,%r9d
  0.09%    0.03%     ││  0x00007f843d49651d: mov    %ebx,%edi
  0.01%              ││  0x00007f843d49651f: mov    %dil,0x11(%rsi)    ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@20 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.70%    0.06%     ││  0x00007f843d496523: mov    %r9b,0x12(%rsi)    ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@29 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
           0.01%     ││  0x00007f843d496527: mov    %cl,0x13(%rsi)     ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@38 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.13%    0.36%     ││  0x00007f843d49652a: mov    %r11b,0x14(%rsi)   ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@47 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.04%    0.03%     ││  0x00007f843d49652e: mov    %r8b,0x15(%rsi)    ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@56 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.86%    0.39%     ││  0x00007f843d496532: mov    %r10b,0x16(%rsi)   ;*bastore
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@66 (line 233)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.07%    0.02%     ││  0x00007f843d496536: mov    0x20(%rsp),%r10
  0.21%    0.36%     ││  0x00007f843d49653b: sar    $0x38,%r10
           0.01%     ││  0x00007f843d49653f: mov    %r10d,%r11d
  0.83%    2.24%     ││  0x00007f843d496542: mov    %r11b,0x17(%rsi)   ;*synchronization entry
                     ││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.13%    0.03%     ││  0x00007f843d496546: mov    $0x8,%edx
  0.06%    0.19%     ││  0x00007f843d49654b: xor    %ecx,%ecx
  0.01%    0.01%     ││  0x00007f843d49654d: xchg   %ax,%ax
  0.80%    2.47%     ││  0x00007f843d49654f: callq  0x00007f843d046160  ; OopMap{rbp=Oop [0]=Oop [20]=NarrowOop [28]=NarrowOop [40]=Oop off=404}
                     ││                                                ;*invokestatic hash64
                     ││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
                     ││                                                ;   {static_call}
  0.11%    0.18%     ││  0x00007f843d496554: mov    0x14(%rsp),%ecx
  0.83%    1.51%     ││  0x00007f843d496558: mov    0x2c(%r12,%rcx,8),%r10d  ;*getfield bitSet
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@39 (line 185)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.04%    0.16%     ││  0x00007f843d49655d: mov    0xc(%r12,%r10,8),%r10d  ;*getfield data
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@42 (line 185)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
                     ││                                                ; implicit exception: dispatches to 0x00007f843d496705
  0.13%    0.15%     ││  0x00007f843d496562: mov    0xc(%r12,%r10,8),%r8d  ;*arraylength
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@45 (line 185)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
                     ││                                                ; implicit exception: dispatches to 0x00007f843d496715
  0.10%    0.17%     ││  0x00007f843d496567: mov    %eax,%r9d          ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@6 (line 177)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.81%    1.60%     ││  0x00007f843d49656a: shr    $0x20,%rax
  0.05%    0.18%     ││  0x00007f843d49656e: mov    %eax,%r11d         ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@13 (line 178)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.03%    0.20%     ││  0x00007f843d496571: mov    %r9d,%eax
  0.03%    0.03%     ││  0x00007f843d496574: add    %r11d,%eax         ;*iadd
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@22 (line 180)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.86%    1.26%     ││  0x00007f843d496577: mov    %eax,%ebx
  0.07%    0.10%     ││  0x00007f843d496579: not    %ebx
  0.09%    0.23%     ││  0x00007f843d49657b: test   %eax,%eax
  0.02%    0.09%     ││  0x00007f843d49657d: cmovl  %ebx,%eax          ;*iload
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@36 (line 185)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.87%    1.73%     ││  0x00007f843d496580: test   %r8d,%r8d
                     ││  0x00007f843d496583: je     0x00007f843d496679
  0.19%    0.21%     ││  0x00007f843d496589: cmp    $0x80000000,%eax
  0.01%            ╭ ││  0x00007f843d49658e: jne    0x00007f843d496598
                   │ ││  0x00007f843d496590: xor    %edx,%edx
                   │ ││  0x00007f843d496592: cmp    $0xffffffffffffffff,%r8d
                   │╭││  0x00007f843d496596: je     0x00007f843d49659c
  0.17%    0.28%   ↘│││  0x00007f843d496598: cltd   
  0.85%    1.44%    │││  0x00007f843d496599: idiv   %r8d               ;*irem
                    │││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@46 (line 185)
                    │││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
 19.30%   29.81%    ↘││  0x00007f843d49659c: cmp    %r8d,%edx
                     ││  0x00007f843d49659f: jae    0x00007f843d49668d  ;*laload
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@58 (line 186)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.94%    0.02%     ││  0x00007f843d4965a5: mov    0x14(%rsp),%r8d
  0.01%    0.03%     ││  0x00007f843d4965aa: mov    0xc(%r12,%r8,8),%ecx  ;*getfield k
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@72 (line 188)
                     ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
                     ││  0x00007f843d4965af: cmp    $0x2,%ecx
                     ╰│  0x00007f843d4965b2: jl     0x00007f843d496430  ;*if_icmpgt
                      │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@75 (line 188)
                      │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                      │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.01%               │  0x00007f843d4965b8: cmp    $0x7ffffffe,%ecx
                      ╰  0x00007f843d4965be: jle    0x00007f843d496430  ;*iload
                                                                       ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@78 (line 189)
                                                                       ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                       ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
                         0x00007f843d4965c4: shl    $0x3,%r10
                         0x00007f843d4965c8: mov    0x10(%r10,%rdx,8),%rbp  ;*laload
                                                                       ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@58 (line 186)
....................................................................................................
 46.03%   46.10%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 580 (300 bytes) 

                     Decoding compiled method 0x00007f843d4852d0:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007f84355e0fb0} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  0.19%    0.20%       0x00007f843d485460: mov    %eax,-0x14000(%rsp)
  0.93%    1.57%       0x00007f843d485467: push   %rbp
  0.03%    0.02%       0x00007f843d485468: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  0.13%    0.30%       0x00007f843d48546c: mov    %edx,0x8(%rsp)
  0.94%    1.99%       0x00007f843d485470: mov    %edx,%ebx
  0.04%    0.01%       0x00007f843d485472: sar    $0x3,%ebx          ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  0.07%    0.20%       0x00007f843d485475: movslq %ecx,%r14          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
           0.01%       0x00007f843d485478: mov    $0x87c37b91114253d5,%rdi
  0.70%    1.94%       0x00007f843d485482: test   %ebx,%ebx
                  ╭    0x00007f843d485484: jle    0x00007f843d48556c  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.03%    0.03%  │    0x00007f843d48548a: mov    0xc(%rsi),%r10d    ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007f843d4858d1
  0.13%    0.20%  │    0x00007f843d48548e: xor    %r9d,%r9d
           0.01%  │    0x00007f843d485491: xor    %r8d,%r8d
  0.86%    1.86%  │    0x00007f843d485494: nopl   0x0(%rax,%rax,1)
           0.02%  │    0x00007f843d48549c: xchg   %ax,%ax            ;*iload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  0.13%    0.32%  │ ↗  0x00007f843d4854a0: cmp    %r10d,%r9d
                  │ │  0x00007f843d4854a3: jae    0x00007f843d48571e  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │ │  0x00007f843d4854a9: movzbq 0x10(%rsi,%r9,1),%rcx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.88%    1.64%  │ │  0x00007f843d4854af: mov    %r9d,%r11d
  0.01%    0.01%  │ │  0x00007f843d4854b2: add    $0x7,%r11d
  0.10%    0.26%  │ │  0x00007f843d4854b6: cmp    %r10d,%r11d
                  │ │  0x00007f843d4854b9: jae    0x00007f843d485751  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
                  │ │  0x00007f843d4854bf: mov    %rcx,(%rsp)
  0.86%    1.97%  │ │  0x00007f843d4854c3: movslq %r9d,%r11          ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
           0.02%  │ │  0x00007f843d4854c6: movzbq 0x11(%rsi,%r11,1),%r9
  0.08%    0.24%  │ │  0x00007f843d4854cc: movzbq 0x17(%rsi,%r11,1),%rcx
                  │ │  0x00007f843d4854d2: movzbq 0x12(%rsi,%r11,1),%rdx
  0.71%    1.47%  │ │  0x00007f843d4854d8: movzbq 0x13(%rsi,%r11,1),%rax
  0.01%    0.01%  │ │  0x00007f843d4854de: movzbq 0x14(%rsi,%r11,1),%rbp
  0.10%    0.21%  │ │  0x00007f843d4854e4: movzbq 0x15(%rsi,%r11,1),%r13
                  │ │  0x00007f843d4854ea: movzbq 0x16(%rsi,%r11,1),%r11
  0.90%    1.47%  │ │  0x00007f843d4854f0: shl    $0x8,%r9
           0.01%  │ │  0x00007f843d4854f4: or     (%rsp),%r9
  0.15%    0.27%  │ │  0x00007f843d4854f8: shl    $0x30,%r11
           0.01%  │ │  0x00007f843d4854fc: shl    $0x28,%r13
  0.82%    1.51%  │ │  0x00007f843d485500: shl    $0x20,%rbp
  0.03%    0.01%  │ │  0x00007f843d485504: shl    $0x18,%rax
  0.07%    0.16%  │ │  0x00007f843d485508: shl    $0x10,%rdx
           0.01%  │ │  0x00007f843d48550c: or     %rdx,%r9
  0.83%    1.47%  │ │  0x00007f843d48550f: or     %rax,%r9
  0.03%    0.02%  │ │  0x00007f843d485512: or     %rbp,%r9
  0.13%    0.26%  │ │  0x00007f843d485515: or     %r13,%r9
  0.01%    0.01%  │ │  0x00007f843d485518: or     %r11,%r9
  0.81%    1.76%  │ │  0x00007f843d48551b: shl    $0x38,%rcx
  0.01%    0.01%  │ │  0x00007f843d48551f: or     %rcx,%r9
  0.10%    0.22%  │ │  0x00007f843d485522: imul   %rdi,%r9           ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.03%    0.07%  │ │  0x00007f843d485526: rol    $0x1f,%r9
  0.77%    1.36%  │ │  0x00007f843d48552a: mov    $0x4cf5ad432745937f,%r11
  0.01%    0.01%  │ │  0x00007f843d485534: imul   %r11,%r9
  0.16%    0.26%  │ │  0x00007f843d485538: xor    %r14,%r9           ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.03%    0.03%  │ │  0x00007f843d48553b: rol    $0x1b,%r9          ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.81%    1.76%  │ │  0x00007f843d48553f: mov    %r9,%r14
           0.01%  │ │  0x00007f843d485542: shl    $0x2,%r14
  0.12%    0.28%  │ │  0x00007f843d485546: add    %r9,%r14
  0.05%    0.07%  │ │  0x00007f843d485549: add    $0x52dce729,%r14   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.95%    1.51%  │ │  0x00007f843d485550: mov    %r8d,%ecx
                  │ │  0x00007f843d485553: inc    %ecx               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
  0.11%    0.21%  │ │  0x00007f843d485555: cmp    %ebx,%ecx
                  │╭│  0x00007f843d485557: jge    0x00007f843d48556c  ;*if_icmpge
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │││  0x00007f843d485559: shl    $0x3,%r8d
                  │││  0x00007f843d48555d: mov    %r8d,%r9d
                  │││  0x00007f843d485560: add    $0x8,%r9d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007f843d485564: mov    %ecx,%r8d
                  ││╰  0x00007f843d485567: jmpq   0x00007f843d4854a0  ;*if_icmpge
                  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  ↘↘   0x00007f843d48556c: mov    0x8(%rsp),%r8d
  0.81%    1.74%       0x00007f843d485571: and    $0xfffffffffffffff8,%r8d  ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
                       0x00007f843d485575: mov    0x8(%rsp),%r10d
  0.16%    0.16%       0x00007f843d48557a: sub    %r8d,%r10d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
  0.01%    0.01%       0x00007f843d48557d: movslq %r8d,%r9           ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.98%    0.82%       0x00007f843d485580: xor    %ecx,%ecx
                       0x00007f843d485582: cmp    $0x4,%r10d
                       0x00007f843d485586: je     0x00007f843d48562d
  0.10%    0.14%       0x00007f843d48558c: cmp    $0x4,%r10d
                       0x00007f843d485590: jle    0x00007f843d4855ad
                       0x00007f843d485592: cmp    $0x7,%r10d
                       0x00007f843d485596: je     0x00007f843d4855d0
                       0x00007f843d485598: cmp    $0x7,%r10d
                       0x00007f843d48559c: jg     0x00007f843d4856d0
                       0x00007f843d4855a2: cmp    $0x6,%r10d
                       0x00007f843d4855a6: je     0x00007f843d4855ed
                       0x00007f843d4855a8: xor    %r11d,%r11d
                       0x00007f843d4855ab: jmp    0x00007f843d48560d
                       0x00007f843d4855ad: cmp    $0x2,%r10d
....................................................................................................
 15.95%   30.14%  <total for region 2>

....[Hottest Regions]...............................................................................
 46.03%   46.10%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe, version 626 (392 bytes) 
 15.95%   30.14%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 580 (300 bytes) 
  6.52%    0.04%   [kernel.kallsyms]  clear_page_c_e (2 bytes) 
  6.25%   10.81%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 580 (77 bytes) 
  3.09%    0.10%   [kernel.kallsyms]  page_fault (40 bytes) 
  2.14%    0.20%   [kernel.kallsyms]  mem_cgroup_page_lruvec (258 bytes) 
  2.05%    0.16%   [kernel.kallsyms]  __list_del_entry (64 bytes) 
  1.98%    0.62%   [kernel.kallsyms]  change_protection_range (45 bytes) 
  1.16%    0.26%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe, version 626 (28 bytes) 
  1.14%    0.07%   [kernel.kallsyms]  mem_cgroup_charge_common (0 bytes) 
  1.06%    1.28%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 580 (20 bytes) 
  0.94%    0.94%   [kernel.kallsyms]  get_page_from_freelist (472 bytes) 
  0.91%    0.88%   [kernel.kallsyms]  native_write_msr_safe (0 bytes) 
  0.55%    0.07%   [kernel.kallsyms]  do_numa_page (128 bytes) 
  0.50%    0.26%   [kernel.kallsyms]  get_page_from_freelist (117 bytes) 
  0.48%    0.55%   [kernel.kallsyms]  next_zones_zonelist (89 bytes) 
  0.42%    0.25%   [kernel.kallsyms]  __alloc_pages_nodemask (439 bytes) 
  0.36%    0.28%   [kernel.kallsyms]  get_page_from_freelist (68 bytes) 
  0.27%    0.20%   [kernel.kallsyms]  __pagevec_lru_add_fn (229 bytes) 
  0.26%    0.24%   [kernel.kallsyms]  __alloc_pages_nodemask (113 bytes) 
  7.89%    6.55%  <...other 543 warm regions...>
....................................................................................................
 99.98%   99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 47.19%   46.37%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe, version 626 
 23.26%   42.23%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 580 
  6.52%    0.04%   [kernel.kallsyms]  clear_page_c_e 
  3.09%    0.10%   [kernel.kallsyms]  page_fault 
  2.14%    0.20%   [kernel.kallsyms]  mem_cgroup_page_lruvec 
  2.06%    1.75%   [kernel.kallsyms]  get_page_from_freelist 
  2.05%    0.16%   [kernel.kallsyms]  __list_del_entry 
  2.01%    0.64%   [kernel.kallsyms]  change_protection_range 
  1.18%    0.08%   [kernel.kallsyms]  mem_cgroup_charge_common 
  0.91%    0.88%   [kernel.kallsyms]  native_write_msr_safe 
  0.71%    0.55%   [kernel.kallsyms]  __alloc_pages_nodemask 
  0.67%    0.80%           libjvm.so  [unknown] 
  0.59%    0.14%   [kernel.kallsyms]  do_numa_page 
  0.48%    0.55%   [kernel.kallsyms]  next_zones_zonelist 
  0.40%    0.36%   [kernel.kallsyms]  handle_mm_fault 
  0.32%    0.22%   [kernel.kallsyms]  __pagevec_lru_add_fn 
  0.26%    0.27%   [kernel.kallsyms]  __zone_watermark_ok 
  0.26%    0.06%   [kernel.kallsyms]  page_add_new_anon_rmap 
  0.26%    0.09%   [kernel.kallsyms]  find_vma 
  0.24%    0.20%   [kernel.kallsyms]  __do_page_fault 
  5.40%    3.87%  <...other 192 warm methods...>
....................................................................................................
 99.98%   99.54%  <totals>

....[Distribution by Source]........................................................................
 70.45%   88.59%         C2, level 4
 28.26%   10.08%   [kernel.kallsyms]
  0.67%    0.80%           libjvm.so
  0.26%    0.30%        libc-2.17.so
  0.15%    0.06%      hsdis-amd64.so
  0.07%    0.03%  libpthread-2.17.so
  0.05%    0.03%              [jbd2]
  0.05%    0.07%              [ext4]
  0.02%    0.01%         interpreter
  0.01%                        [kvm]
....................................................................................................
 99.98%   99.99%  <totals>



# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: -XX:AllocatePrefetchStyle=2
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe
# Parameters: (numEntries = 10000000)

# Run progress: 50.00% complete, ETA 00:00:32
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 51.961 ns/op
# Warmup Iteration   2: 41.076 ns/op
# Warmup Iteration   3: 44.554 ns/op
# Warmup Iteration   4: 41.920 ns/op
# Warmup Iteration   5: 41.660 ns/op
Iteration   1: 50.464 ns/op
Iteration   2: 41.169 ns/op
Iteration   3: 48.440 ns/op
Iteration   4: 45.944 ns/op
Iteration   5: 40.079 ns/op
Iteration   6: 42.581 ns/op
Iteration   7: 54.245 ns/op
Iteration   8: 57.404 ns/op
Iteration   9: 58.263 ns/op
Iteration  10: 56.251 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe":
  49.484 ±(99.9%) 10.427 ns/op [Average]
  (min, avg, max) = (40.079, 49.484, 58.263), stdev = 6.897
  CI (99.9%): [39.057, 59.911] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe.testProbe:·asm":
PrintAssembly processed: 191601 total address lines.
Perf output processed (skipped 15.671 seconds):
 Column 1: cycles (14766 events)
 Column 2: instructions (14710 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe, version 627 (383 bytes) 

                                                                      ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@15 (line 71)
                        0x00007f73a94a2159: lea    (%r12,%r8,8),%rbp  ;*getfield probeArray
                                                                      ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@1 (line 71)
                        0x00007f73a94a215d: xor    %ebx,%ebx
                  ╭     0x00007f73a94a215f: jmp    0x00007f73a94a218e
                  │     0x00007f73a94a2161: nopw   0x0(%rax,%rax,1)
                  │     0x00007f73a94a216c: xchg   %ax,%ax            ;*lload
                  │                                                   ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@121 (line 198)
                  │                                                   ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                  │                                                   ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  1.10%    0.05%  │  ↗  0x00007f73a94a2170: mov    0xc(%rsp),%ebx
           0.01%  │  │  0x00007f73a94a2174: inc    %ebx               ;*iinc
                  │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@31 (line 71)
  0.07%    0.01%  │  │  0x00007f73a94a2176: cmp    0x8(%rsp),%ebx
                  │  │  0x00007f73a94a217a: jge    0x00007f73a94a239a  ;*if_icmpge
                  │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@12 (line 71)
                  │  │  0x00007f73a94a2180: mov    (%rsp),%r9
  0.88%    0.04%  │  │  0x00007f73a94a2184: mov    0x1c(%rsp),%r8d
                  │  │  0x00007f73a94a2189: mov    0x8(%rsp),%r10d    ;*aload_1
                  │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@15 (line 71)
  0.09%           ↘  │  0x00007f73a94a218e: mov    0x10(%rbp,%rbx,4),%ecx  ;*iaload
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@17 (line 71)
  0.63%    0.03%     │  0x00007f73a94a2192: mov    0x14(%r9),%edx     ;*getfield bf
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@21 (line 72)
  1.10%    0.01%     │  0x00007f73a94a2196: movslq %ecx,%rdi          ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@26 (line 72)
  0.01%              │  0x00007f73a94a2199: test   %edx,%edx
                     │  0x00007f73a94a219b: je     0x00007f73a94a23a6  ;*invokevirtual testLong
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.05%              │  0x00007f73a94a21a1: mov    0x60(%r15),%rax
  0.01%              │  0x00007f73a94a21a5: mov    %rax,%r11
  1.07%    0.01%     │  0x00007f73a94a21a8: add    $0x18,%r11
                     │  0x00007f73a94a21ac: lea    (%r12,%rdx,8),%rsi  ;*getfield bf
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@21 (line 72)
  0.03%              │  0x00007f73a94a21b0: cmp    0x70(%r15),%r11
                     │  0x00007f73a94a21b4: jae    0x00007f73a94a2339
                     │  0x00007f73a94a21ba: mov    %rsi,0x28(%rsp)
  0.98%    0.01%     │  0x00007f73a94a21bf: mov    %rdi,0x20(%rsp)
  0.02%    0.01%     │  0x00007f73a94a21c4: mov    %edx,0x14(%rsp)
  0.10%              │  0x00007f73a94a21c8: mov    %ecx,0x10(%rsp)
  0.01%              │  0x00007f73a94a21cc: mov    %ebx,0xc(%rsp)
  1.21%    0.02%     │  0x00007f73a94a21d0: mov    %r10d,0x8(%rsp)
  0.09%    0.02%     │  0x00007f73a94a21d5: mov    %r8d,0x1c(%rsp)
  0.06%              │  0x00007f73a94a21da: mov    %r9,(%rsp)
                     │  0x00007f73a94a21de: mov    0x68(%r15),%r10
  1.08%    0.03%     │  0x00007f73a94a21e2: cmp    %r10,%r11
                     │  0x00007f73a94a21e5: jae    0x00007f73a94a2379
           0.01%     │  0x00007f73a94a21eb: mov    %r11,0x60(%r15)
  0.68%    0.03%     │  0x00007f73a94a21ef: movq   $0x1,(%rax)
  0.58%    0.03%     │  0x00007f73a94a21f6: movl   $0x768,0x8(%rax)   ;   {metadata({type array byte})}
  1.01%    0.01%     │  0x00007f73a94a21fd: movl   $0x8,0xc(%rax)
  0.50%    0.02%     │  0x00007f73a94a2204: movq   $0x0,0x10(%rax)
  0.30%              │  0x00007f73a94a220c: mov    0x10(%rsp),%r10d
  0.01%              │  0x00007f73a94a2211: mov    %r10b,0x10(%rax)
  1.06%    0.03%     │  0x00007f73a94a2215: mov    %rax,%rsi          ;*newarray
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@2 (line 233)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
           0.01%     │  0x00007f73a94a2218: mov    0x20(%rsp),%r10
  0.12%    0.01%     │  0x00007f73a94a221d: sar    $0x30,%r10
                     │  0x00007f73a94a2221: mov    0x20(%rsp),%r11
  0.91%    0.02%     │  0x00007f73a94a2226: sar    $0x28,%r11
  0.01%              │  0x00007f73a94a222a: mov    %r10d,%r10d
  0.20%    0.01%     │  0x00007f73a94a222d: mov    %r11d,%r8d
           0.01%     │  0x00007f73a94a2230: mov    0x20(%rsp),%r11
  0.86%    0.06%     │  0x00007f73a94a2235: sar    $0x20,%r11
           0.01%     │  0x00007f73a94a2239: mov    0x20(%rsp),%r9
  0.11%              │  0x00007f73a94a223e: sar    $0x18,%r9
           0.01%     │  0x00007f73a94a2242: mov    %r11d,%r11d
  1.00%    0.04%     │  0x00007f73a94a2245: mov    %r9d,%ecx
                     │  0x00007f73a94a2248: mov    0x20(%rsp),%r9
  0.12%    0.01%     │  0x00007f73a94a224d: sar    $0x10,%r9
                     │  0x00007f73a94a2251: mov    0x20(%rsp),%rbx
  0.94%    0.01%     │  0x00007f73a94a2256: sar    $0x8,%rbx
  0.01%              │  0x00007f73a94a225a: mov    %r9d,%r9d
  0.09%    0.04%     │  0x00007f73a94a225d: mov    %ebx,%edi
                     │  0x00007f73a94a225f: mov    %dil,0x11(%rsi)    ;*bastore
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@20 (line 233)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.93%    0.01%     │  0x00007f73a94a2263: mov    %r9b,0x12(%rsi)    ;*bastore
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@29 (line 233)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.01%    0.03%     │  0x00007f73a94a2267: mov    %cl,0x13(%rsi)     ;*bastore
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@38 (line 233)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.13%    0.31%     │  0x00007f73a94a226a: mov    %r11b,0x14(%rsi)   ;*bastore
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@47 (line 233)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.05%    0.04%     │  0x00007f73a94a226e: mov    %r8b,0x15(%rsi)    ;*bastore
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@56 (line 233)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.94%    0.46%     │  0x00007f73a94a2272: mov    %r10b,0x16(%rsi)   ;*bastore
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::longToByteArrayLE@66 (line 233)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@2 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.05%    0.01%     │  0x00007f73a94a2276: mov    0x20(%rsp),%r10
  0.22%    0.43%     │  0x00007f73a94a227b: sar    $0x38,%r10
                     │  0x00007f73a94a227f: mov    %r10d,%r11d
  0.95%    2.26%     │  0x00007f73a94a2282: mov    %r11b,0x17(%rsi)   ;*synchronization entry
                     │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.07%    0.01%     │  0x00007f73a94a2286: mov    $0x8,%edx
  0.22%    0.23%     │  0x00007f73a94a228b: xor    %ecx,%ecx
  0.03%              │  0x00007f73a94a228d: xchg   %ax,%ax
  0.99%    2.25%     │  0x00007f73a94a228f: callq  0x00007f73a9046160  ; OopMap{rbp=Oop [0]=Oop [20]=NarrowOop [28]=NarrowOop [40]=Oop off=404}
                     │                                                ;*invokestatic hash64
                     │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@1 (line 176)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
                     │                                                ;   {static_call}
           0.01%     │  0x00007f73a94a2294: mov    0x14(%rsp),%ecx
  0.90%    1.56%     │  0x00007f73a94a2298: mov    0x2c(%r12,%rcx,8),%r10d  ;*getfield bitSet
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@39 (line 185)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.17%    0.10%     │  0x00007f73a94a229d: mov    0xc(%r12,%r10,8),%r10d  ;*getfield data
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@42 (line 185)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
                     │                                                ; implicit exception: dispatches to 0x00007f73a94a2445
  0.03%    0.07%     │  0x00007f73a94a22a2: mov    0xc(%r12,%r10,8),%r8d  ;*arraylength
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@45 (line 185)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
                     │                                                ; implicit exception: dispatches to 0x00007f73a94a2455
  1.02%    1.74%     │  0x00007f73a94a22a7: mov    %eax,%r9d          ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@6 (line 177)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
                     │  0x00007f73a94a22aa: shr    $0x20,%rax
  0.10%    0.15%     │  0x00007f73a94a22ae: mov    %eax,%r11d         ;*l2i  ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@13 (line 178)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
                     │  0x00007f73a94a22b1: mov    %r9d,%eax
  0.88%    1.88%     │  0x00007f73a94a22b4: add    %r11d,%eax         ;*iadd
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@22 (line 180)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
                     │  0x00007f73a94a22b7: mov    %eax,%ebx
  0.07%    0.16%     │  0x00007f73a94a22b9: not    %ebx
                     │  0x00007f73a94a22bb: test   %eax,%eax
  1.02%    1.96%     │  0x00007f73a94a22bd: cmovl  %ebx,%eax          ;*iload
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@36 (line 185)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.24%    0.46%     │  0x00007f73a94a22c0: test   %r8d,%r8d
                     │  0x00007f73a94a22c3: je     0x00007f73a94a23b9
  0.01%              │  0x00007f73a94a22c9: cmp    $0x80000000,%eax
                   ╭ │  0x00007f73a94a22ce: jne    0x00007f73a94a22d8
                   │ │  0x00007f73a94a22d0: xor    %edx,%edx
                   │ │  0x00007f73a94a22d2: cmp    $0xffffffffffffffff,%r8d
                   │╭│  0x00007f73a94a22d6: je     0x00007f73a94a22dc
  1.19%    1.77%   ↘││  0x00007f73a94a22d8: cltd   
           0.01%    ││  0x00007f73a94a22d9: idiv   %r8d               ;*irem
                    ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@46 (line 185)
                    ││                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                    ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
 19.40%   30.33%    ↘│  0x00007f73a94a22dc: cmp    %r8d,%edx
                     │  0x00007f73a94a22df: jae    0x00007f73a94a23cd  ;*laload
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@58 (line 186)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  1.02%    0.07%     │  0x00007f73a94a22e5: mov    0x14(%rsp),%r8d
  0.01%              │  0x00007f73a94a22ea: mov    0xc(%r12,%r8,8),%ecx  ;*getfield k
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@72 (line 188)
                     │                                                ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
  0.03%              │  0x00007f73a94a22ef: cmp    $0x2,%ecx
                     ╰  0x00007f73a94a22f2: jl     0x00007f73a94a2170  ;*if_icmpgt
                                                                      ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@75 (line 188)
                                                                      ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testLong@5 (line 214)
                                                                      ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe@27 (line 72)
                        0x00007f73a94a22f8: cmp    $0x7ffffffe,%ecx
                        0x00007f73a94a22fe: jle    0x00007f73a94a2170  ;*iload
                                                                      ; - com.github.prasanthj.bloomfilter.Bloom1Filter::testBytes@78 (line 189)
....................................................................................................
 47.79%   46.90%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 581 (298 bytes) 

                     Decoding compiled method 0x00007f73a9486950:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007f73bc7ecfb0} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  0.20%    0.34%       0x00007f73a9486ae0: mov    %eax,-0x14000(%rsp)
  0.90%    1.64%       0x00007f73a9486ae7: push   %rbp
  0.01%    0.01%       0x00007f73a9486ae8: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  0.10%    0.35%       0x00007f73a9486aec: mov    %edx,0x10(%rsp)
  0.98%    1.99%       0x00007f73a9486af0: mov    %edx,%r10d
           0.01%       0x00007f73a9486af3: sar    $0x3,%r10d         ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  0.13%    0.36%       0x00007f73a9486af7: movslq %ecx,%r11          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
                       0x00007f73a9486afa: mov    $0x87c37b91114253d5,%rbx
  1.07%    2.03%       0x00007f73a9486b04: test   %r10d,%r10d
                  ╭    0x00007f73a9486b07: jle    0x00007f73a9486bf0  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.01%    0.01%  │    0x00007f73a9486b0d: mov    %rsi,%r9
  0.14%    0.31%  │    0x00007f73a9486b10: mov    0xc(%rsi),%edi     ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007f73a9486f79
                  │    0x00007f73a9486b13: xor    %r8d,%r8d
  0.95%    1.52%  │    0x00007f73a9486b16: xor    %ecx,%ecx
  0.01%    0.01%  │╭   0x00007f73a9486b18: jmp    0x00007f73a9486b30
                  ││   0x00007f73a9486b1a: nopw   0x0(%rax,%rax,1)
                  ││↗  0x00007f73a9486b20: shl    $0x3,%ecx
                  │││  0x00007f73a9486b23: mov    %ecx,%r8d
                  │││  0x00007f73a9486b26: add    $0x8,%r8d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007f73a9486b2a: mov    %r9d,%ecx
                  │││  0x00007f73a9486b2d: mov    %rsi,%r9           ;*iload
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  0.19%    0.31%  │↘│  0x00007f73a9486b30: cmp    %edi,%r8d
                  │ │  0x00007f73a9486b33: jae    0x00007f73a9486dba  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │ │  0x00007f73a9486b39: movzbq 0x10(%r9,%r8,1),%rdx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.83%    1.43%  │ │  0x00007f73a9486b3f: mov    %r8d,%esi
  0.01%    0.01%  │ │  0x00007f73a9486b42: add    $0x7,%esi
  0.16%    0.32%  │ │  0x00007f73a9486b45: cmp    %edi,%esi
                  │ │  0x00007f73a9486b47: jae    0x00007f73a9486df1  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
  0.01%    0.01%  │ │  0x00007f73a9486b4d: mov    %rdx,(%rsp)
  0.81%    1.86%  │ │  0x00007f73a9486b51: movslq %r8d,%r8           ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
           0.01%  │ │  0x00007f73a9486b54: movzbq 0x11(%r9,%r8,1),%rdx
  0.14%    0.14%  │ │  0x00007f73a9486b5a: movzbq 0x17(%r9,%r8,1),%rax
  0.01%           │ │  0x00007f73a9486b60: movzbq 0x12(%r9,%r8,1),%rbp
  1.00%    1.57%  │ │  0x00007f73a9486b66: movzbq 0x13(%r9,%r8,1),%r13
  0.02%    0.01%  │ │  0x00007f73a9486b6c: movzbq 0x14(%r9,%r8,1),%r14
  0.14%    0.22%  │ │  0x00007f73a9486b72: mov    %r9,%rsi
           0.01%  │ │  0x00007f73a9486b75: movzbq 0x15(%r9,%r8,1),%r9
  0.89%    1.48%  │ │  0x00007f73a9486b7b: movzbq 0x16(%rsi,%r8,1),%r8
  0.01%           │ │  0x00007f73a9486b81: shl    $0x8,%rdx
  0.16%    0.24%  │ │  0x00007f73a9486b85: or     (%rsp),%rdx
  0.01%           │ │  0x00007f73a9486b89: shl    $0x30,%r8
  0.88%    1.50%  │ │  0x00007f73a9486b8d: shl    $0x28,%r9
  0.01%           │ │  0x00007f73a9486b91: shl    $0x20,%r14
  0.07%    0.21%  │ │  0x00007f73a9486b95: shl    $0x18,%r13
  0.01%           │ │  0x00007f73a9486b99: shl    $0x10,%rbp
  0.79%    1.56%  │ │  0x00007f73a9486b9d: or     %rbp,%rdx
  0.01%    0.01%  │ │  0x00007f73a9486ba0: or     %r13,%rdx
  0.16%    0.31%  │ │  0x00007f73a9486ba3: or     %r14,%rdx
  0.01%           │ │  0x00007f73a9486ba6: or     %r9,%rdx
  0.87%    1.67%  │ │  0x00007f73a9486ba9: or     %r8,%rdx
  0.01%    0.02%  │ │  0x00007f73a9486bac: shl    $0x38,%rax
  0.17%    0.28%  │ │  0x00007f73a9486bb0: or     %rax,%rdx
           0.01%  │ │  0x00007f73a9486bb3: imul   %rbx,%rdx          ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.88%    1.76%  │ │  0x00007f73a9486bb7: rol    $0x1f,%rdx
  0.01%    0.03%  │ │  0x00007f73a9486bbb: mov    $0x4cf5ad432745937f,%r8
  0.16%    0.21%  │ │  0x00007f73a9486bc5: imul   %r8,%rdx
  0.04%    0.07%  │ │  0x00007f73a9486bc9: xor    %r11,%rdx          ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.89%    1.60%  │ │  0x00007f73a9486bcc: rol    $0x1b,%rdx         ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.02%    0.07%  │ │  0x00007f73a9486bd0: mov    %rdx,%r11
  0.17%    0.29%  │ │  0x00007f73a9486bd3: shl    $0x2,%r11
  0.06%    0.05%  │ │  0x00007f73a9486bd7: add    %rdx,%r11
  0.85%    1.56%  │ │  0x00007f73a9486bda: add    $0x52dce729,%r11   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.04%    0.03%  │ │  0x00007f73a9486be1: mov    %ecx,%r9d
  0.17%    0.29%  │ │  0x00007f73a9486be4: inc    %r9d               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
           0.01%  │ │  0x00007f73a9486be7: cmp    %r10d,%r9d
                  │ ╰  0x00007f73a9486bea: jl     0x00007f73a9486b20  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.83%    1.63%  ↘    0x00007f73a9486bf0: mov    0x10(%rsp),%r10d
  0.04%    0.11%       0x00007f73a9486bf5: and    $0xfffffffffffffff8,%r10d
                                                                     ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
  0.19%    0.19%       0x00007f73a9486bf9: mov    0x10(%rsp),%r8d
  0.01%                0x00007f73a9486bfe: sub    %r10d,%r8d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
  0.93%    0.84%       0x00007f73a9486c01: movslq %r10d,%rdi         ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.05%    0.05%       0x00007f73a9486c04: cmp    $0x4,%r8d
                       0x00007f73a9486c08: je     0x00007f73a9486c6b
  0.14%    0.18%       0x00007f73a9486c0a: cmp    $0x4,%r8d
                       0x00007f73a9486c0e: jle    0x00007f73a9486c35
                       0x00007f73a9486c10: cmp    $0x7,%r8d
                       0x00007f73a9486c14: je     0x00007f73a9486c72
                       0x00007f73a9486c16: cmp    $0x7,%r8d
                       0x00007f73a9486c1a: jg     0x00007f73a9486d6c
                       0x00007f73a9486c20: cmp    $0x6,%r8d
                       0x00007f73a9486c24: jne    0x00007f73a9486c2e
                       0x00007f73a9486c26: xor    %r9d,%r9d
                       0x00007f73a9486c29: mov    %rsi,%r8
                       0x00007f73a9486c2c: jmp    0x00007f73a9486c92
....................................................................................................
 17.32%   30.71%  <total for region 2>

....[Hottest Regions]...............................................................................
 47.79%   46.90%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe, version 627 (383 bytes) 
 17.32%   30.71%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 581 (298 bytes) 
  5.99%   10.44%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 581 (77 bytes) 
  5.81%    0.05%   [kernel.kallsyms]  clear_page_c_e (9 bytes) 
  2.87%    0.14%   [kernel.kallsyms]  page_fault (26 bytes) 
  1.53%    0.16%   [kernel.kallsyms]  __list_del_entry (64 bytes) 
  1.31%    1.26%   [kernel.kallsyms]  native_read_msr_safe (33 bytes) 
  1.30%    0.27%   [kernel.kallsyms]  change_protection_range (103 bytes) 
  1.09%    0.05%   [kernel.kallsyms]  mem_cgroup_charge_common (0 bytes) 
  1.09%    0.15%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe, version 627 (13 bytes) 
  1.08%    1.35%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 581 (17 bytes) 
  0.92%    0.06%   [kernel.kallsyms]  do_numa_page (70 bytes) 
  0.80%    0.11%   [kernel.kallsyms]  __mem_cgroup_commit_charge (45 bytes) 
  0.68%    0.09%   [kernel.kallsyms]  mem_cgroup_page_lruvec (54 bytes) 
  0.53%    0.44%   [kernel.kallsyms]  get_page_from_freelist (441 bytes) 
  0.27%    0.11%   [kernel.kallsyms]  handle_mm_fault (104 bytes) 
  0.26%    0.35%   [kernel.kallsyms]  next_zones_zonelist (86 bytes) 
  0.26%    0.17%   [kernel.kallsyms]  _raw_spin_lock (28 bytes) 
  0.24%    0.20%   [kernel.kallsyms]  get_page_from_freelist (80 bytes) 
  0.24%    0.26%   [kernel.kallsyms]  get_page_from_freelist (85 bytes) 
  8.59%    6.74%  <...other 624 warm regions...>
....................................................................................................
100.00%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 48.88%   47.05%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloom1FilterProbe::testProbe, version 627 
 24.40%   42.49%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 581 
  5.81%    0.05%   [kernel.kallsyms]  clear_page_c_e 
  2.87%    0.14%   [kernel.kallsyms]  page_fault 
  1.53%    0.16%   [kernel.kallsyms]  __list_del_entry 
  1.32%    0.28%   [kernel.kallsyms]  change_protection_range 
  1.31%    1.26%   [kernel.kallsyms]  native_read_msr_safe 
  1.19%    1.18%   [kernel.kallsyms]  get_page_from_freelist 
  1.17%    0.07%   [kernel.kallsyms]  mem_cgroup_charge_common 
  0.96%    0.13%   [kernel.kallsyms]  do_numa_page 
  0.85%    0.14%   [kernel.kallsyms]  __mem_cgroup_commit_charge 
  0.70%    0.12%   [kernel.kallsyms]  mem_cgroup_page_lruvec 
  0.66%    0.73%           libjvm.so  JVM_GetCallerClass 
  0.64%    0.35%   [kernel.kallsyms]  handle_mm_fault 
  0.33%    0.34%   [kernel.kallsyms]  __alloc_pages_nodemask 
  0.26%    0.17%   [kernel.kallsyms]  _raw_spin_lock 
  0.26%    0.35%   [kernel.kallsyms]  next_zones_zonelist 
  0.24%    0.13%   [kernel.kallsyms]  __do_page_fault 
  0.22%    0.20%   [kernel.kallsyms]  __pagevec_lru_add_fn 
  0.21%    0.16%   [kernel.kallsyms]  __zone_watermark_ok 
  6.16%    3.98%  <...other 222 warm methods...>
....................................................................................................
100.00%   99.50%  <totals>

....[Distribution by Source]........................................................................
 73.28%   89.54%         C2, level 4
 25.07%    8.76%   [kernel.kallsyms]
  0.86%    1.03%           libjvm.so
  0.37%    0.39%        libc-2.17.so
  0.10%    0.03%      hsdis-amd64.so
  0.08%    0.11%              [ext4]
  0.07%    0.03%              [jbd2]
  0.06%    0.07%  libpthread-2.17.so
  0.05%    0.02%         interpreter
  0.01%                    libzip.so
  0.01%    0.01%         C1, level 3
  0.01%                        [kvm]
  0.01%                     [bridge]
....................................................................................................
100.00%  100.00%  <totals>



# Run complete. Total time: 00:01:07

Benchmark                                  (numEntries)  Mode  Cnt   Score    Error  Units
BenchmarkBloom1FilterProbe.testProbe              10000  avgt   10  49.811 ±  7.738  ns/op
BenchmarkBloom1FilterProbe.testProbe:·asm         10000  avgt          NaN             ---
BenchmarkBloom1FilterProbe.testProbe           10000000  avgt   10  49.484 ± 10.427  ns/op
BenchmarkBloom1FilterProbe.testProbe:·asm      10000000  avgt          NaN             ---
