# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: -XX:AllocatePrefetchStyle=2
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe
# Parameters: (blockSize = 1, numEntries = 10000)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 64.914 ns/op
# Warmup Iteration   2: 63.238 ns/op
# Warmup Iteration   3: 67.312 ns/op
# Warmup Iteration   4: 62.364 ns/op
# Warmup Iteration   5: 62.170 ns/op
Iteration   1: 64.132 ns/op
Iteration   2: 65.258 ns/op
Iteration   3: 62.936 ns/op
Iteration   4: 62.221 ns/op
Iteration   5: 65.055 ns/op
Iteration   6: 62.656 ns/op
Iteration   7: 61.847 ns/op
Iteration   8: 61.607 ns/op
Iteration   9: 56.490 ns/op
Iteration  10: 54.473 ns/op
# Processing profiler results: LinuxPerfAsmProfiler LinuxPerfProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe":
  61.668 ±(99.9%) 5.332 ns/op [Average]
  (min, avg, max) = (54.473, 61.668, 65.258), stdev = 3.527
  CI (99.9%): [56.336, 66.999] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·asm":
PrintAssembly processed: 189838 total address lines.
Perf output processed (skipped 13.197 seconds):
 Column 1: cycles (1921 events)
 Column 2: instructions (7124 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 629 (479 bytes) 

                             0x00007f33ad4a080c: dec    %r11d
                             0x00007f33ad4a080f: cmp    %r8d,%r11d
                             0x00007f33ad4a0812: jae    0x00007f33ad4a0b0d  ;*aload_1
                                                                           ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
                             0x00007f33ad4a0818: lea    (%r12,%rbx,8),%rsi  ;*getfield probeArray
                                                                           ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@1 (line 74)
                             0x00007f33ad4a081c: xor    %edi,%edi
                  ╭          0x00007f33ad4a081e: jmp    0x00007f33ad4a0842  ;*invokevirtual testBytes
                  │                                                        ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                  │                                                        ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  4.11%    3.27%  │ ↗   ↗↗   0x00007f33ad4a0820: mov    0xc(%rsp),%edi
  3.80%    3.12%  │ │   ││   0x00007f33ad4a0824: inc    %edi               ;*iinc
                  │ │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@31 (line 74)
  0.31%    0.07%  │ │   ││   0x00007f33ad4a0826: cmp    0x8(%rsp),%edi
                  │╭│   ││   0x00007f33ad4a082a: jge    0x00007f33ad4a0a01  ;*if_icmpge
                  │││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@12 (line 74)
  0.36%    0.14%  │││   ││   0x00007f33ad4a0830: mov    (%rsp),%rax
  0.31%    0.20%  │││   ││   0x00007f33ad4a0834: mov    0x28(%rsp),%ebx
  0.16%    0.01%  │││   ││   0x00007f33ad4a0838: mov    0x8(%rsp),%r8d
           0.04%  │││   ││   0x00007f33ad4a083d: mov    0x10(%rsp),%rsi    ;*aload_1
                  │││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
  0.31%    0.14%  ↘││   ││   0x00007f33ad4a0842: mov    0x10(%rsi,%rdi,4),%r10d  ;*iaload
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@17 (line 74)
  3.07%    0.22%   ││   ││   0x00007f33ad4a0847: mov    0x18(%rax),%r9d    ;*getfield bf
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
  0.10%    0.01%   ││   ││   0x00007f33ad4a084b: movslq %r10d,%r11         ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@26 (line 75)
  0.42%    0.04%   ││   ││   0x00007f33ad4a084e: test   %r9d,%r9d
                   ││   ││   0x00007f33ad4a0851: je     0x00007f33ad4a0a75  ;*invokevirtual testLong
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.05%    0.04%   ││   ││   0x00007f33ad4a0857: mov    $0x5886687b8,%rcx  ;   {oop(a &apos;java/lang/Class&apos; = &apos;com/github/prasanthj/bloomfilter/BloomKFilter&apos;)}
  0.16%    0.14%   ││   ││   0x00007f33ad4a0861: mov    0x6c(%rcx),%r13d   ;*getstatic BYTE_ARRAY_8
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.21%    0.11%   ││   ││   0x00007f33ad4a0865: movsbl %r10b,%ecx         ;*i2b  ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@8 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.42%    0.03%   ││   ││   0x00007f33ad4a0869: mov    0xc(%r12,%r13,8),%edx  ; implicit exception: dispatches to 0x00007f33ad4a0b71
  0.47%    0.06%   ││   ││   0x00007f33ad4a086e: cmp    $0x7,%edx
                   ││   ││   0x00007f33ad4a0871: jbe    0x00007f33ad4a0a9d
  0.05%    0.07%   ││   ││   0x00007f33ad4a0877: mov    %edi,0xc(%rsp)
  0.21%    0.04%   ││   ││   0x00007f33ad4a087b: mov    %rsi,0x10(%rsp)
  0.05%    0.01%   ││   ││   0x00007f33ad4a0880: mov    %r8d,0x8(%rsp)
  0.05%    0.07%   ││   ││   0x00007f33ad4a0885: mov    %ebx,0x28(%rsp)
  0.36%    0.17%   ││   ││   0x00007f33ad4a0889: mov    %rax,(%rsp)
  0.42%    0.06%   ││   ││   0x00007f33ad4a088d: mov    %r10b,0x10(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@9 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.78%    0.13%   ││   ││   0x00007f33ad4a0892: lea    (%r12,%r9,8),%rbp  ;*getfield bf
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
  0.10%    0.36%   ││   ││   0x00007f33ad4a0896: mov    %r9d,0x18(%rsp)
  0.31%    0.60%   ││   ││   0x00007f33ad4a089b: lea    (%r12,%r13,8),%rsi  ;*getstatic BYTE_ARRAY_8
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.06%   ││   ││   0x00007f33ad4a089f: mov    %r11,%r8
  0.31%    0.11%   ││   ││   0x00007f33ad4a08a2: sar    $0x38,%r8
  0.10%    0.18%   ││   ││   0x00007f33ad4a08a6: mov    %r11,%r10
  0.26%    0.45%   ││   ││   0x00007f33ad4a08a9: sar    $0x30,%r10
           0.03%   ││   ││   0x00007f33ad4a08ad: mov    %r8d,%r8d
  0.47%    0.45%   ││   ││   0x00007f33ad4a08b0: mov    %r10d,%r10d
  0.47%    0.46%   ││   ││   0x00007f33ad4a08b3: mov    %r11,%rcx
  0.26%    0.52%   ││   ││   0x00007f33ad4a08b6: sar    $0x28,%rcx
           0.03%   ││   ││   0x00007f33ad4a08ba: mov    %r11,%r9
  0.10%    0.10%   ││   ││   0x00007f33ad4a08bd: sar    $0x20,%r9
  0.26%    0.55%   ││   ││   0x00007f33ad4a08c1: mov    %ecx,%ecx
  0.21%    0.38%   ││   ││   0x00007f33ad4a08c3: mov    %r9d,%r9d
                   ││   ││   0x00007f33ad4a08c6: mov    %r11,%rdi
  0.31%    0.11%   ││   ││   0x00007f33ad4a08c9: sar    $0x18,%rdi
  0.10%    0.36%   ││   ││   0x00007f33ad4a08cd: mov    %r11,%rbx
  0.26%    0.60%   ││   ││   0x00007f33ad4a08d0: sar    $0x10,%rbx
           0.01%   ││   ││   0x00007f33ad4a08d4: mov    %edi,%edi
  0.10%    0.07%   ││   ││   0x00007f33ad4a08d6: mov    %ebx,%ebx
  0.10%    0.15%   ││   ││   0x00007f33ad4a08d8: sar    $0x8,%r11
  0.36%    0.24%   ││   ││   0x00007f33ad4a08dc: mov    %r11d,%r11d
                   ││   ││   0x00007f33ad4a08df: mov    %r11b,0x11(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@20 (line 253)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.36%    0.22%   ││   ││   0x00007f33ad4a08e4: mov    %bl,0x12(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@31 (line 254)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.16%    0.55%   ││   ││   0x00007f33ad4a08e9: mov    %dil,0x13(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@42 (line 255)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.26%    0.17%   ││   ││   0x00007f33ad4a08ee: mov    %r9b,0x14(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@53 (line 256)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.16%    0.66%   ││   ││   0x00007f33ad4a08f3: mov    %cl,0x15(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@64 (line 257)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.73%    0.32%   ││   ││   0x00007f33ad4a08f8: mov    %r10b,0x16(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@76 (line 258)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.47%    0.31%   ││   ││   0x00007f33ad4a08fd: mov    %r8b,0x17(%r12,%r13,8)  ;*synchronization entry
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.42%    0.60%   ││   ││   0x00007f33ad4a0902: xor    %ecx,%ecx
  0.36%    0.70%   ││   ││   0x00007f33ad4a0904: xchg   %ax,%ax
                   ││   ││   0x00007f33ad4a0907: callq  0x00007f33ad046160  ; OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=NarrowOop [40]=NarrowOop off=332}
                   ││   ││                                                 ;*invokestatic hash64
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   ││   ││                                                 ;   {static_call}
  0.05%    0.17%   ││   ││   0x00007f33ad4a090c: mov    0x18(%rsp),%r11d
           0.34%   ││   ││   0x00007f33ad4a0911: mov    0x28(%r12,%r11,8),%r10d  ;*getfield totalBlockCount
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@37 (line 198)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.21%    0.29%   ││   ││   0x00007f33ad4a0916: mov    %eax,%r13d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@6 (line 187)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.05%    0.10%   ││   ││   0x00007f33ad4a0919: shr    $0x20,%rax
  0.16%    0.35%   ││   ││   0x00007f33ad4a091d: mov    %eax,%r14d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@13 (line 188)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.01%   ││   ││   0x00007f33ad4a0920: mov    %r13d,%eax
  0.68%    1.18%   ││   ││   0x00007f33ad4a0923: add    %r14d,%eax         ;*iadd
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@20 (line 190)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.05%    0.13%   ││   ││   0x00007f33ad4a0926: mov    %eax,%r9d
  0.16%    0.51%   ││   ││   0x00007f33ad4a0929: not    %r9d
  0.73%    1.15%   ││   ││   0x00007f33ad4a092c: test   %eax,%eax
  0.10%    0.42%   ││   ││   0x00007f33ad4a092e: cmovl  %r9d,%eax          ;*iload
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@34 (line 198)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  1.82%    3.28%   ││   ││   0x00007f33ad4a0932: test   %r10d,%r10d
                   ││   ││   0x00007f33ad4a0935: je     0x00007f33ad4a0a89  ;*irem
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@40 (line 198)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   ││   ││   0x00007f33ad4a093b: mov    0xc(%r12,%r11,8),%ebp  ;*getfield k
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@58 (line 200)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.03%   ││   ││   0x00007f33ad4a0940: cmp    $0x1,%ebp
                   │╰   ││   0x00007f33ad4a0943: jl     0x00007f33ad4a0820  ;*if_icmpgt
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.05%    0.08%   │    ││   0x00007f33ad4a0949: mov    0x34(%r12,%r11,8),%r9d  ;*getfield bitSet
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@123 (line 210)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.47%    1.61%   │    ││   0x00007f33ad4a094e: cmp    $0x80000000,%eax
                   │ ╭  ││   0x00007f33ad4a0953: jne    0x00007f33ad4a095d
                   │ │  ││   0x00007f33ad4a0955: xor    %edx,%edx
                   │ │  ││   0x00007f33ad4a0957: cmp    $0xffffffffffffffff,%r10d
                   │ │╭ ││   0x00007f33ad4a095b: je     0x00007f33ad4a0961
           0.04%   │ ↘│ ││   0x00007f33ad4a095d: cltd   
  0.10%    0.04%   │  │ ││   0x00007f33ad4a095e: idiv   %r10d
 15.83%   18.46%   │  ↘ ││   0x00007f33ad4a0961: imul   0x30(%r12,%r11,8),%edx  ;*imul
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@49 (line 199)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  2.76%    0.03%   │    ││   0x00007f33ad4a0967: mov    0xc(%r12,%r9,8),%r9d  ;*getfield data
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@126 (line 210)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │    ││                                                 ; implicit exception: dispatches to 0x00007f33ad4a0b36
                   │    ││   0x00007f33ad4a096c: mov    0xc(%r12,%r9,8),%eax  ;*laload
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │    ││                                                 ; implicit exception: dispatches to 0x00007f33ad4a0b36
                   │    ││   0x00007f33ad4a0971: cmp    $0x7ffffffe,%ebp
                   │    ││   0x00007f33ad4a0977: jg     0x00007f33ad4a0ad1
                   │    ││   0x00007f33ad4a097d: vmovd  %r11d,%xmm1
  0.78%            │    ││   0x00007f33ad4a0982: mov    0x2c(%r12,%r11,8),%r8d
                   │    ││   0x00007f33ad4a0987: lea    (%r12,%r9,8),%r10
                   │    ││   0x00007f33ad4a098b: dec    %r8d
                   │    ││   0x00007f33ad4a098e: movslq %edx,%r11
  0.68%    0.01%   │    ││   0x00007f33ad4a0991: mov    $0x1,%edi
                   │    ││   0x00007f33ad4a0996: mov    %r13d,0x18(%rsp)
                   │    ││   0x00007f33ad4a099b: nopl   0x0(%rax,%rax,1)   ;*iload
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@64 (line 201)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.21%            │    ││↗  0x00007f33ad4a09a0: mov    %edi,%r13d
  0.99%            │    │││  0x00007f33ad4a09a3: inc    %r13d              ;*iadd
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@69 (line 201)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.31%    0.15%   │    │││  0x00007f33ad4a09a6: mov    %r13d,%ebx
  0.16%    0.04%   │    │││  0x00007f33ad4a09a9: imul   %r14d,%ebx
  0.94%    0.18%   │    │││  0x00007f33ad4a09ad: add    0x18(%rsp),%ebx    ;*iadd
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@73 (line 201)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  2.08%    0.22%   │    │││  0x00007f33ad4a09b1: mov    %ebx,%esi
  0.10%    0.04%   │    │││  0x00007f33ad4a09b3: not    %esi
  0.83%    0.17%   │    │││  0x00007f33ad4a09b5: test   %ebx,%ebx
           0.03%   │    │││  0x00007f33ad4a09b7: cmovl  %esi,%ebx
  1.93%    0.07%   │    │││  0x00007f33ad4a09ba: mov    %r8d,%esi
  0.10%    0.20%   │    │││  0x00007f33ad4a09bd: and    %ebx,%esi          ;*iand
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@95 (line 206)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.52%            │    │││  0x00007f33ad4a09bf: mov    %esi,%ebx
  0.73%            │    │││  0x00007f33ad4a09c1: and    $0xffffffffffffffc0,%ebx
  0.26%    0.13%   │    │││  0x00007f33ad4a09c4: mov    %esi,%ecx
  0.21%    0.15%   │    │││  0x00007f33ad4a09c6: sub    %ebx,%ecx          ;*isub
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@119 (line 209)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.31%    0.07%   │    │││  0x00007f33ad4a09c8: shr    $0x6,%esi          ;*iushr
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@102 (line 207)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.94%            │    │││  0x00007f33ad4a09cb: mov    %esi,%ebx
  0.21%    0.03%   │    │││  0x00007f33ad4a09cd: add    %edx,%ebx          ;*iadd
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@109 (line 208)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.52%    0.49%   │    │││  0x00007f33ad4a09cf: cmp    %eax,%ebx
                   │   ╭│││  0x00007f33ad4a09d1: jae    0x00007f33ad4a0a0d  ;*laload
                   │   ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                   │   ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.47%    0.45%   │   ││││  0x00007f33ad4a09d3: mov    $0x1,%ebx
  0.57%            │   ││││  0x00007f33ad4a09d8: shl    %cl,%rbx
  0.83%    1.05%   │   ││││  0x00007f33ad4a09db: movslq %esi,%rcx
           0.14%   │   ││││  0x00007f33ad4a09de: mov    %r11,%rdi
  0.73%            │   ││││  0x00007f33ad4a09e1: add    %rcx,%rdi
           0.03%   │   ││││  0x00007f33ad4a09e4: test   %rbx,0x10(%r10,%rdi,8)
                   │   │╰││  0x00007f33ad4a09e9: je     0x00007f33ad4a0820  ;*ifne
                   │   │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@143 (line 211)
                   │   │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   │ ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  4.16%    3.37%   │   │ ││  0x00007f33ad4a09ef: mov    %ebp,%ebx
  2.34%    3.52%   │   │ ││  0x00007f33ad4a09f1: inc    %ebx
  0.83%    0.88%   │   │ ││  0x00007f33ad4a09f3: cmp    %ebx,%r13d
                   │   │ ╰│  0x00007f33ad4a09f6: jge    0x00007f33ad4a0820  ;*if_icmpgt
                   │   │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                   │   │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.42%    0.24%   │   │  │  0x00007f33ad4a09fc: mov    %r13d,%edi
  0.05%    0.10%   │   │  ╰  0x00007f33ad4a09ff: jmp    0x00007f33ad4a09a0  ;*if_icmpge
                   │   │                                                   ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@12 (line 74)
                   ↘   │     0x00007f33ad4a0a01: add    $0x40,%rsp
                       │     0x00007f33ad4a0a05: pop    %rbp
                       │     0x00007f33ad4a0a06: test   %eax,0x18cb75f4(%rip)        # 0x00007f33c6158000
                       │                                                   ;   {poll_return}
                       │     0x00007f33ad4a0a0c: retq   
                       ↘     0x00007f33ad4a0a0d: mov    $0xffffffe4,%esi
                             0x00007f33ad4a0a12: mov    (%rsp),%rbp
                             0x00007f33ad4a0a16: mov    %rax,-0x8(%rsp)
                             0x00007f33ad4a0a1b: mov    0x8(%rsp),%eax
....................................................................................................
 69.65%   57.58%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 591 (300 bytes) 

                     Decoding compiled method 0x00007f33ad488d10:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007f3317e4c6f0} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  0.52%    1.19%       0x00007f33ad488ea0: mov    %eax,-0x14000(%rsp)
  0.10%    0.67%       0x00007f33ad488ea7: push   %rbp
  0.21%    0.38%       0x00007f33ad488ea8: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  0.31%    0.93%       0x00007f33ad488eac: mov    %edx,0x8(%rsp)
  0.21%    0.39%       0x00007f33ad488eb0: mov    %edx,%ebx
  0.31%    0.15%       0x00007f33ad488eb2: sar    $0x3,%ebx          ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  0.10%    0.44%       0x00007f33ad488eb5: movslq %ecx,%r14          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
  0.31%    0.53%       0x00007f33ad488eb8: mov    $0x87c37b91114253d5,%rdi
  0.05%    0.04%       0x00007f33ad488ec2: test   %ebx,%ebx
                  ╭    0x00007f33ad488ec4: jle    0x00007f33ad488fac  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.42%    0.44%  │    0x00007f33ad488eca: mov    0xc(%rsi),%r10d    ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007f33ad489311
  0.21%    0.36%  │    0x00007f33ad488ece: xor    %r9d,%r9d
  0.21%    0.49%  │    0x00007f33ad488ed1: xor    %r8d,%r8d
  0.26%    0.18%  │    0x00007f33ad488ed4: nopl   0x0(%rax,%rax,1)
  0.16%    0.20%  │    0x00007f33ad488edc: xchg   %ax,%ax            ;*iload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  0.36%    0.60%  │ ↗  0x00007f33ad488ee0: cmp    %r10d,%r9d
                  │ │  0x00007f33ad488ee3: jae    0x00007f33ad48915e  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
  0.16%    0.42%  │ │  0x00007f33ad488ee9: movzbq 0x10(%rsi,%r9,1),%rcx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.05%    0.08%  │ │  0x00007f33ad488eef: mov    %r9d,%r11d
  0.16%    0.06%  │ │  0x00007f33ad488ef2: add    $0x7,%r11d
  0.31%    0.42%  │ │  0x00007f33ad488ef6: cmp    %r10d,%r11d
                  │ │  0x00007f33ad488ef9: jae    0x00007f33ad489191  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
  0.31%    0.24%  │ │  0x00007f33ad488eff: mov    %rcx,(%rsp)
  0.21%    0.11%  │ │  0x00007f33ad488f03: movslq %r9d,%r11          ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
  0.16%    0.39%  │ │  0x00007f33ad488f06: movzbq 0x11(%rsi,%r11,1),%r9
  0.16%    0.48%  │ │  0x00007f33ad488f0c: movzbq 0x17(%rsi,%r11,1),%rcx
  0.10%    0.48%  │ │  0x00007f33ad488f12: movzbq 0x12(%rsi,%r11,1),%rdx
           0.15%  │ │  0x00007f33ad488f18: movzbq 0x13(%rsi,%r11,1),%rax
  0.21%    0.53%  │ │  0x00007f33ad488f1e: movzbq 0x14(%rsi,%r11,1),%rbp
  0.26%    0.60%  │ │  0x00007f33ad488f24: movzbq 0x15(%rsi,%r11,1),%r13
  0.31%    0.56%  │ │  0x00007f33ad488f2a: movzbq 0x16(%rsi,%r11,1),%r11
  0.05%    0.22%  │ │  0x00007f33ad488f30: shl    $0x8,%r9
  0.16%    0.42%  │ │  0x00007f33ad488f34: or     (%rsp),%r9
  0.16%    0.46%  │ │  0x00007f33ad488f38: shl    $0x30,%r11
  0.36%    0.51%  │ │  0x00007f33ad488f3c: shl    $0x28,%r13
  0.05%    0.15%  │ │  0x00007f33ad488f40: shl    $0x20,%rbp
  0.26%    0.42%  │ │  0x00007f33ad488f44: shl    $0x18,%rax
  0.16%    0.58%  │ │  0x00007f33ad488f48: shl    $0x10,%rdx
  0.16%    0.53%  │ │  0x00007f33ad488f4c: or     %rdx,%r9
  0.10%    0.08%  │ │  0x00007f33ad488f4f: or     %rax,%r9
  0.05%    0.38%  │ │  0x00007f33ad488f52: or     %rbp,%r9
  0.16%    0.56%  │ │  0x00007f33ad488f55: or     %r13,%r9
  0.26%    0.49%  │ │  0x00007f33ad488f58: or     %r11,%r9
           0.04%  │ │  0x00007f33ad488f5b: shl    $0x38,%rcx
  0.31%    0.48%  │ │  0x00007f33ad488f5f: or     %rcx,%r9
  0.16%    0.60%  │ │  0x00007f33ad488f62: imul   %rdi,%r9           ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.62%    0.97%  │ │  0x00007f33ad488f66: rol    $0x1f,%r9
  0.57%    0.41%  │ │  0x00007f33ad488f6a: mov    $0x4cf5ad432745937f,%r11
           0.06%  │ │  0x00007f33ad488f74: imul   %r11,%r9
  1.67%    1.68%  │ │  0x00007f33ad488f78: xor    %r14,%r9           ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.36%    0.81%  │ │  0x00007f33ad488f7b: rol    $0x1b,%r9          ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.57%    1.02%  │ │  0x00007f33ad488f7f: mov    %r9,%r14
           0.03%  │ │  0x00007f33ad488f82: shl    $0x2,%r14
  0.57%    1.05%  │ │  0x00007f33ad488f86: add    %r9,%r14
  0.47%    1.59%  │ │  0x00007f33ad488f89: add    $0x52dce729,%r14   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.68%    1.21%  │ │  0x00007f33ad488f90: mov    %r8d,%ecx
                  │ │  0x00007f33ad488f93: inc    %ecx               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
  0.05%    0.03%  │ │  0x00007f33ad488f95: cmp    %ebx,%ecx
                  │╭│  0x00007f33ad488f97: jge    0x00007f33ad488fac  ;*if_icmpge
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │││  0x00007f33ad488f99: shl    $0x3,%r8d
                  │││  0x00007f33ad488f9d: mov    %r8d,%r9d
                  │││  0x00007f33ad488fa0: add    $0x8,%r9d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007f33ad488fa4: mov    %ecx,%r8d
                  ││╰  0x00007f33ad488fa7: jmpq   0x00007f33ad488ee0  ;*if_icmpge
                  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.10%    0.11%  ↘↘   0x00007f33ad488fac: mov    0x8(%rsp),%r8d
  0.47%    0.98%       0x00007f33ad488fb1: and    $0xfffffffffffffff8,%r8d  ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
           0.07%       0x00007f33ad488fb5: mov    0x8(%rsp),%r10d
  0.10%    0.11%       0x00007f33ad488fba: sub    %r8d,%r10d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
  0.21%    0.31%       0x00007f33ad488fbd: movslq %r8d,%r9           ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.36%    0.91%       0x00007f33ad488fc0: xor    %ecx,%ecx
           0.03%       0x00007f33ad488fc2: cmp    $0x4,%r10d
                       0x00007f33ad488fc6: je     0x00007f33ad48906d
  0.05%    0.10%       0x00007f33ad488fcc: cmp    $0x4,%r10d
                       0x00007f33ad488fd0: jle    0x00007f33ad488fed
                       0x00007f33ad488fd2: cmp    $0x7,%r10d
                       0x00007f33ad488fd6: je     0x00007f33ad489010
                       0x00007f33ad488fd8: cmp    $0x7,%r10d
                       0x00007f33ad488fdc: jg     0x00007f33ad489110
                       0x00007f33ad488fe2: cmp    $0x6,%r10d
                       0x00007f33ad488fe6: je     0x00007f33ad48902d
                       0x00007f33ad488fe8: xor    %r11d,%r11d
                       0x00007f33ad488feb: jmp    0x00007f33ad48904d
  0.21%    0.22%       0x00007f33ad488fed: cmp    $0x2,%r10d
....................................................................................................
 15.41%   28.96%  <total for region 2>

....[Hottest Regions]...............................................................................
 69.65%   57.58%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 629 (479 bytes) 
 15.41%   28.96%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 591 (300 bytes) 
  7.18%    7.86%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 591 (77 bytes) 
  3.23%    0.52%   [kernel.kallsyms]  native_write_msr_safe (0 bytes) 
  1.15%    1.64%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 591 (30 bytes) 
  0.21%            [kernel.kallsyms]  system_call (38 bytes) 
  0.16%    0.03%   [kernel.kallsyms]  mutex_unlock (0 bytes) 
  0.10%    0.04%   [kernel.kallsyms]  do_sync_write (7 bytes) 
  0.10%            [kernel.kallsyms]  timerqueue_add (22 bytes) 
  0.10%            [kernel.kallsyms]  page_fault (0 bytes) 
  0.05%            [kernel.kallsyms]  mutex_spin_on_owner (0 bytes) 
  0.05%    0.01%   [kernel.kallsyms]  __hrtimer_run_queues (22 bytes) 
  0.05%            [kernel.kallsyms]  __hrtimer_run_queues (0 bytes) 
  0.05%    0.01%   [kernel.kallsyms]  __srcu_read_unlock (0 bytes) 
  0.05%            [kernel.kallsyms]  account_process_tick (0 bytes) 
  0.05%            [kernel.kallsyms]  task_tick_fair (0 bytes) 
  0.05%    0.03%   [kernel.kallsyms]  ktime_get (28 bytes) 
  0.05%            [kernel.kallsyms]  ktime_get_update_offsets_now (0 bytes) 
  0.05%            [kernel.kallsyms]  __audit_syscall_entry (0 bytes) 
  0.05%    0.03%   [kernel.kallsyms]  __audit_syscall_entry (2 bytes) 
  2.19%    3.27%  <...other 172 warm regions...>
....................................................................................................
100.00%   99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 69.65%   57.58%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 629 
 23.74%   38.46%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 591 
  3.23%    0.52%   [kernel.kallsyms]  native_write_msr_safe 
  0.36%    0.60%           libjvm.so  [unknown] 
  0.21%            [kernel.kallsyms]  system_call 
  0.16%    0.03%   [kernel.kallsyms]  mutex_unlock 
  0.10%    0.04%   [kernel.kallsyms]  __audit_syscall_entry 
  0.10%    0.15%        libc-2.17.so  vfprintf 
  0.10%    0.01%   [kernel.kallsyms]  __hrtimer_run_queues 
  0.10%    0.01%      hsdis-amd64.so  print_insn 
  0.10%    0.04%   [kernel.kallsyms]  do_sync_write 
  0.10%    0.01%   [kernel.kallsyms]  timerqueue_add 
  0.10%    0.01%   [kernel.kallsyms]  pipe_write 
  0.10%            [kernel.kallsyms]  page_fault 
  0.05%    0.01%   [kernel.kallsyms]  ktime_get_update_offsets_now 
  0.05%           libpthread-2.17.so  __pthread_disable_asynccancel 
  0.05%                  interpreter  invoke return entry points  
  0.05%               hsdis-amd64.so  oappend 
  0.05%            [kernel.kallsyms]  __generic_file_aio_write 
  0.05%    0.07%   [kernel.kallsyms]  selinux_file_permission 
  1.51%    0.45%  <...other 29 warm methods...>
....................................................................................................
100.00%   98.02%  <totals>

....[Distribution by Source]........................................................................
 93.39%   96.04%         C2, level 4
  5.41%    2.62%   [kernel.kallsyms]
  0.47%    0.55%        libc-2.17.so
  0.36%    0.60%           libjvm.so
  0.16%    0.03%      hsdis-amd64.so
  0.10%    0.03%  libpthread-2.17.so
  0.05%    0.03%              [jbd2]
  0.05%    0.01%         interpreter
....................................................................................................
100.00%   99.99%  <totals>


Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·perf":
Perf stats:
--------------------------------------------------

      20674.662075      task-clock (msec)         #    0.800 CPUs utilized          
             1,577      context-switches          #    0.076 K/sec                  
               842      cpu-migrations            #    0.041 K/sec                  
            89,825      page-faults               #    0.004 M/sec                  
    40,829,852,452      cycles                    #    1.975 GHz                      (84.04%)
    10,436,922,761      stalled-cycles-frontend   #   25.56% frontend cycles idle     (84.04%)
   <not supported>      stalled-cycles-backend   
    76,109,223,994      instructions              #    1.86  insns per cycle        
                                                  #    0.14  stalled cycles per insn  (84.07%)
     7,970,971,221      branches                  #  385.543 M/sec                    (70.40%)
       281,592,063      branch-misses             #    3.53% of all branches          (31.62%)
    12,136,615,205      L1-dcache-loads           #  587.028 M/sec                    (5.25%)
        72,614,390      L1-dcache-load-misses     #    0.60% of all L1-dcache hits    (2.81%)
        12,719,493      LLC-loads                 #    0.615 M/sec                    (2.80%)
         4,497,670      LLC-load-misses           #   35.36% of all LL-cache hits     (4.20%)
   <not supported>      L1-icache-loads          
        59,854,837      L1-icache-load-misses     #    2.895 M/sec                    (5.59%)
    11,776,114,273      dTLB-loads                #  569.592 M/sec                    (5.41%)
         7,363,433      dTLB-load-misses          #    0.06% of all dTLB cache hits   (2.78%)
         1,752,290      iTLB-loads                #    0.085 M/sec                    (2.77%)
           558,144      iTLB-load-misses          #   31.85% of all iTLB cache hits   (4.17%)
   <not supported>      L1-dcache-prefetches     
        20,465,154      L1-dcache-prefetch-misses #    0.990 M/sec                    (5.56%)

      25.830967108 seconds time elapsed



# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: -XX:AllocatePrefetchStyle=2
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe
# Parameters: (blockSize = 1, numEntries = 10000000)

# Run progress: 12.50% complete, ETA 00:03:18
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 100.403 ns/op
# Warmup Iteration   2: 89.503 ns/op
# Warmup Iteration   3: 88.434 ns/op
# Warmup Iteration   4: 88.043 ns/op
# Warmup Iteration   5: 87.771 ns/op
Iteration   1: 90.177 ns/op
Iteration   2: 87.346 ns/op
Iteration   3: 91.239 ns/op
Iteration   4: 88.436 ns/op
Iteration   5: 90.063 ns/op
Iteration   6: 88.944 ns/op
Iteration   7: 89.392 ns/op
Iteration   8: 88.992 ns/op
Iteration   9: 87.085 ns/op
Iteration  10: 89.157 ns/op
# Processing profiler results: LinuxPerfAsmProfiler LinuxPerfProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe":
  89.083 ±(99.9%) 1.910 ns/op [Average]
  (min, avg, max) = (87.085, 89.083, 91.239), stdev = 1.263
  CI (99.9%): [87.173, 90.993] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·asm":
PrintAssembly processed: 189636 total address lines.
Perf output processed (skipped 16.799 seconds):
 Column 1: cycles (3864 events)
 Column 2: instructions (11297 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 631 (479 bytes) 

                             0x00007f42e14a2fcc: dec    %r11d
                             0x00007f42e14a2fcf: cmp    %r8d,%r11d
                             0x00007f42e14a2fd2: jae    0x00007f42e14a32cd  ;*aload_1
                                                                           ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
                             0x00007f42e14a2fd8: lea    (%r12,%rbx,8),%rsi  ;*getfield probeArray
                                                                           ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@1 (line 74)
                             0x00007f42e14a2fdc: xor    %edi,%edi
                  ╭          0x00007f42e14a2fde: jmp    0x00007f42e14a3002  ;*invokevirtual testBytes
                  │                                                        ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                  │                                                        ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
 19.31%   10.76%  │ ↗   ↗↗   0x00007f42e14a2fe0: mov    0xc(%rsp),%edi
  2.36%    1.49%  │ │   ││   0x00007f42e14a2fe4: inc    %edi               ;*iinc
                  │ │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@31 (line 74)
  0.21%    0.17%  │ │   ││   0x00007f42e14a2fe6: cmp    0x8(%rsp),%edi
                  │╭│   ││   0x00007f42e14a2fea: jge    0x00007f42e14a31c1  ;*if_icmpge
                  │││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@12 (line 74)
  0.26%    0.05%  │││   ││   0x00007f42e14a2ff0: mov    (%rsp),%rax
  0.36%    0.10%  │││   ││   0x00007f42e14a2ff4: mov    0x28(%rsp),%ebx
           0.02%  │││   ││   0x00007f42e14a2ff8: mov    0x8(%rsp),%r8d
                  │││   ││   0x00007f42e14a2ffd: mov    0x10(%rsp),%rsi    ;*aload_1
                  │││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
  0.36%    0.03%  ↘││   ││   0x00007f42e14a3002: mov    0x10(%rsi,%rdi,4),%r10d  ;*iaload
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@17 (line 74)
  2.28%    0.19%   ││   ││   0x00007f42e14a3007: mov    0x18(%rax),%r9d    ;*getfield bf
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
  0.03%    0.03%   ││   ││   0x00007f42e14a300b: movslq %r10d,%r11         ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@26 (line 75)
  0.16%    0.06%   ││   ││   0x00007f42e14a300e: test   %r9d,%r9d
                   ││   ││   0x00007f42e14a3011: je     0x00007f42e14a3235  ;*invokevirtual testLong
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.03%            ││   ││   0x00007f42e14a3017: mov    $0x5886687b8,%rcx  ;   {oop(a &apos;java/lang/Class&apos; = &apos;com/github/prasanthj/bloomfilter/BloomKFilter&apos;)}
  0.18%    0.08%   ││   ││   0x00007f42e14a3021: mov    0x6c(%rcx),%r13d   ;*getstatic BYTE_ARRAY_8
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.02%   ││   ││   0x00007f42e14a3025: movsbl %r10b,%ecx         ;*i2b  ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@8 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.23%    0.01%   ││   ││   0x00007f42e14a3029: mov    0xc(%r12,%r13,8),%edx  ; implicit exception: dispatches to 0x00007f42e14a3331
  0.49%    0.01%   ││   ││   0x00007f42e14a302e: cmp    $0x7,%edx
                   ││   ││   0x00007f42e14a3031: jbe    0x00007f42e14a325d
  0.34%    0.06%   ││   ││   0x00007f42e14a3037: mov    %edi,0xc(%rsp)
  0.05%    0.05%   ││   ││   0x00007f42e14a303b: mov    %rsi,0x10(%rsp)
  0.05%            ││   ││   0x00007f42e14a3040: mov    %r8d,0x8(%rsp)
                   ││   ││   0x00007f42e14a3045: mov    %ebx,0x28(%rsp)
  0.49%    0.12%   ││   ││   0x00007f42e14a3049: mov    %rax,(%rsp)
  0.03%    0.05%   ││   ││   0x00007f42e14a304d: mov    %r10b,0x10(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@9 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.21%    0.15%   ││   ││   0x00007f42e14a3052: lea    (%r12,%r9,8),%rbp  ;*getfield bf
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
  0.36%    0.07%   ││   ││   0x00007f42e14a3056: mov    %r9d,0x18(%rsp)
           0.06%   ││   ││   0x00007f42e14a305b: lea    (%r12,%r13,8),%rsi  ;*getstatic BYTE_ARRAY_8
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.03%    0.02%   ││   ││   0x00007f42e14a305f: mov    %r11,%r8
  0.34%    0.07%   ││   ││   0x00007f42e14a3062: sar    $0x38,%r8
  0.39%    0.11%   ││   ││   0x00007f42e14a3066: mov    %r11,%r10
  0.03%    0.03%   ││   ││   0x00007f42e14a3069: sar    $0x30,%r10
  0.03%    0.02%   ││   ││   0x00007f42e14a306d: mov    %r8d,%r8d
  0.10%    0.47%   ││   ││   0x00007f42e14a3070: mov    %r10d,%r10d
  0.10%    0.30%   ││   ││   0x00007f42e14a3073: mov    %r11,%rcx
  0.10%    0.04%   ││   ││   0x00007f42e14a3076: sar    $0x28,%rcx
           0.03%   ││   ││   0x00007f42e14a307a: mov    %r11,%r9
  0.21%    0.22%   ││   ││   0x00007f42e14a307d: sar    $0x20,%r9
  0.23%    0.42%   ││   ││   0x00007f42e14a3081: mov    %ecx,%ecx
  0.08%    0.07%   ││   ││   0x00007f42e14a3083: mov    %r9d,%r9d
           0.02%   ││   ││   0x00007f42e14a3086: mov    %r11,%rdi
  0.13%    0.15%   ││   ││   0x00007f42e14a3089: sar    $0x18,%rdi
  0.36%    0.29%   ││   ││   0x00007f42e14a308d: mov    %r11,%rbx
  0.05%    0.12%   ││   ││   0x00007f42e14a3090: sar    $0x10,%rbx
           0.03%   ││   ││   0x00007f42e14a3094: mov    %edi,%edi
  0.21%    0.08%   ││   ││   0x00007f42e14a3096: mov    %ebx,%ebx
  0.26%    0.02%   ││   ││   0x00007f42e14a3098: sar    $0x8,%r11
  0.08%    0.04%   ││   ││   0x00007f42e14a309c: mov    %r11d,%r11d
  0.03%    0.01%   ││   ││   0x00007f42e14a309f: mov    %r11b,0x11(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@20 (line 253)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.62%    0.19%   ││   ││   0x00007f42e14a30a4: mov    %bl,0x12(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@31 (line 254)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.10%    0.01%   ││   ││   0x00007f42e14a30a9: mov    %dil,0x13(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@42 (line 255)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.54%    0.11%   ││   ││   0x00007f42e14a30ae: mov    %r9b,0x14(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@53 (line 256)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.03%    0.04%   ││   ││   0x00007f42e14a30b3: mov    %cl,0x15(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@64 (line 257)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.62%    0.23%   ││   ││   0x00007f42e14a30b8: mov    %r10b,0x16(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@76 (line 258)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.03%    0.04%   ││   ││   0x00007f42e14a30bd: mov    %r8b,0x17(%r12,%r13,8)  ;*synchronization entry
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.52%    0.62%   ││   ││   0x00007f42e14a30c2: xor    %ecx,%ecx
  0.03%    0.09%   ││   ││   0x00007f42e14a30c4: xchg   %ax,%ax
           0.03%   ││   ││   0x00007f42e14a30c7: callq  0x00007f42e1046160  ; OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=NarrowOop [40]=NarrowOop off=332}
                   ││   ││                                                 ;*invokestatic hash64
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   ││   ││                                                 ;   {static_call}
  0.08%    0.46%   ││   ││   0x00007f42e14a30cc: mov    0x18(%rsp),%r11d
  0.03%    0.01%   ││   ││   0x00007f42e14a30d1: mov    0x28(%r12,%r11,8),%r10d  ;*getfield totalBlockCount
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@37 (line 198)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.41%    0.44%   ││   ││   0x00007f42e14a30d6: mov    %eax,%r13d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@6 (line 187)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.21%    0.42%   ││   ││   0x00007f42e14a30d9: shr    $0x20,%rax
           0.01%   ││   ││   0x00007f42e14a30dd: mov    %eax,%r14d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@13 (line 188)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.03%   ││   ││   0x00007f42e14a30e0: mov    %r13d,%eax
  0.47%    1.17%   ││   ││   0x00007f42e14a30e3: add    %r14d,%eax         ;*iadd
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@20 (line 190)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.10%    0.50%   ││   ││   0x00007f42e14a30e6: mov    %eax,%r9d
           0.01%   ││   ││   0x00007f42e14a30e9: not    %r9d
  0.31%    1.17%   ││   ││   0x00007f42e14a30ec: test   %eax,%eax
  0.18%    0.57%   ││   ││   0x00007f42e14a30ee: cmovl  %r9d,%eax          ;*iload
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@34 (line 198)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.91%    3.01%   ││   ││   0x00007f42e14a30f2: test   %r10d,%r10d
                   ││   ││   0x00007f42e14a30f5: je     0x00007f42e14a3249  ;*irem
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@40 (line 198)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.03%   ││   ││   0x00007f42e14a30fb: mov    0xc(%r12,%r11,8),%ebp  ;*getfield k
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@58 (line 200)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.10%    0.06%   ││   ││   0x00007f42e14a3100: cmp    $0x1,%ebp
                   │╰   ││   0x00007f42e14a3103: jl     0x00007f42e14a2fe0  ;*if_icmpgt
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.23%    0.57%   │    ││   0x00007f42e14a3109: mov    0x34(%r12,%r11,8),%r9d  ;*getfield bitSet
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@123 (line 210)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.39%    0.90%   │    ││   0x00007f42e14a310e: cmp    $0x80000000,%eax
                   │ ╭  ││   0x00007f42e14a3113: jne    0x00007f42e14a311d
                   │ │  ││   0x00007f42e14a3115: xor    %edx,%edx
                   │ │  ││   0x00007f42e14a3117: cmp    $0xffffffffffffffff,%r10d
                   │ │╭ ││   0x00007f42e14a311b: je     0x00007f42e14a3121
           0.03%   │ ↘│ ││   0x00007f42e14a311d: cltd   
  0.05%    0.17%   │  │ ││   0x00007f42e14a311e: idiv   %r10d
  8.90%   11.53%   │  ↘ ││   0x00007f42e14a3121: imul   0x30(%r12,%r11,8),%edx  ;*imul
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@49 (line 199)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.93%    0.33%   │    ││   0x00007f42e14a3127: mov    0xc(%r12,%r9,8),%r9d  ;*getfield data
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@126 (line 210)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │    ││                                                 ; implicit exception: dispatches to 0x00007f42e14a32f6
  0.23%    0.67%   │    ││   0x00007f42e14a312c: mov    0xc(%r12,%r9,8),%eax  ;*laload
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │    ││                                                 ; implicit exception: dispatches to 0x00007f42e14a32f6
                   │    ││   0x00007f42e14a3131: cmp    $0x7ffffffe,%ebp
                   │    ││   0x00007f42e14a3137: jg     0x00007f42e14a3291
                   │    ││   0x00007f42e14a313d: vmovd  %r11d,%xmm1
  0.39%    0.08%   │    ││   0x00007f42e14a3142: mov    0x2c(%r12,%r11,8),%r8d
  0.21%    0.56%   │    ││   0x00007f42e14a3147: lea    (%r12,%r9,8),%r10
                   │    ││   0x00007f42e14a314b: dec    %r8d
                   │    ││   0x00007f42e14a314e: movslq %edx,%r11
  0.34%    0.08%   │    ││   0x00007f42e14a3151: mov    $0x1,%edi
  0.13%    1.12%   │    ││   0x00007f42e14a3156: mov    %r13d,0x18(%rsp)
                   │    ││   0x00007f42e14a315b: nopl   0x0(%rax,%rax,1)   ;*iload
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@64 (line 201)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.03%            │    ││↗  0x00007f42e14a3160: mov    %edi,%r13d
  0.23%    0.08%   │    │││  0x00007f42e14a3163: inc    %r13d              ;*iadd
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@69 (line 201)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.31%    0.69%   │    │││  0x00007f42e14a3166: mov    %r13d,%ebx
  0.16%    0.03%   │    │││  0x00007f42e14a3169: imul   %r14d,%ebx
  0.91%    0.22%   │    │││  0x00007f42e14a316d: add    0x18(%rsp),%ebx    ;*iadd
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@73 (line 201)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  1.40%    0.17%   │    │││  0x00007f42e14a3171: mov    %ebx,%esi
  0.16%    0.50%   │    │││  0x00007f42e14a3173: not    %esi
  0.41%    0.14%   │    │││  0x00007f42e14a3175: test   %ebx,%ebx
                   │    │││  0x00007f42e14a3177: cmovl  %esi,%ebx
  1.35%    0.56%   │    │││  0x00007f42e14a317a: mov    %r8d,%esi
  0.23%    0.12%   │    │││  0x00007f42e14a317d: and    %ebx,%esi          ;*iand
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@95 (line 206)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.26%            │    │││  0x00007f42e14a317f: mov    %esi,%ebx
  0.52%    0.03%   │    │││  0x00007f42e14a3181: and    $0xffffffffffffffc0,%ebx
  0.49%    0.49%   │    │││  0x00007f42e14a3184: mov    %esi,%ecx
  0.03%    0.11%   │    │││  0x00007f42e14a3186: sub    %ebx,%ecx          ;*isub
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@119 (line 209)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.41%    0.10%   │    │││  0x00007f42e14a3188: shr    $0x6,%esi          ;*iushr
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@102 (line 207)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.54%    0.04%   │    │││  0x00007f42e14a318b: mov    %esi,%ebx
  0.34%    0.47%   │    │││  0x00007f42e14a318d: add    %edx,%ebx          ;*iadd
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@109 (line 208)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.44%    0.29%   │    │││  0x00007f42e14a318f: cmp    %eax,%ebx
                   │   ╭│││  0x00007f42e14a3191: jae    0x00007f42e14a31cd  ;*laload
                   │   ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                   │   ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.26%    0.50%   │   ││││  0x00007f42e14a3193: mov    $0x1,%ebx
  0.47%    0.05%   │   ││││  0x00007f42e14a3198: shl    %cl,%rbx
  1.04%    1.24%   │   ││││  0x00007f42e14a319b: movslq %esi,%rcx
                   │   ││││  0x00007f42e14a319e: mov    %r11,%rdi
  0.52%    0.06%   │   ││││  0x00007f42e14a31a1: add    %rcx,%rdi
  0.13%    0.59%   │   ││││  0x00007f42e14a31a4: test   %rbx,0x10(%r10,%rdi,8)
  0.03%            │   │╰││  0x00007f42e14a31a9: je     0x00007f42e14a2fe0  ;*ifne
                   │   │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@143 (line 211)
                   │   │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   │ ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
 17.18%    9.51%   │   │ ││  0x00007f42e14a31af: mov    %ebp,%ebx
  1.55%    0.73%   │   │ ││  0x00007f42e14a31b1: inc    %ebx
  0.78%    0.48%   │   │ ││  0x00007f42e14a31b3: cmp    %ebx,%r13d
                   │   │ ╰│  0x00007f42e14a31b6: jge    0x00007f42e14a2fe0  ;*if_icmpgt
                   │   │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                   │   │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.28%    0.08%   │   │  │  0x00007f42e14a31bc: mov    %r13d,%edi
  0.08%    0.06%   │   │  ╰  0x00007f42e14a31bf: jmp    0x00007f42e14a3160  ;*if_icmpge
                   │   │                                                   ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@12 (line 74)
                   ↘   │     0x00007f42e14a31c1: add    $0x40,%rsp
                       │     0x00007f42e14a31c5: pop    %rbp
                       │     0x00007f42e14a31c6: test   %eax,0x18412e34(%rip)        # 0x00007f42f98b6000
                       │                                                   ;   {poll_return}
                       │     0x00007f42e14a31cc: retq   
                       ↘     0x00007f42e14a31cd: mov    $0xffffffe4,%esi
                             0x00007f42e14a31d2: mov    (%rsp),%rbp
                             0x00007f42e14a31d6: mov    %rax,-0x8(%rsp)
                             0x00007f42e14a31db: mov    0x8(%rsp),%eax
....................................................................................................
 78.11%   58.69%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 591 (300 bytes) 

                     Decoding compiled method 0x00007f42e148cfd0:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007f42f48a06f0} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  0.49%    1.69%       0x00007f42e148d160: mov    %eax,-0x14000(%rsp)
  0.05%    0.15%       0x00007f42e148d167: push   %rbp
  0.49%    0.32%       0x00007f42e148d168: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  0.28%    0.89%       0x00007f42e148d16c: mov    %edx,0x8(%rsp)
  0.16%    0.36%       0x00007f42e148d170: mov    %edx,%ebx
  0.13%    0.17%       0x00007f42e148d172: sar    $0x3,%ebx          ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  0.23%    0.86%       0x00007f42e148d175: movslq %ecx,%r14          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
           0.09%       0x00007f42e148d178: mov    $0x87c37b91114253d5,%rdi
  0.03%    0.11%       0x00007f42e148d182: test   %ebx,%ebx
                  ╭    0x00007f42e148d184: jle    0x00007f42e148d26c  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.23%    0.45%  │    0x00007f42e148d18a: mov    0xc(%rsi),%r10d    ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007f42e148d5d1
  0.60%    0.61%  │    0x00007f42e148d18e: xor    %r9d,%r9d
  0.03%    0.04%  │    0x00007f42e148d191: xor    %r8d,%r8d
  0.13%    0.20%  │    0x00007f42e148d194: nopl   0x0(%rax,%rax,1)
  0.21%    0.25%  │    0x00007f42e148d19c: xchg   %ax,%ax            ;*iload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  0.34%    1.37%  │ ↗  0x00007f42e148d1a0: cmp    %r10d,%r9d
                  │ │  0x00007f42e148d1a3: jae    0x00007f42e148d41e  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
           0.05%  │ │  0x00007f42e148d1a9: movzbq 0x10(%rsi,%r9,1),%rcx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.08%    0.29%  │ │  0x00007f42e148d1af: mov    %r9d,%r11d
  0.18%    0.10%  │ │  0x00007f42e148d1b2: add    $0x7,%r11d
  0.41%    0.78%  │ │  0x00007f42e148d1b6: cmp    %r10d,%r11d
                  │ │  0x00007f42e148d1b9: jae    0x00007f42e148d451  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
  0.03%    0.04%  │ │  0x00007f42e148d1bf: mov    %rcx,(%rsp)
  0.08%    0.13%  │ │  0x00007f42e148d1c3: movslq %r9d,%r11          ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
  0.10%    0.43%  │ │  0x00007f42e148d1c6: movzbq 0x11(%rsi,%r11,1),%r9
  0.39%    1.02%  │ │  0x00007f42e148d1cc: movzbq 0x17(%rsi,%r11,1),%rcx
  0.03%    0.06%  │ │  0x00007f42e148d1d2: movzbq 0x12(%rsi,%r11,1),%rdx
  0.08%    0.26%  │ │  0x00007f42e148d1d8: movzbq 0x13(%rsi,%r11,1),%rax
  0.23%    0.47%  │ │  0x00007f42e148d1de: movzbq 0x14(%rsi,%r11,1),%rbp
  0.34%    0.82%  │ │  0x00007f42e148d1e4: movzbq 0x15(%rsi,%r11,1),%r13
  0.03%    0.04%  │ │  0x00007f42e148d1ea: movzbq 0x16(%rsi,%r11,1),%r11
  0.16%    0.21%  │ │  0x00007f42e148d1f0: shl    $0x8,%r9
  0.13%    0.33%  │ │  0x00007f42e148d1f4: or     (%rsp),%r9
  0.21%    1.06%  │ │  0x00007f42e148d1f8: shl    $0x30,%r11
           0.07%  │ │  0x00007f42e148d1fc: shl    $0x28,%r13
  0.03%    0.19%  │ │  0x00007f42e148d200: shl    $0x20,%rbp
  0.08%    0.48%  │ │  0x00007f42e148d204: shl    $0x18,%rax
  0.41%    0.94%  │ │  0x00007f42e148d208: shl    $0x10,%rdx
  0.08%    0.04%  │ │  0x00007f42e148d20c: or     %rdx,%r9
  0.03%    0.14%  │ │  0x00007f42e148d20f: or     %rax,%r9
  0.21%    0.42%  │ │  0x00007f42e148d212: or     %rbp,%r9
  0.31%    0.82%  │ │  0x00007f42e148d215: or     %r13,%r9
           0.07%  │ │  0x00007f42e148d218: or     %r11,%r9
  0.03%    0.14%  │ │  0x00007f42e148d21b: shl    $0x38,%rcx
  0.16%    0.36%  │ │  0x00007f42e148d21f: or     %rcx,%r9
  0.31%    0.80%  │ │  0x00007f42e148d222: imul   %rdi,%r9           ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.41%    0.60%  │ │  0x00007f42e148d226: rol    $0x1f,%r9
  0.36%    0.53%  │ │  0x00007f42e148d22a: mov    $0x4cf5ad432745937f,%r11
  0.05%    0.07%  │ │  0x00007f42e148d234: imul   %r11,%r9
  1.14%    2.04%  │ │  0x00007f42e148d238: xor    %r14,%r9           ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.39%    0.86%  │ │  0x00007f42e148d23b: rol    $0x1b,%r9          ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.47%    0.96%  │ │  0x00007f42e148d23f: mov    %r9,%r14
  0.03%    0.04%  │ │  0x00007f42e148d242: shl    $0x2,%r14
  0.52%    1.34%  │ │  0x00007f42e148d246: add    %r9,%r14
  0.52%    1.21%  │ │  0x00007f42e148d249: add    $0x52dce729,%r14   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.47%    1.22%  │ │  0x00007f42e148d250: mov    %r8d,%ecx
  0.05%    0.05%  │ │  0x00007f42e148d253: inc    %ecx               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
  0.13%    0.28%  │ │  0x00007f42e148d255: cmp    %ebx,%ecx
                  │╭│  0x00007f42e148d257: jge    0x00007f42e148d26c  ;*if_icmpge
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │││  0x00007f42e148d259: shl    $0x3,%r8d
                  │││  0x00007f42e148d25d: mov    %r8d,%r9d
                  │││  0x00007f42e148d260: add    $0x8,%r9d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007f42e148d264: mov    %ecx,%r8d
                  ││╰  0x00007f42e148d267: jmpq   0x00007f42e148d1a0  ;*if_icmpge
                  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
           0.02%  ↘↘   0x00007f42e148d26c: mov    0x8(%rsp),%r8d
  0.36%    0.96%       0x00007f42e148d271: and    $0xfffffffffffffff8,%r8d  ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
  0.03%    0.04%       0x00007f42e148d275: mov    0x8(%rsp),%r10d
  0.13%    0.50%       0x00007f42e148d27a: sub    %r8d,%r10d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
                       0x00007f42e148d27d: movslq %r8d,%r9           ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.26%    1.04%       0x00007f42e148d280: xor    %ecx,%ecx
  0.05%    0.04%       0x00007f42e148d282: cmp    $0x4,%r10d
                       0x00007f42e148d286: je     0x00007f42e148d32d
  0.13%    0.41%       0x00007f42e148d28c: cmp    $0x4,%r10d
                       0x00007f42e148d290: jle    0x00007f42e148d2ad
                       0x00007f42e148d292: cmp    $0x7,%r10d
                       0x00007f42e148d296: je     0x00007f42e148d2d0
                       0x00007f42e148d298: cmp    $0x7,%r10d
                       0x00007f42e148d29c: jg     0x00007f42e148d3d0
                       0x00007f42e148d2a2: cmp    $0x6,%r10d
                       0x00007f42e148d2a6: je     0x00007f42e148d2ed
                       0x00007f42e148d2a8: xor    %r11d,%r11d
                       0x00007f42e148d2ab: jmp    0x00007f42e148d30d
                       0x00007f42e148d2ad: cmp    $0x2,%r10d
....................................................................................................
 12.97%   30.38%  <total for region 2>

....[Hottest Regions]...............................................................................
 78.11%   58.69%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 631 (479 bytes) 
 12.97%   30.38%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 591 (300 bytes) 
  4.61%    7.38%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 591 (77 bytes) 
  1.58%    0.27%   [kernel.kallsyms]  native_write_msr_safe (3 bytes) 
  0.70%    1.20%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 591 (20 bytes) 
  0.16%    0.01%   [kernel.kallsyms]  page_fault (0 bytes) 
  0.10%    0.01%   [kernel.kallsyms]  do_numa_page (0 bytes) 
  0.10%    0.01%   [kernel.kallsyms]  copy_page_rep (0 bytes) 
  0.08%            [kernel.kallsyms]  timerqueue_add (0 bytes) 
  0.05%            [kernel.kallsyms]  flush_tlb_page (4 bytes) 
  0.05%            [kernel.kallsyms]  irq_exit (0 bytes) 
  0.05%    0.02%   [kernel.kallsyms]  ___perf_sw_event (34 bytes) 
  0.05%    0.02%   [kernel.kallsyms]  __mem_cgroup_count_vm_event (4 bytes) 
  0.05%    0.02%   [kernel.kallsyms]  __sb_end_write (0 bytes) 
  0.05%    0.01%   [kernel.kallsyms]  _raw_spin_lock_irqsave (0 bytes) 
  0.05%            [kernel.kallsyms]  apic_timer_interrupt (0 bytes) 
  0.03%            [kernel.kallsyms]  native_read_tsc (0 bytes) 
  0.03%            [kernel.kallsyms]  run_timer_softirq (0 bytes) 
  0.03%            [kernel.kallsyms]  hrtimer_forward (0 bytes) 
  0.03%    0.01%   [kernel.kallsyms]  up_read (0 bytes) 
  1.11%    1.97%  <...other 178 warm regions...>
....................................................................................................
 99.97%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 78.11%   58.69%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 631 
 18.27%   38.97%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 591 
  1.58%    0.27%   [kernel.kallsyms]  native_write_msr_safe 
  0.16%    0.01%   [kernel.kallsyms]  page_fault 
  0.13%    0.01%   [kernel.kallsyms]  do_numa_page 
  0.10%    0.01%   [kernel.kallsyms]  copy_page_rep 
  0.10%    0.31%           libjvm.so  JVM_GetCallerClass 
  0.08%    0.02%   [kernel.kallsyms]  __mem_cgroup_count_vm_event 
  0.08%            [kernel.kallsyms]  timerqueue_add 
  0.05%    0.01%   [kernel.kallsyms]  flush_tlb_page 
  0.05%    0.01%   [kernel.kallsyms]  update_wall_time 
  0.05%            [kernel.kallsyms]  apic_timer_interrupt 
  0.05%            [kernel.kallsyms]  irq_exit 
  0.05%    0.01%   [kernel.kallsyms]  _raw_spin_lock_irqsave 
  0.05%    0.03%   [kernel.kallsyms]  ___perf_sw_event 
  0.05%    0.02%   [kernel.kallsyms]  __sb_start_write 
  0.05%    0.03%   [kernel.kallsyms]  __sb_end_write 
  0.03%    0.01%   [kernel.kallsyms]  __generic_file_aio_write 
  0.03%                 libc-2.17.so  _itoa_word 
  0.03%            [kernel.kallsyms]  notifier_call_chain 
  0.88%    0.28%  <...other 34 warm methods...>
....................................................................................................
 99.97%   98.67%  <totals>

....[Distribution by Source]........................................................................
 96.38%   97.65%         C2, level 4
  3.23%    1.58%   [kernel.kallsyms]
  0.13%    0.35%           libjvm.so
  0.10%    0.22%        libc-2.17.so
  0.05%    0.04%              [jbd2]
  0.03%    0.06%      hsdis-amd64.so
  0.03%    0.03%  libpthread-2.17.so
  0.03%    0.02%         interpreter
....................................................................................................
 99.97%  100.00%  <totals>


Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·perf":
Perf stats:
--------------------------------------------------

      29690.198267      task-clock (msec)         #    0.851 CPUs utilized          
             1,690      context-switches          #    0.057 K/sec                  
             1,621      cpu-migrations            #    0.055 K/sec                  
           180,932      page-faults               #    0.006 M/sec                  
    56,777,456,399      cycles                    #    1.912 GHz                      (84.27%)
    24,560,044,863      stalled-cycles-frontend   #   43.26% frontend cycles idle     (84.27%)
   <not supported>      stalled-cycles-backend   
    79,164,926,605      instructions              #    1.39  insns per cycle        
                                                  #    0.31  stalled cycles per insn  (84.30%)
     8,229,323,915      branches                  #  277.173 M/sec                    (67.95%)
       278,483,504      branch-misses             #    3.38% of all branches          (28.74%)
    12,755,407,513      L1-dcache-loads           #  429.617 M/sec                    (5.25%)
       537,427,319      L1-dcache-load-misses     #    4.21% of all L1-dcache hits    (2.72%)
       378,138,321      LLC-loads                 #   12.736 M/sec                    (2.71%)
        25,433,521      LLC-load-misses           #    6.73% of all LL-cache hits     (4.06%)
   <not supported>      L1-icache-loads          
        74,505,666      L1-icache-load-misses     #    2.509 M/sec                    (5.40%)
    12,646,408,698      dTLB-loads                #  425.946 M/sec                    (5.27%)
       225,831,786      dTLB-load-misses          #    1.79% of all dTLB cache hits   (2.70%)
         1,240,115      iTLB-loads                #    0.042 M/sec                    (2.67%)
           416,410      iTLB-load-misses          #   33.58% of all iTLB cache hits   (4.01%)
   <not supported>      L1-dcache-prefetches     
        79,452,418      L1-dcache-prefetch-misses #    2.676 M/sec                    (5.35%)

      34.873118369 seconds time elapsed



# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: -XX:AllocatePrefetchStyle=2
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe
# Parameters: (blockSize = 2, numEntries = 10000)

# Run progress: 25.00% complete, ETA 00:03:18
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 65.117 ns/op
# Warmup Iteration   2: 65.203 ns/op
# Warmup Iteration   3: 62.626 ns/op
# Warmup Iteration   4: 61.833 ns/op
# Warmup Iteration   5: 61.206 ns/op
Iteration   1: 62.284 ns/op
Iteration   2: 61.482 ns/op
Iteration   3: 59.411 ns/op
Iteration   4: 52.952 ns/op
Iteration   5: 52.450 ns/op
Iteration   6: 52.493 ns/op
Iteration   7: 53.915 ns/op
Iteration   8: 51.944 ns/op
Iteration   9: 53.826 ns/op
Iteration  10: 51.798 ns/op
# Processing profiler results: LinuxPerfAsmProfiler LinuxPerfProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe":
  55.255 ±(99.9%) 6.234 ns/op [Average]
  (min, avg, max) = (51.798, 55.255, 62.284), stdev = 4.123
  CI (99.9%): [49.022, 61.489] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·asm":
PrintAssembly processed: 188450 total address lines.
Perf output processed (skipped 13.500 seconds):
 Column 1: cycles (877 events)
 Column 2: instructions (5428 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 620 (479 bytes) 

                            0x00007f1f0949c04c: dec    %r11d
                            0x00007f1f0949c04f: cmp    %r8d,%r11d
                            0x00007f1f0949c052: jae    0x00007f1f0949c34d  ;*aload_1
                                                                          ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
                            0x00007f1f0949c058: lea    (%r12,%rbx,8),%rsi  ;*getfield probeArray
                                                                          ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@1 (line 74)
                            0x00007f1f0949c05c: xor    %edi,%edi
                  ╭         0x00007f1f0949c05e: jmp    0x00007f1f0949c082  ;*invokevirtual testBytes
                  │                                                       ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                  │                                                       ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  3.65%    3.30%  │↗   ↗↗   0x00007f1f0949c060: mov    0xc(%rsp),%edi
  2.39%    3.22%  ││   ││   0x00007f1f0949c064: inc    %edi               ;*iinc
                  ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@31 (line 74)
  0.23%    0.11%  ││   ││   0x00007f1f0949c066: cmp    0x8(%rsp),%edi
                  ││   ││   0x00007f1f0949c06a: jge    0x00007f1f0949c2a9  ;*if_icmpge
                  ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@12 (line 74)
  0.34%    0.20%  ││   ││   0x00007f1f0949c070: mov    (%rsp),%rax
  0.11%    0.20%  ││   ││   0x00007f1f0949c074: mov    0x28(%rsp),%ebx
  0.34%    0.02%  ││   ││   0x00007f1f0949c078: mov    0x8(%rsp),%r8d
           0.06%  ││   ││   0x00007f1f0949c07d: mov    0x10(%rsp),%rsi    ;*aload_1
                  ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
  0.57%    0.13%  ↘│   ││   0x00007f1f0949c082: mov    0x10(%rsi,%rdi,4),%r10d  ;*iaload
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@17 (line 74)
  1.94%    0.28%   │   ││   0x00007f1f0949c087: mov    0x18(%rax),%r9d    ;*getfield bf
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
  0.23%    0.07%   │   ││   0x00007f1f0949c08b: movslq %r10d,%r11         ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@26 (line 75)
           0.02%   │   ││   0x00007f1f0949c08e: test   %r9d,%r9d
                   │   ││   0x00007f1f0949c091: je     0x00007f1f0949c2b5  ;*invokevirtual testLong
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.04%   │   ││   0x00007f1f0949c097: mov    $0x588668808,%rcx  ;   {oop(a &apos;java/lang/Class&apos; = &apos;com/github/prasanthj/bloomfilter/BloomKFilter&apos;)}
           0.17%   │   ││   0x00007f1f0949c0a1: mov    0x6c(%rcx),%r13d   ;*getstatic BYTE_ARRAY_8
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.23%    0.15%   │   ││   0x00007f1f0949c0a5: movsbl %r10b,%ecx         ;*i2b  ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@8 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.11%            │   ││   0x00007f1f0949c0a9: mov    0xc(%r12,%r13,8),%edx  ; implicit exception: dispatches to 0x00007f1f0949c3b1
  0.34%    0.06%   │   ││   0x00007f1f0949c0ae: cmp    $0x7,%edx
                   │   ││   0x00007f1f0949c0b1: jbe    0x00007f1f0949c2dd
  0.57%    0.11%   │   ││   0x00007f1f0949c0b7: mov    %edi,0xc(%rsp)
  0.11%    0.07%   │   ││   0x00007f1f0949c0bb: mov    %rsi,0x10(%rsp)
  0.11%    0.02%   │   ││   0x00007f1f0949c0c0: mov    %r8d,0x8(%rsp)
  0.11%    0.04%   │   ││   0x00007f1f0949c0c5: mov    %ebx,0x28(%rsp)
  0.68%    0.26%   │   ││   0x00007f1f0949c0c9: mov    %rax,(%rsp)
  0.11%    0.09%   │   ││   0x00007f1f0949c0cd: mov    %r10b,0x10(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@9 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.34%    0.31%   │   ││   0x00007f1f0949c0d2: lea    (%r12,%r9,8),%rbp  ;*getfield bf
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
           0.42%   │   ││   0x00007f1f0949c0d6: mov    %r9d,0x18(%rsp)
  0.68%    0.57%   │   ││   0x00007f1f0949c0db: lea    (%r12,%r13,8),%rsi  ;*getstatic BYTE_ARRAY_8
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.04%   │   ││   0x00007f1f0949c0df: mov    %r11,%r8
  0.23%    0.11%   │   ││   0x00007f1f0949c0e2: sar    $0x38,%r8
  0.57%    0.50%   │   ││   0x00007f1f0949c0e6: mov    %r11,%r10
           0.42%   │   ││   0x00007f1f0949c0e9: sar    $0x30,%r10
                   │   ││   0x00007f1f0949c0ed: mov    %r8d,%r8d
  0.23%    0.46%   │   ││   0x00007f1f0949c0f0: mov    %r10d,%r10d
  0.34%    0.53%   │   ││   0x00007f1f0949c0f3: mov    %r11,%rcx
  0.34%    0.46%   │   ││   0x00007f1f0949c0f6: sar    $0x28,%rcx
           0.04%   │   ││   0x00007f1f0949c0fa: mov    %r11,%r9
  0.23%    0.26%   │   ││   0x00007f1f0949c0fd: sar    $0x20,%r9
  0.46%    0.37%   │   ││   0x00007f1f0949c101: mov    %ecx,%ecx
  0.11%    0.50%   │   ││   0x00007f1f0949c103: mov    %r9d,%r9d
                   │   ││   0x00007f1f0949c106: mov    %r11,%rdi
  0.23%    0.09%   │   ││   0x00007f1f0949c109: sar    $0x18,%rdi
  0.23%    0.50%   │   ││   0x00007f1f0949c10d: mov    %r11,%rbx
  0.57%    0.31%   │   ││   0x00007f1f0949c110: sar    $0x10,%rbx
                   │   ││   0x00007f1f0949c114: mov    %edi,%edi
           0.07%   │   ││   0x00007f1f0949c116: mov    %ebx,%ebx
  0.23%    0.22%   │   ││   0x00007f1f0949c118: sar    $0x8,%r11
  0.57%    0.31%   │   ││   0x00007f1f0949c11c: mov    %r11d,%r11d
           0.02%   │   ││   0x00007f1f0949c11f: mov    %r11b,0x11(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@20 (line 253)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.80%    0.52%   │   ││   0x00007f1f0949c124: mov    %bl,0x12(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@31 (line 254)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.39%   │   ││   0x00007f1f0949c129: mov    %dil,0x13(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@42 (line 255)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.91%    0.22%   │   ││   0x00007f1f0949c12e: mov    %r9b,0x14(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@53 (line 256)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.57%    0.41%   │   ││   0x00007f1f0949c133: mov    %cl,0x15(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@64 (line 257)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.57%    0.48%   │   ││   0x00007f1f0949c138: mov    %r10b,0x16(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@76 (line 258)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.57%    0.18%   │   ││   0x00007f1f0949c13d: mov    %r8b,0x17(%r12,%r13,8)  ;*synchronization entry
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.57%    0.68%   │   ││   0x00007f1f0949c142: xor    %ecx,%ecx
  0.23%    0.41%   │   ││   0x00007f1f0949c144: xchg   %ax,%ax
           0.02%   │   ││   0x00007f1f0949c147: callq  0x00007f1f09046160  ; OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=NarrowOop [40]=NarrowOop off=332}
                   │   ││                                                 ;*invokestatic hash64
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │   ││                                                 ;   {static_call}
                   │   ││   0x00007f1f0949c14c: mov    0x18(%rsp),%r11d
  0.57%    0.52%   │   ││   0x00007f1f0949c151: mov    0x28(%r12,%r11,8),%r10d  ;*getfield totalBlockCount
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@37 (line 198)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.46%    0.24%   │   ││   0x00007f1f0949c156: mov    %eax,%r13d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@6 (line 187)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │   ││   0x00007f1f0949c159: shr    $0x20,%rax
  0.46%    0.61%   │   ││   0x00007f1f0949c15d: mov    %eax,%r14d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@13 (line 188)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │   ││   0x00007f1f0949c160: mov    %r13d,%eax
  0.34%    1.27%   │   ││   0x00007f1f0949c163: add    %r14d,%eax         ;*iadd
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@20 (line 190)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.11%    0.26%   │   ││   0x00007f1f0949c166: mov    %eax,%r9d
  0.46%    0.53%   │   ││   0x00007f1f0949c169: not    %r9d
  1.03%    1.38%   │   ││   0x00007f1f0949c16c: test   %eax,%eax
  0.57%    1.34%   │   ││   0x00007f1f0949c16e: cmovl  %r9d,%eax          ;*iload
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@34 (line 198)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  1.14%    2.56%   │   ││   0x00007f1f0949c172: test   %r10d,%r10d
                   │   ││   0x00007f1f0949c175: je     0x00007f1f0949c2c9  ;*irem
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@40 (line 198)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │   ││   0x00007f1f0949c17b: mov    0xc(%r12,%r11,8),%ebp  ;*getfield k
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@58 (line 200)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │   ││   0x00007f1f0949c180: cmp    $0x1,%ebp
                   ╰   ││   0x00007f1f0949c183: jl     0x00007f1f0949c060  ;*if_icmpgt
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                       ││   0x00007f1f0949c189: mov    0x34(%r12,%r11,8),%r9d  ;*getfield bitSet
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@123 (line 210)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  1.37%    1.82%       ││   0x00007f1f0949c18e: cmp    $0x80000000,%eax
                    ╭  ││   0x00007f1f0949c193: jne    0x00007f1f0949c19d
                    │  ││   0x00007f1f0949c195: xor    %edx,%edx
                    │  ││   0x00007f1f0949c197: cmp    $0xffffffffffffffff,%r10d
                    │╭ ││   0x00007f1f0949c19b: je     0x00007f1f0949c1a1
                    ↘│ ││   0x00007f1f0949c19d: cltd   
                     │ ││   0x00007f1f0949c19e: idiv   %r10d
 16.88%   18.05%     ↘ ││   0x00007f1f0949c1a1: imul   0x30(%r12,%r11,8),%edx  ;*imul
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@49 (line 199)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  1.82%    0.09%       ││   0x00007f1f0949c1a7: mov    0xc(%r12,%r9,8),%r9d  ;*getfield data
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@126 (line 210)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                       ││                                                 ; implicit exception: dispatches to 0x00007f1f0949c376
                       ││   0x00007f1f0949c1ac: mov    0xc(%r12,%r9,8),%eax  ;*laload
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                       ││                                                 ; implicit exception: dispatches to 0x00007f1f0949c376
                       ││   0x00007f1f0949c1b1: cmp    $0x7ffffffe,%ebp
                       ││   0x00007f1f0949c1b7: jg     0x00007f1f0949c311
                       ││   0x00007f1f0949c1bd: vmovd  %r11d,%xmm1
  0.68%    0.04%       ││   0x00007f1f0949c1c2: mov    0x2c(%r12,%r11,8),%r8d
                       ││   0x00007f1f0949c1c7: lea    (%r12,%r9,8),%r10
                       ││   0x00007f1f0949c1cb: dec    %r8d
                       ││   0x00007f1f0949c1ce: movslq %edx,%r11
  0.91%                ││   0x00007f1f0949c1d1: mov    $0x1,%edi
                       ││   0x00007f1f0949c1d6: mov    %r13d,0x18(%rsp)
                       ││   0x00007f1f0949c1db: nopl   0x0(%rax,%rax,1)   ;*iload
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@64 (line 201)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                       ││↗  0x00007f1f0949c1e0: mov    %edi,%r13d
  0.57%                │││  0x00007f1f0949c1e3: inc    %r13d              ;*iadd
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@69 (line 201)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.11%    0.13%       │││  0x00007f1f0949c1e6: mov    %r13d,%ebx
  0.11%    0.06%       │││  0x00007f1f0949c1e9: imul   %r14d,%ebx
  1.14%    0.24%       │││  0x00007f1f0949c1ed: add    0x18(%rsp),%ebx    ;*iadd
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@73 (line 201)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  2.74%    0.20%       │││  0x00007f1f0949c1f1: mov    %ebx,%esi
  0.23%    0.02%       │││  0x00007f1f0949c1f3: not    %esi
  0.34%    0.31%       │││  0x00007f1f0949c1f5: test   %ebx,%ebx
                       │││  0x00007f1f0949c1f7: cmovl  %esi,%ebx
  0.91%    0.04%       │││  0x00007f1f0949c1fa: mov    %r8d,%esi
           0.11%       │││  0x00007f1f0949c1fd: and    %ebx,%esi          ;*iand
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@95 (line 206)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.23%                │││  0x00007f1f0949c1ff: mov    %esi,%ebx
  0.57%                │││  0x00007f1f0949c201: and    $0xffffffffffffffc0,%ebx
  0.46%    0.17%       │││  0x00007f1f0949c204: mov    %esi,%ecx
  0.11%    0.17%       │││  0x00007f1f0949c206: sub    %ebx,%ecx          ;*isub
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@119 (line 209)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.34%    0.13%       │││  0x00007f1f0949c208: shr    $0x6,%esi          ;*iushr
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@102 (line 207)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.91%                │││  0x00007f1f0949c20b: mov    %esi,%ebx
                       │││  0x00007f1f0949c20d: add    %edx,%ebx          ;*iadd
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@109 (line 208)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.68%    0.44%       │││  0x00007f1f0949c20f: cmp    %eax,%ebx
                      ╭│││  0x00007f1f0949c211: jae    0x00007f1f0949c241  ;*laload
                      ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                      ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                      ││││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.11%    0.44%      ││││  0x00007f1f0949c213: mov    $0x1,%ebx
  0.57%               ││││  0x00007f1f0949c218: shl    %cl,%rbx
  0.68%    1.03%      ││││  0x00007f1f0949c21b: movslq %esi,%rcx
  0.11%    0.15%      ││││  0x00007f1f0949c21e: mov    %r11,%rdi
  0.91%    0.02%      ││││  0x00007f1f0949c221: add    %rcx,%rdi
           0.11%      ││││  0x00007f1f0949c224: test   %rbx,0x10(%r10,%rdi,8)
                      │╰││  0x00007f1f0949c229: je     0x00007f1f0949c060  ;*ifne
                      │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@143 (line 211)
                      │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                      │ ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  3.65%    3.50%      │ ││  0x00007f1f0949c22f: mov    %ebp,%ebx
  2.17%    2.87%      │ ││  0x00007f1f0949c231: inc    %ebx
  0.46%    0.81%      │ ││  0x00007f1f0949c233: cmp    %ebx,%r13d
                      │ ╰│  0x00007f1f0949c236: jge    0x00007f1f0949c060  ;*if_icmpgt
                      │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                      │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                      │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.46%    0.29%      │  │  0x00007f1f0949c23c: mov    %r13d,%edi
  0.23%    0.13%      │  ╰  0x00007f1f0949c23f: jmp    0x00007f1f0949c1e0
                      ↘     0x00007f1f0949c241: mov    $0xffffffe4,%esi
                            0x00007f1f0949c246: mov    (%rsp),%rbp
                            0x00007f1f0949c24a: mov    %rax,-0x8(%rsp)
                            0x00007f1f0949c24f: mov    0x8(%rsp),%eax
                            0x00007f1f0949c253: mov    %eax,(%rsp)
                            0x00007f1f0949c256: mov    -0x8(%rsp),%rax
                            0x00007f1f0949c25b: mov    %rax,-0x8(%rsp)
                            0x00007f1f0949c260: mov    0xc(%rsp),%eax
                            0x00007f1f0949c264: mov    %eax,0x4(%rsp)
                            0x00007f1f0949c268: mov    -0x8(%rsp),%rax
....................................................................................................
 67.39%   58.51%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 586 (298 bytes) 

                     Decoding compiled method 0x00007f1f0948b190:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007f1ea80056f0} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  0.46%    1.07%       0x00007f1f0948b320: mov    %eax,-0x14000(%rsp)
           0.70%       0x00007f1f0948b327: push   %rbp
  0.23%    0.31%       0x00007f1f0948b328: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  0.46%    0.92%       0x00007f1f0948b32c: mov    %edx,0x10(%rsp)
  0.23%    0.37%       0x00007f1f0948b330: mov    %edx,%r10d
           0.09%       0x00007f1f0948b333: sar    $0x3,%r10d         ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  0.23%    0.64%       0x00007f1f0948b337: movslq %ecx,%r11          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
  0.11%    0.52%       0x00007f1f0948b33a: mov    $0x87c37b91114253d5,%rbx
  0.23%    0.06%       0x00007f1f0948b344: test   %r10d,%r10d
                  ╭    0x00007f1f0948b347: jle    0x00007f1f0948b430  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
           0.42%  │    0x00007f1f0948b34d: mov    %rsi,%r9
  0.11%    0.57%  │    0x00007f1f0948b350: mov    0xc(%rsi),%edi     ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007f1f0948b7b9
  0.23%    0.37%  │    0x00007f1f0948b353: xor    %r8d,%r8d
  0.23%    0.07%  │    0x00007f1f0948b356: xor    %ecx,%ecx
           0.26%  │╭   0x00007f1f0948b358: jmp    0x00007f1f0948b370
                  ││   0x00007f1f0948b35a: nopw   0x0(%rax,%rax,1)
                  ││↗  0x00007f1f0948b360: shl    $0x3,%ecx
                  │││  0x00007f1f0948b363: mov    %ecx,%r8d
                  │││  0x00007f1f0948b366: add    $0x8,%r8d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007f1f0948b36a: mov    %r9d,%ecx
                  │││  0x00007f1f0948b36d: mov    %rsi,%r9           ;*iload
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  0.11%    0.70%  │↘│  0x00007f1f0948b370: cmp    %edi,%r8d
                  │ │  0x00007f1f0948b373: jae    0x00007f1f0948b5fa  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
  0.11%    0.41%  │ │  0x00007f1f0948b379: movzbq 0x10(%r9,%r8,1),%rdx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.11%    0.20%  │ │  0x00007f1f0948b37f: mov    %r8d,%esi
  0.11%    0.04%  │ │  0x00007f1f0948b382: add    $0x7,%esi
  0.23%    0.63%  │ │  0x00007f1f0948b385: cmp    %edi,%esi
                  │ │  0x00007f1f0948b387: jae    0x00007f1f0948b631  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
  0.23%    0.26%  │ │  0x00007f1f0948b38d: mov    %rdx,(%rsp)
           0.07%  │ │  0x00007f1f0948b391: movslq %r8d,%r8           ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
  0.34%    0.37%  │ │  0x00007f1f0948b394: movzbq 0x11(%r9,%r8,1),%rdx
  0.46%    0.72%  │ │  0x00007f1f0948b39a: movzbq 0x17(%r9,%r8,1),%rax
  0.34%    0.29%  │ │  0x00007f1f0948b3a0: movzbq 0x12(%r9,%r8,1),%rbp
  0.34%    0.15%  │ │  0x00007f1f0948b3a6: movzbq 0x13(%r9,%r8,1),%r13
  0.11%    0.46%  │ │  0x00007f1f0948b3ac: movzbq 0x14(%r9,%r8,1),%r14
  0.34%    0.57%  │ │  0x00007f1f0948b3b2: mov    %r9,%rsi
  0.34%    0.35%  │ │  0x00007f1f0948b3b5: movzbq 0x15(%r9,%r8,1),%r9
  0.11%    0.17%  │ │  0x00007f1f0948b3bb: movzbq 0x16(%rsi,%r8,1),%r8
           0.44%  │ │  0x00007f1f0948b3c1: shl    $0x8,%rdx
  0.34%    0.53%  │ │  0x00007f1f0948b3c5: or     (%rsp),%rdx
  0.34%    0.28%  │ │  0x00007f1f0948b3c9: shl    $0x30,%r8
           0.17%  │ │  0x00007f1f0948b3cd: shl    $0x28,%r9
  0.23%    0.44%  │ │  0x00007f1f0948b3d1: shl    $0x20,%r14
  0.23%    0.68%  │ │  0x00007f1f0948b3d5: shl    $0x18,%r13
           0.35%  │ │  0x00007f1f0948b3d9: shl    $0x10,%rbp
           0.11%  │ │  0x00007f1f0948b3dd: or     %rbp,%rdx
  0.11%    0.63%  │ │  0x00007f1f0948b3e0: or     %r13,%rdx
  0.57%    0.44%  │ │  0x00007f1f0948b3e3: or     %r14,%rdx
           0.33%  │ │  0x00007f1f0948b3e6: or     %r9,%rdx
           0.18%  │ │  0x00007f1f0948b3e9: or     %r8,%rdx
           0.53%  │ │  0x00007f1f0948b3ec: shl    $0x38,%rax
  0.34%    0.74%  │ │  0x00007f1f0948b3f0: or     %rax,%rdx
  0.11%    0.37%  │ │  0x00007f1f0948b3f3: imul   %rbx,%rdx          ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.80%    0.37%  │ │  0x00007f1f0948b3f7: rol    $0x1f,%rdx
  0.91%    0.42%  │ │  0x00007f1f0948b3fb: mov    $0x4cf5ad432745937f,%r8
  0.11%    0.02%  │ │  0x00007f1f0948b405: imul   %r8,%rdx
  1.60%    1.90%  │ │  0x00007f1f0948b409: xor    %r11,%rdx          ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.23%    0.76%  │ │  0x00007f1f0948b40c: rol    $0x1b,%rdx         ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.80%    1.01%  │ │  0x00007f1f0948b410: mov    %rdx,%r11
           0.17%  │ │  0x00007f1f0948b413: shl    $0x2,%r11
  0.57%    1.44%  │ │  0x00007f1f0948b417: add    %rdx,%r11
  0.57%    1.27%  │ │  0x00007f1f0948b41a: add    $0x52dce729,%r11   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.23%    1.22%  │ │  0x00007f1f0948b421: mov    %ecx,%r9d
           0.07%  │ │  0x00007f1f0948b424: inc    %r9d               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
  0.11%    0.15%  │ │  0x00007f1f0948b427: cmp    %r10d,%r9d
                  │ ╰  0x00007f1f0948b42a: jl     0x00007f1f0948b360  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
           0.04%  ↘    0x00007f1f0948b430: mov    0x10(%rsp),%r10d
  0.34%    1.01%       0x00007f1f0948b435: and    $0xfffffffffffffff8,%r10d
                                                                     ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
           0.18%       0x00007f1f0948b439: mov    0x10(%rsp),%r8d
  0.11%    0.13%       0x00007f1f0948b43e: sub    %r10d,%r8d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
           0.02%       0x00007f1f0948b441: movslq %r10d,%rdi         ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.46%    1.12%       0x00007f1f0948b444: cmp    $0x4,%r8d
                       0x00007f1f0948b448: je     0x00007f1f0948b4ab
  0.11%    0.15%       0x00007f1f0948b44a: cmp    $0x4,%r8d
                       0x00007f1f0948b44e: jle    0x00007f1f0948b475
                       0x00007f1f0948b450: cmp    $0x7,%r8d
                       0x00007f1f0948b454: je     0x00007f1f0948b4b2
                       0x00007f1f0948b456: cmp    $0x7,%r8d
                       0x00007f1f0948b45a: jg     0x00007f1f0948b5ac
                       0x00007f1f0948b460: cmp    $0x6,%r8d
                       0x00007f1f0948b464: jne    0x00007f1f0948b46e
                       0x00007f1f0948b466: xor    %r9d,%r9d
                       0x00007f1f0948b469: mov    %rsi,%r8
                       0x00007f1f0948b46c: jmp    0x00007f1f0948b4d2
....................................................................................................
 15.05%   29.42%  <total for region 2>

....[Hottest Regions]...............................................................................
 67.39%   58.51%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 620 (479 bytes) 
 15.05%   29.42%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 586 (298 bytes) 
  7.75%    7.89%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 586 (77 bytes) 
  3.99%    0.37%   [kernel.kallsyms]  native_write_msr_safe (0 bytes) 
  1.14%    1.27%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 586 (23 bytes) 
  0.23%    0.06%   [kernel.kallsyms]  __sb_start_write (27 bytes) 
  0.23%    0.02%   [kernel.kallsyms]  mutex_unlock (0 bytes) 
  0.23%            [kernel.kallsyms]  page_fault (0 bytes) 
  0.11%            [kernel.kallsyms]  update_vsyscall (0 bytes) 
  0.11%            [kernel.kallsyms]  __do_softirq (0 bytes) 
  0.11%            [kernel.kallsyms]  irq_enter (0 bytes) 
  0.11%            [kernel.kallsyms]  __srcu_read_unlock (0 bytes) 
  0.11%            [kernel.kallsyms]  __wake_up_sync_key (0 bytes) 
  0.11%            [kernel.kallsyms]  task_tick_fair (0 bytes) 
  0.11%            [kernel.kallsyms]  futex_wake_op (0 bytes) 
  0.11%            [kernel.kallsyms]  __audit_syscall_entry (0 bytes) 
  0.11%            [kernel.kallsyms]  page_waitqueue (0 bytes) 
  0.11%            [kernel.kallsyms]  page_cpupid_xchg_last (0 bytes) 
  0.11%            [kernel.kallsyms]  kmem_cache_alloc (0 bytes) 
  0.11%    0.06%   [kernel.kallsyms]  vfs_write (43 bytes) 
  2.62%    2.39%  <...other 110 warm regions...>
....................................................................................................
100.00%   99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 67.39%   58.51%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 620 
 23.95%   38.58%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 586 
  3.99%    0.37%   [kernel.kallsyms]  native_write_msr_safe 
  0.46%    0.53%           libjvm.so  [unknown] 
  0.23%    0.06%   [kernel.kallsyms]  __sb_start_write 
  0.23%    0.02%      hsdis-amd64.so  print_insn 
  0.23%    0.02%        libc-2.17.so  __GI___mempcpy 
  0.23%    0.02%   [kernel.kallsyms]  mutex_unlock 
  0.23%            [kernel.kallsyms]  page_fault 
  0.11%            [kernel.kallsyms]  __do_softirq 
  0.11%    0.02%      hsdis-amd64.so  oappend 
  0.11%               hsdis-amd64.so  print_operand_value 
  0.11%            [kernel.kallsyms]  __srcu_read_unlock 
  0.11%            [kernel.kallsyms]  system_call_after_swapgs 
  0.11%            [kernel.kallsyms]  irq_enter 
  0.11%           libpthread-2.17.so  __pthread_enable_asynccancel 
  0.11%                 libc-2.17.so  free 
  0.11%                 libc-2.17.so  _IO_str_init_static_internal 
  0.11%            [kernel.kallsyms]  update_vsyscall 
  0.11%    0.04%   [kernel.kallsyms]  copy_user_enhanced_fast_string 
  1.82%    0.31%  <...other 16 warm methods...>
....................................................................................................
100.00%   98.47%  <totals>

....[Distribution by Source]........................................................................
 91.33%   97.09%         C2, level 4
  6.61%    1.81%   [kernel.kallsyms]
  0.68%    0.41%        libc-2.17.so
  0.46%    0.53%           libjvm.so
  0.46%    0.04%      hsdis-amd64.so
  0.23%    0.02%  libpthread-2.17.so
  0.11%    0.04%              [jbd2]
  0.11%                        [kvm]
....................................................................................................
100.00%   99.98%  <totals>


Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·perf":
Perf stats:
--------------------------------------------------

      19568.407067      task-clock (msec)         #    0.789 CPUs utilized          
             1,870      context-switches          #    0.096 K/sec                  
             1,066      cpu-migrations            #    0.054 K/sec                  
           111,306      page-faults               #    0.006 M/sec                  
    40,705,673,263      cycles                    #    2.080 GHz                      (83.81%)
    10,434,326,152      stalled-cycles-frontend   #   25.63% frontend cycles idle     (83.89%)
   <not supported>      stalled-cycles-backend   
    76,110,693,131      instructions              #    1.87  insns per cycle        
                                                  #    0.14  stalled cycles per insn  (83.99%)
     8,075,036,984      branches                  #  412.657 M/sec                    (79.44%)
       283,380,604      branch-misses             #    3.51% of all branches          (41.08%)
    12,214,540,255      L1-dcache-loads           #  624.197 M/sec                    (5.35%)
        76,637,628      L1-dcache-load-misses     #    0.63% of all L1-dcache hits    (2.78%)
        14,768,285      LLC-loads                 #    0.755 M/sec                    (2.80%)
         3,641,271      LLC-load-misses           #   24.66% of all LL-cache hits     (4.17%)
   <not supported>      L1-icache-loads          
        83,733,516      L1-icache-load-misses     #    4.279 M/sec                    (5.54%)
    12,254,359,143      dTLB-loads                #  626.232 M/sec                    (5.30%)
        10,803,030      dTLB-load-misses          #    0.09% of all dTLB cache hits   (2.76%)
         1,705,727      iTLB-loads                #    0.087 M/sec                    (2.76%)
           667,727      iTLB-load-misses          #   39.15% of all iTLB cache hits   (4.13%)
   <not supported>      L1-dcache-prefetches     
        20,268,230      L1-dcache-prefetch-misses #    1.036 M/sec                    (5.48%)

      24.786954359 seconds time elapsed



# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: -XX:AllocatePrefetchStyle=2
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe
# Parameters: (blockSize = 2, numEntries = 10000000)

# Run progress: 37.50% complete, ETA 00:02:35
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 76.416 ns/op
# Warmup Iteration   2: 74.271 ns/op
# Warmup Iteration   3: 72.051 ns/op
# Warmup Iteration   4: 72.809 ns/op
# Warmup Iteration   5: 74.195 ns/op
Iteration   1: 74.077 ns/op
Iteration   2: 74.795 ns/op
Iteration   3: 71.709 ns/op
Iteration   4: 74.556 ns/op
Iteration   5: 84.989 ns/op
Iteration   6: 87.663 ns/op
Iteration   7: 84.949 ns/op
Iteration   8: 84.797 ns/op
Iteration   9: 83.624 ns/op
Iteration  10: 83.726 ns/op
# Processing profiler results: LinuxPerfAsmProfiler LinuxPerfProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe":
  80.488 ±(99.9%) 8.962 ns/op [Average]
  (min, avg, max) = (71.709, 80.488, 87.663), stdev = 5.928
  CI (99.9%): [71.526, 89.451] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·asm":
PrintAssembly processed: 188855 total address lines.
Perf output processed (skipped 14.356 seconds):
 Column 1: cycles (1915 events)
 Column 2: instructions (8603 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 618 (479 bytes) 

                            0x00007f038549e4cc: dec    %r11d
                            0x00007f038549e4cf: cmp    %r8d,%r11d
                            0x00007f038549e4d2: jae    0x00007f038549e7cd  ;*aload_1
                                                                          ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
                            0x00007f038549e4d8: lea    (%r12,%rbx,8),%rsi  ;*getfield probeArray
                                                                          ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@1 (line 74)
                            0x00007f038549e4dc: xor    %edi,%edi
                  ╭         0x00007f038549e4de: jmp    0x00007f038549e502  ;*invokevirtual testBytes
                  │                                                       ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                  │                                                       ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
 17.70%   10.17%  │↗   ↗↗   0x00007f038549e4e0: mov    0xc(%rsp),%edi
  2.61%    1.08%  ││   ││   0x00007f038549e4e4: inc    %edi               ;*iinc
                  ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@31 (line 74)
  0.21%    0.14%  ││   ││   0x00007f038549e4e6: cmp    0x8(%rsp),%edi
                  ││   ││   0x00007f038549e4ea: jge    0x00007f038549e729  ;*if_icmpge
                  ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@12 (line 74)
  0.37%    0.10%  ││   ││   0x00007f038549e4f0: mov    (%rsp),%rax
  0.10%    0.07%  ││   ││   0x00007f038549e4f4: mov    0x28(%rsp),%ebx
  0.05%           ││   ││   0x00007f038549e4f8: mov    0x8(%rsp),%r8d
                  ││   ││   0x00007f038549e4fd: mov    0x10(%rsp),%rsi    ;*aload_1
                  ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
  0.31%    0.10%  ↘│   ││   0x00007f038549e502: mov    0x10(%rsi,%rdi,4),%r10d  ;*iaload
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@17 (line 74)
  1.67%    0.10%   │   ││   0x00007f038549e507: mov    0x18(%rax),%r9d    ;*getfield bf
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
           0.05%   │   ││   0x00007f038549e50b: movslq %r10d,%r11         ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@26 (line 75)
  0.10%    0.05%   │   ││   0x00007f038549e50e: test   %r9d,%r9d
                   │   ││   0x00007f038549e511: je     0x00007f038549e735  ;*invokevirtual testLong
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.05%            │   ││   0x00007f038549e517: mov    $0x5886687b8,%rcx  ;   {oop(a &apos;java/lang/Class&apos; = &apos;com/github/prasanthj/bloomfilter/BloomKFilter&apos;)}
  0.31%    0.12%   │   ││   0x00007f038549e521: mov    0x6c(%rcx),%r13d   ;*getstatic BYTE_ARRAY_8
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.05%    0.02%   │   ││   0x00007f038549e525: movsbl %r10b,%ecx         ;*i2b  ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@8 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.42%    0.03%   │   ││   0x00007f038549e529: mov    0xc(%r12,%r13,8),%edx  ; implicit exception: dispatches to 0x00007f038549e831
  0.47%    0.05%   │   ││   0x00007f038549e52e: cmp    $0x7,%edx
                   │   ││   0x00007f038549e531: jbe    0x00007f038549e75d
  0.78%    0.14%   │   ││   0x00007f038549e537: mov    %edi,0xc(%rsp)
           0.08%   │   ││   0x00007f038549e53b: mov    %rsi,0x10(%rsp)
           0.02%   │   ││   0x00007f038549e540: mov    %r8d,0x8(%rsp)
  0.10%            │   ││   0x00007f038549e545: mov    %ebx,0x28(%rsp)
  0.73%    0.09%   │   ││   0x00007f038549e549: mov    %rax,(%rsp)
  0.05%    0.08%   │   ││   0x00007f038549e54d: mov    %r10b,0x10(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@9 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.42%    0.10%   │   ││   0x00007f038549e552: lea    (%r12,%r9,8),%rbp  ;*getfield bf
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
  0.63%    0.19%   │   ││   0x00007f038549e556: mov    %r9d,0x18(%rsp)
  0.05%    0.03%   │   ││   0x00007f038549e55b: lea    (%r12,%r13,8),%rsi  ;*getstatic BYTE_ARRAY_8
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.06%   │   ││   0x00007f038549e55f: mov    %r11,%r8
  0.26%    0.06%   │   ││   0x00007f038549e562: sar    $0x38,%r8
  0.37%    0.12%   │   ││   0x00007f038549e566: mov    %r11,%r10
           0.02%   │   ││   0x00007f038549e569: sar    $0x30,%r10
  0.05%    0.05%   │   ││   0x00007f038549e56d: mov    %r8d,%r8d
  0.16%    0.41%   │   ││   0x00007f038549e570: mov    %r10d,%r10d
  0.21%    0.28%   │   ││   0x00007f038549e573: mov    %r11,%rcx
           0.01%   │   ││   0x00007f038549e576: sar    $0x28,%rcx
  0.05%    0.02%   │   ││   0x00007f038549e57a: mov    %r11,%r9
  0.10%    0.20%   │   ││   0x00007f038549e57d: sar    $0x20,%r9
  0.47%    0.43%   │   ││   0x00007f038549e581: mov    %ecx,%ecx
           0.07%   │   ││   0x00007f038549e583: mov    %r9d,%r9d
           0.02%   │   ││   0x00007f038549e586: mov    %r11,%rdi
  0.10%    0.13%   │   ││   0x00007f038549e589: sar    $0x18,%rdi
  0.47%    0.27%   │   ││   0x00007f038549e58d: mov    %r11,%rbx
  0.05%    0.08%   │   ││   0x00007f038549e590: sar    $0x10,%rbx
           0.05%   │   ││   0x00007f038549e594: mov    %edi,%edi
  0.21%    0.08%   │   ││   0x00007f038549e596: mov    %ebx,%ebx
  0.42%    0.03%   │   ││   0x00007f038549e598: sar    $0x8,%r11
           0.02%   │   ││   0x00007f038549e59c: mov    %r11d,%r11d
           0.01%   │   ││   0x00007f038549e59f: mov    %r11b,0x11(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@20 (line 253)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.94%    0.05%   │   ││   0x00007f038549e5a4: mov    %bl,0x12(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@31 (line 254)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.05%    0.01%   │   ││   0x00007f038549e5a9: mov    %dil,0x13(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@42 (line 255)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.47%    0.13%   │   ││   0x00007f038549e5ae: mov    %r9b,0x14(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@53 (line 256)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.05%    0.07%   │   ││   0x00007f038549e5b3: mov    %cl,0x15(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@64 (line 257)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.37%    0.33%   │   ││   0x00007f038549e5b8: mov    %r10b,0x16(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@76 (line 258)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.02%   │   ││   0x00007f038549e5bd: mov    %r8b,0x17(%r12,%r13,8)  ;*synchronization entry
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.68%    0.46%   │   ││   0x00007f038549e5c2: xor    %ecx,%ecx
           0.09%   │   ││   0x00007f038549e5c4: xchg   %ax,%ax
  0.05%    0.01%   │   ││   0x00007f038549e5c7: callq  0x00007f0385046160  ; OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=NarrowOop [40]=NarrowOop off=332}
                   │   ││                                                 ;*invokestatic hash64
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │   ││                                                 ;   {static_call}
  0.16%    0.49%   │   ││   0x00007f038549e5cc: mov    0x18(%rsp),%r11d
                   │   ││   0x00007f038549e5d1: mov    0x28(%r12,%r11,8),%r10d  ;*getfield totalBlockCount
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@37 (line 198)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.42%    0.36%   │   ││   0x00007f038549e5d6: mov    %eax,%r13d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@6 (line 187)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.26%    0.48%   │   ││   0x00007f038549e5d9: shr    $0x20,%rax
                   │   ││   0x00007f038549e5dd: mov    %eax,%r14d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@13 (line 188)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │   ││   0x00007f038549e5e0: mov    %r13d,%eax
  0.26%    1.24%   │   ││   0x00007f038549e5e3: add    %r14d,%eax         ;*iadd
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@20 (line 190)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.05%    0.55%   │   ││   0x00007f038549e5e6: mov    %eax,%r9d
                   │   ││   0x00007f038549e5e9: not    %r9d
  0.31%    1.12%   │   ││   0x00007f038549e5ec: test   %eax,%eax
  0.16%    0.43%   │   ││   0x00007f038549e5ee: cmovl  %r9d,%eax          ;*iload
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@34 (line 198)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.89%    3.49%   │   ││   0x00007f038549e5f2: test   %r10d,%r10d
                   │   ││   0x00007f038549e5f5: je     0x00007f038549e749  ;*irem
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@40 (line 198)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.02%   │   ││   0x00007f038549e5fb: mov    0xc(%r12,%r11,8),%ebp  ;*getfield k
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@58 (line 200)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.10%    0.14%   │   ││   0x00007f038549e600: cmp    $0x1,%ebp
                   ╰   ││   0x00007f038549e603: jl     0x00007f038549e4e0  ;*if_icmpgt
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.16%    0.72%       ││   0x00007f038549e609: mov    0x34(%r12,%r11,8),%r9d  ;*getfield bitSet
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@123 (line 210)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.37%    1.20%       ││   0x00007f038549e60e: cmp    $0x80000000,%eax
                    ╭  ││   0x00007f038549e613: jne    0x00007f038549e61d
                    │  ││   0x00007f038549e615: xor    %edx,%edx
                    │  ││   0x00007f038549e617: cmp    $0xffffffffffffffff,%r10d
                    │╭ ││   0x00007f038549e61b: je     0x00007f038549e621
           0.01%    ↘│ ││   0x00007f038549e61d: cltd   
  0.05%    0.16%     │ ││   0x00007f038549e61e: idiv   %r10d
  8.20%   11.81%     ↘ ││   0x00007f038549e621: imul   0x30(%r12,%r11,8),%edx  ;*imul
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@49 (line 199)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  1.41%    0.36%       ││   0x00007f038549e627: mov    0xc(%r12,%r9,8),%r9d  ;*getfield data
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@126 (line 210)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                       ││                                                 ; implicit exception: dispatches to 0x00007f038549e7f6
  0.16%    0.66%       ││   0x00007f038549e62c: mov    0xc(%r12,%r9,8),%eax  ;*laload
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                       ││                                                 ; implicit exception: dispatches to 0x00007f038549e7f6
                       ││   0x00007f038549e631: cmp    $0x7ffffffe,%ebp
                       ││   0x00007f038549e637: jg     0x00007f038549e791
                       ││   0x00007f038549e63d: vmovd  %r11d,%xmm1
  0.52%    0.10%       ││   0x00007f038549e642: mov    0x2c(%r12,%r11,8),%r8d
  0.10%    0.52%       ││   0x00007f038549e647: lea    (%r12,%r9,8),%r10
                       ││   0x00007f038549e64b: dec    %r8d
                       ││   0x00007f038549e64e: movslq %edx,%r11
  0.47%    0.14%       ││   0x00007f038549e651: mov    $0x1,%edi
  0.05%    1.05%       ││   0x00007f038549e656: mov    %r13d,0x18(%rsp)
                       ││   0x00007f038549e65b: nopl   0x0(%rax,%rax,1)   ;*iload
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@64 (line 201)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.05%                ││↗  0x00007f038549e660: mov    %edi,%r13d
  0.31%    0.12%       │││  0x00007f038549e663: inc    %r13d              ;*iadd
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@69 (line 201)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.31%    0.83%       │││  0x00007f038549e666: mov    %r13d,%ebx
  0.21%    0.01%       │││  0x00007f038549e669: imul   %r14d,%ebx
  0.89%    0.20%       │││  0x00007f038549e66d: add    0x18(%rsp),%ebx    ;*iadd
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@73 (line 201)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  1.36%    0.12%       │││  0x00007f038549e671: mov    %ebx,%esi
  0.16%    0.66%       │││  0x00007f038549e673: not    %esi
  0.47%    0.14%       │││  0x00007f038549e675: test   %ebx,%ebx
                       │││  0x00007f038549e677: cmovl  %esi,%ebx
  1.04%    0.57%       │││  0x00007f038549e67a: mov    %r8d,%esi
  0.26%    0.08%       │││  0x00007f038549e67d: and    %ebx,%esi          ;*iand
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@95 (line 206)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.21%    0.01%       │││  0x00007f038549e67f: mov    %esi,%ebx
  0.37%    0.03%       │││  0x00007f038549e681: and    $0xffffffffffffffc0,%ebx
  0.47%    0.58%       │││  0x00007f038549e684: mov    %esi,%ecx
  0.26%    0.10%       │││  0x00007f038549e686: sub    %ebx,%ecx          ;*isub
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@119 (line 209)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.52%    0.14%       │││  0x00007f038549e688: shr    $0x6,%esi          ;*iushr
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@102 (line 207)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.42%    0.03%       │││  0x00007f038549e68b: mov    %esi,%ebx
  0.26%    0.48%       │││  0x00007f038549e68d: add    %edx,%ebx          ;*iadd
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@109 (line 208)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.42%    0.17%       │││  0x00007f038549e68f: cmp    %eax,%ebx
                      ╭│││  0x00007f038549e691: jae    0x00007f038549e6c1  ;*laload
                      ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                      ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                      ││││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.31%    0.40%      ││││  0x00007f038549e693: mov    $0x1,%ebx
  0.42%               ││││  0x00007f038549e698: shl    %cl,%rbx
  0.73%    1.28%      ││││  0x00007f038549e69b: movslq %esi,%rcx
                      ││││  0x00007f038549e69e: mov    %r11,%rdi
  0.84%    0.03%      ││││  0x00007f038549e6a1: add    %rcx,%rdi
  0.42%    0.60%      ││││  0x00007f038549e6a4: test   %rbx,0x10(%r10,%rdi,8)
  0.05%    0.01%      │╰││  0x00007f038549e6a9: je     0x00007f038549e4e0  ;*ifne
                      │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@143 (line 211)
                      │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                      │ ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
 16.45%    9.25%      │ ││  0x00007f038549e6af: mov    %ebp,%ebx
  1.62%    0.85%      │ ││  0x00007f038549e6b1: inc    %ebx
  0.37%    0.56%      │ ││  0x00007f038549e6b3: cmp    %ebx,%r13d
                      │ ╰│  0x00007f038549e6b6: jge    0x00007f038549e4e0  ;*if_icmpgt
                      │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                      │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                      │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.26%    0.12%      │  │  0x00007f038549e6bc: mov    %r13d,%edi
  0.10%    0.06%      │  ╰  0x00007f038549e6bf: jmp    0x00007f038549e660
                      ↘     0x00007f038549e6c1: mov    $0xffffffe4,%esi
                            0x00007f038549e6c6: mov    (%rsp),%rbp
                            0x00007f038549e6ca: mov    %rax,-0x8(%rsp)
                            0x00007f038549e6cf: mov    0x8(%rsp),%eax
                            0x00007f038549e6d3: mov    %eax,(%rsp)
                            0x00007f038549e6d6: mov    -0x8(%rsp),%rax
                            0x00007f038549e6db: mov    %rax,-0x8(%rsp)
                            0x00007f038549e6e0: mov    0xc(%rsp),%eax
                            0x00007f038549e6e4: mov    %eax,0x4(%rsp)
                            0x00007f038549e6e8: mov    -0x8(%rsp),%rax
....................................................................................................
 76.40%   58.91%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 582 (300 bytes) 

                     Decoding compiled method 0x00007f038548bad0:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007f037ca8a6f0} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  0.52%    1.67%       0x00007f038548bc60: mov    %eax,-0x14000(%rsp)
  0.10%    0.12%       0x00007f038548bc67: push   %rbp
  0.05%    0.30%       0x00007f038548bc68: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  0.52%    0.92%       0x00007f038548bc6c: mov    %edx,0x8(%rsp)
  0.31%    0.42%       0x00007f038548bc70: mov    %edx,%ebx
           0.23%       0x00007f038548bc72: sar    $0x3,%ebx          ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  0.42%    0.78%       0x00007f038548bc75: movslq %ecx,%r14          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
           0.06%       0x00007f038548bc78: mov    $0x87c37b91114253d5,%rdi
  0.10%    0.10%       0x00007f038548bc82: test   %ebx,%ebx
                  ╭    0x00007f038548bc84: jle    0x00007f038548bd6c  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.42%    0.42%  │    0x00007f038548bc8a: mov    0xc(%rsi),%r10d    ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007f038548c0d1
  0.42%    0.74%  │    0x00007f038548bc8e: xor    %r9d,%r9d
  0.05%    0.08%  │    0x00007f038548bc91: xor    %r8d,%r8d
  0.10%    0.23%  │    0x00007f038548bc94: nopl   0x0(%rax,%rax,1)
  0.16%    0.20%  │    0x00007f038548bc9c: xchg   %ax,%ax            ;*iload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  0.26%    1.22%  │ ↗  0x00007f038548bca0: cmp    %r10d,%r9d
                  │ │  0x00007f038548bca3: jae    0x00007f038548bf1e  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
  0.05%    0.06%  │ │  0x00007f038548bca9: movzbq 0x10(%rsi,%r9,1),%rcx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.05%    0.20%  │ │  0x00007f038548bcaf: mov    %r9d,%r11d
  0.05%    0.10%  │ │  0x00007f038548bcb2: add    $0x7,%r11d
  0.21%    0.72%  │ │  0x00007f038548bcb6: cmp    %r10d,%r11d
                  │ │  0x00007f038548bcb9: jae    0x00007f038548bf51  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
           0.06%  │ │  0x00007f038548bcbf: mov    %rcx,(%rsp)
           0.21%  │ │  0x00007f038548bcc3: movslq %r9d,%r11          ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
  0.16%    0.43%  │ │  0x00007f038548bcc6: movzbq 0x11(%rsi,%r11,1),%r9
  0.42%    0.88%  │ │  0x00007f038548bccc: movzbq 0x17(%rsi,%r11,1),%rcx
           0.05%  │ │  0x00007f038548bcd2: movzbq 0x12(%rsi,%r11,1),%rdx
  0.05%    0.21%  │ │  0x00007f038548bcd8: movzbq 0x13(%rsi,%r11,1),%rax
  0.05%    0.42%  │ │  0x00007f038548bcde: movzbq 0x14(%rsi,%r11,1),%rbp
  0.31%    1.05%  │ │  0x00007f038548bce4: movzbq 0x15(%rsi,%r11,1),%r13
           0.06%  │ │  0x00007f038548bcea: movzbq 0x16(%rsi,%r11,1),%r11
  0.05%    0.24%  │ │  0x00007f038548bcf0: shl    $0x8,%r9
  0.05%    0.36%  │ │  0x00007f038548bcf4: or     (%rsp),%r9
  0.31%    1.00%  │ │  0x00007f038548bcf8: shl    $0x30,%r11
           0.03%  │ │  0x00007f038548bcfc: shl    $0x28,%r13
  0.10%    0.24%  │ │  0x00007f038548bd00: shl    $0x20,%rbp
  0.16%    0.34%  │ │  0x00007f038548bd04: shl    $0x18,%rax
  0.10%    1.01%  │ │  0x00007f038548bd08: shl    $0x10,%rdx
           0.02%  │ │  0x00007f038548bd0c: or     %rdx,%r9
  0.21%    0.16%  │ │  0x00007f038548bd0f: or     %rax,%r9
  0.10%    0.26%  │ │  0x00007f038548bd12: or     %rbp,%r9
  0.37%    0.93%  │ │  0x00007f038548bd15: or     %r13,%r9
           0.06%  │ │  0x00007f038548bd18: or     %r11,%r9
  0.16%    0.14%  │ │  0x00007f038548bd1b: shl    $0x38,%rcx
           0.38%  │ │  0x00007f038548bd1f: or     %rcx,%r9
  0.26%    0.72%  │ │  0x00007f038548bd22: imul   %rdi,%r9           ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.57%    0.65%  │ │  0x00007f038548bd26: rol    $0x1f,%r9
  0.47%    0.38%  │ │  0x00007f038548bd2a: mov    $0x4cf5ad432745937f,%r11
           0.01%  │ │  0x00007f038548bd34: imul   %r11,%r9
  1.25%    1.89%  │ │  0x00007f038548bd38: xor    %r14,%r9           ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.37%    0.71%  │ │  0x00007f038548bd3b: rol    $0x1b,%r9          ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.16%    1.19%  │ │  0x00007f038548bd3f: mov    %r9,%r14
  0.05%    0.03%  │ │  0x00007f038548bd42: shl    $0x2,%r14
  0.57%    1.27%  │ │  0x00007f038548bd46: add    %r9,%r14
  0.37%    1.27%  │ │  0x00007f038548bd49: add    $0x52dce729,%r14   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.31%    1.01%  │ │  0x00007f038548bd50: mov    %r8d,%ecx
           0.03%  │ │  0x00007f038548bd53: inc    %ecx               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
  0.16%    0.23%  │ │  0x00007f038548bd55: cmp    %ebx,%ecx
                  │╭│  0x00007f038548bd57: jge    0x00007f038548bd6c  ;*if_icmpge
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │││  0x00007f038548bd59: shl    $0x3,%r8d
                  │││  0x00007f038548bd5d: mov    %r8d,%r9d
                  │││  0x00007f038548bd60: add    $0x8,%r9d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007f038548bd64: mov    %ecx,%r8d
                  ││╰  0x00007f038548bd67: jmpq   0x00007f038548bca0  ;*if_icmpge
                  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.05%           ↘↘   0x00007f038548bd6c: mov    0x8(%rsp),%r8d
  0.26%    0.86%       0x00007f038548bd71: and    $0xfffffffffffffff8,%r8d  ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
           0.08%       0x00007f038548bd75: mov    0x8(%rsp),%r10d
  0.16%    0.35%       0x00007f038548bd7a: sub    %r8d,%r10d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
                       0x00007f038548bd7d: movslq %r8d,%r9           ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.16%    0.96%       0x00007f038548bd80: xor    %ecx,%ecx
  0.10%    0.07%       0x00007f038548bd82: cmp    $0x4,%r10d
                       0x00007f038548bd86: je     0x00007f038548be2d
  0.10%    0.45%       0x00007f038548bd8c: cmp    $0x4,%r10d
                       0x00007f038548bd90: jle    0x00007f038548bdad
                       0x00007f038548bd92: cmp    $0x7,%r10d
                       0x00007f038548bd96: je     0x00007f038548bdd0
                       0x00007f038548bd98: cmp    $0x7,%r10d
                       0x00007f038548bd9c: jg     0x00007f038548bed0
                       0x00007f038548bda2: cmp    $0x6,%r10d
                       0x00007f038548bda6: je     0x00007f038548bded
                       0x00007f038548bda8: xor    %r11d,%r11d
                       0x00007f038548bdab: jmp    0x00007f038548be0d
                       0x00007f038548bdad: cmp    $0x2,%r10d
....................................................................................................
 11.80%   29.30%  <total for region 2>

....[Hottest Regions]...............................................................................
 76.40%   58.91%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 618 (479 bytes) 
 11.80%   29.30%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 582 (300 bytes) 
  5.12%    7.29%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 582 (72 bytes) 
  1.78%    0.20%   [kernel.kallsyms]  native_write_msr_safe (0 bytes) 
  0.57%    1.49%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 582 (20 bytes) 
  0.21%            [kernel.kallsyms]  _raw_spin_lock_irqsave (0 bytes) 
  0.21%            [kernel.kallsyms]  apic_timer_interrupt (0 bytes) 
  0.16%            [kernel.kallsyms]  cpuacct_account_field (11 bytes) 
  0.16%            [kernel.kallsyms]  page_fault (0 bytes) 
  0.16%    0.12%           libjvm.so  [unknown] (76 bytes) 
  0.10%            [kernel.kallsyms]  run_timer_softirq (0 bytes) 
  0.10%    0.05%   [kernel.kallsyms]  __srcu_read_unlock (3 bytes) 
  0.10%            [kernel.kallsyms]  ktime_get (0 bytes) 
  0.10%            [kernel.kallsyms]  ___perf_sw_event (31 bytes) 
  0.10%    0.01%   [kernel.kallsyms]  fget_light (28 bytes) 
  0.10%    0.02%   [kernel.kallsyms]  timerqueue_add (0 bytes) 
  0.10%    0.02%        libc-2.17.so  free (3 bytes) 
  0.10%           libpthread-2.17.so  __pthread_disable_asynccancel (0 bytes) 
  0.05%            [kernel.kallsyms]  native_sched_clock (0 bytes) 
  0.05%    0.01%   [kernel.kallsyms]  local_apic_timer_interrupt (26 bytes) 
  2.51%    2.58%  <...other 179 warm regions...>
....................................................................................................
100.00%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 76.40%   58.91%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 618 
 17.49%   38.08%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 582 
  1.78%    0.20%   [kernel.kallsyms]  native_write_msr_safe 
  0.47%    0.57%           libjvm.so  [unknown] 
  0.21%            [kernel.kallsyms]  apic_timer_interrupt 
  0.21%            [kernel.kallsyms]  _raw_spin_lock_irqsave 
  0.16%            [kernel.kallsyms]  cpuacct_account_field 
  0.16%            [kernel.kallsyms]  page_fault 
  0.10%           libpthread-2.17.so  __pthread_disable_asynccancel 
  0.10%            [kernel.kallsyms]  trigger_load_balance 
  0.10%    0.12%        libc-2.17.so  vfprintf 
  0.10%            [kernel.kallsyms]  ktime_get 
  0.10%    0.02%   [kernel.kallsyms]  file_update_time 
  0.10%    0.01%   [kernel.kallsyms]  ___perf_sw_event 
  0.10%    0.05%   [kernel.kallsyms]  __srcu_read_unlock 
  0.10%    0.02%        libc-2.17.so  free 
  0.10%            [kernel.kallsyms]  run_timer_softirq 
  0.10%    0.03%   [kernel.kallsyms]  fget_light 
  0.10%    0.02%   [kernel.kallsyms]  timerqueue_add 
  0.05%                 libc-2.17.so  _IO_do_write@@GLIBC_2.2.5 
  1.93%    0.28%  <...other 37 warm methods...>
....................................................................................................
100.00%   98.31%  <totals>

....[Distribution by Source]........................................................................
 93.89%   96.99%         C2, level 4
  4.91%    1.87%   [kernel.kallsyms]
  0.47%    0.57%           libjvm.so
  0.47%    0.33%        libc-2.17.so
  0.16%    0.09%  libpthread-2.17.so
  0.05%                      [ixgbe]
  0.05%    0.02%         C1, level 3
....................................................................................................
100.00%  100.00%  <totals>


Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·perf":
Perf stats:
--------------------------------------------------

      25605.584507      task-clock (msec)         #    0.834 CPUs utilized          
             1,409      context-switches          #    0.055 K/sec                  
               841      cpu-migrations            #    0.033 K/sec                  
           117,045      page-faults               #    0.005 M/sec                  
    54,572,392,597      cycles                    #    2.131 GHz                      (84.16%)
    22,698,794,640      stalled-cycles-frontend   #   41.59% frontend cycles idle     (84.22%)
   <not supported>      stalled-cycles-backend   
    77,358,552,093      instructions              #    1.42  insns per cycle        
                                                  #    0.29  stalled cycles per insn  (84.26%)
     8,028,793,043      branches                  #  313.556 M/sec                    (72.87%)
       280,385,620      branch-misses             #    3.49% of all branches          (34.29%)
    12,593,198,196      L1-dcache-loads           #  491.815 M/sec                    (5.24%)
       563,975,564      L1-dcache-load-misses     #    4.48% of all L1-dcache hits    (2.75%)
       382,594,990      LLC-loads                 #   14.942 M/sec                    (2.73%)
        21,866,251      LLC-load-misses           #    5.72% of all LL-cache hits     (4.09%)
   <not supported>      L1-icache-loads          
        55,210,636      L1-icache-load-misses     #    2.156 M/sec                    (5.44%)
    12,348,858,058      dTLB-loads                #  482.272 M/sec                    (5.28%)
       216,747,821      dTLB-load-misses          #    1.76% of all dTLB cache hits   (2.72%)
           885,089      iTLB-loads                #    0.035 M/sec                    (2.74%)
           602,357      iTLB-load-misses          #   68.06% of all iTLB cache hits   (4.08%)
   <not supported>      L1-dcache-prefetches     
        63,817,107      L1-dcache-prefetch-misses #    2.492 M/sec                    (5.43%)

      30.712524842 seconds time elapsed



# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: -XX:AllocatePrefetchStyle=2
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe
# Parameters: (blockSize = 4, numEntries = 10000)

# Run progress: 50.00% complete, ETA 00:02:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 66.334 ns/op
# Warmup Iteration   2: 71.024 ns/op
# Warmup Iteration   3: 61.727 ns/op
# Warmup Iteration   4: 62.300 ns/op
# Warmup Iteration   5: 61.211 ns/op
Iteration   1: 61.476 ns/op
Iteration   2: 62.504 ns/op
Iteration   3: 61.789 ns/op
Iteration   4: 63.397 ns/op
Iteration   5: 62.545 ns/op
Iteration   6: 63.985 ns/op
Iteration   7: 63.343 ns/op
Iteration   8: 64.518 ns/op
Iteration   9: 61.897 ns/op
Iteration  10: 64.274 ns/op
# Processing profiler results: LinuxPerfAsmProfiler LinuxPerfProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe":
  62.973 ±(99.9%) 1.643 ns/op [Average]
  (min, avg, max) = (61.476, 62.973, 64.518), stdev = 1.087
  CI (99.9%): [61.330, 64.616] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·asm":
PrintAssembly processed: 188031 total address lines.
Perf output processed (skipped 13.440 seconds):
 Column 1: cycles (2361 events)
 Column 2: instructions (7567 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 616 (479 bytes) 

                            0x00007fc22549c88c: dec    %r11d
                            0x00007fc22549c88f: cmp    %r8d,%r11d
                            0x00007fc22549c892: jae    0x00007fc22549cb8d  ;*aload_1
                                                                          ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
                            0x00007fc22549c898: lea    (%r12,%rbx,8),%rsi  ;*getfield probeArray
                                                                          ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@1 (line 74)
                            0x00007fc22549c89c: xor    %edi,%edi
                  ╭         0x00007fc22549c89e: jmp    0x00007fc22549c8c2  ;*invokevirtual testBytes
                  │                                                       ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                  │                                                       ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  3.35%    2.76%  │↗   ↗↗   0x00007fc22549c8a0: mov    0xc(%rsp),%edi
  3.30%    3.18%  ││   ││   0x00007fc22549c8a4: inc    %edi               ;*iinc
                  ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@31 (line 74)
  0.17%    0.09%  ││   ││   0x00007fc22549c8a6: cmp    0x8(%rsp),%edi
                  ││   ││   0x00007fc22549c8aa: jge    0x00007fc22549cae9  ;*if_icmpge
                  ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@12 (line 74)
  0.25%    0.08%  ││   ││   0x00007fc22549c8b0: mov    (%rsp),%rax
  0.25%    0.19%  ││   ││   0x00007fc22549c8b4: mov    0x28(%rsp),%ebx
  0.30%    0.03%  ││   ││   0x00007fc22549c8b8: mov    0x8(%rsp),%r8d
           0.03%  ││   ││   0x00007fc22549c8bd: mov    0x10(%rsp),%rsi    ;*aload_1
                  ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
  0.34%    0.16%  ↘│   ││   0x00007fc22549c8c2: mov    0x10(%rsi,%rdi,4),%r10d  ;*iaload
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@17 (line 74)
  3.77%    0.26%   │   ││   0x00007fc22549c8c7: mov    0x18(%rax),%r9d    ;*getfield bf
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
  0.34%    0.01%   │   ││   0x00007fc22549c8cb: movslq %r10d,%r11         ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@26 (line 75)
  0.30%    0.03%   │   ││   0x00007fc22549c8ce: test   %r9d,%r9d
                   │   ││   0x00007fc22549c8d1: je     0x00007fc22549caf5  ;*invokevirtual testLong
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.04%    0.08%   │   ││   0x00007fc22549c8d7: mov    $0x5886687b8,%rcx  ;   {oop(a &apos;java/lang/Class&apos; = &apos;com/github/prasanthj/bloomfilter/BloomKFilter&apos;)}
  0.30%    0.07%   │   ││   0x00007fc22549c8e1: mov    0x6c(%rcx),%r13d   ;*getstatic BYTE_ARRAY_8
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.17%    0.15%   │   ││   0x00007fc22549c8e5: movsbl %r10b,%ecx         ;*i2b  ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@8 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.38%    0.01%   │   ││   0x00007fc22549c8e9: mov    0xc(%r12,%r13,8),%edx  ; implicit exception: dispatches to 0x00007fc22549cbf1
  0.55%    0.07%   │   ││   0x00007fc22549c8ee: cmp    $0x7,%edx
                   │   ││   0x00007fc22549c8f1: jbe    0x00007fc22549cb1d
  0.47%    0.15%   │   ││   0x00007fc22549c8f7: mov    %edi,0xc(%rsp)
  0.21%    0.05%   │   ││   0x00007fc22549c8fb: mov    %rsi,0x10(%rsp)
           0.03%   │   ││   0x00007fc22549c900: mov    %r8d,0x8(%rsp)
  0.04%    0.05%   │   ││   0x00007fc22549c905: mov    %ebx,0x28(%rsp)
  0.55%    0.20%   │   ││   0x00007fc22549c909: mov    %rax,(%rsp)
  0.30%    0.01%   │   ││   0x00007fc22549c90d: mov    %r10b,0x10(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@9 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.51%    0.16%   │   ││   0x00007fc22549c912: lea    (%r12,%r9,8),%rbp  ;*getfield bf
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
  0.30%    0.28%   │   ││   0x00007fc22549c916: mov    %r9d,0x18(%rsp)
  0.42%    0.59%   │   ││   0x00007fc22549c91b: lea    (%r12,%r13,8),%rsi  ;*getstatic BYTE_ARRAY_8
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.01%   │   ││   0x00007fc22549c91f: mov    %r11,%r8
  0.25%    0.13%   │   ││   0x00007fc22549c922: sar    $0x38,%r8
  0.47%    0.29%   │   ││   0x00007fc22549c926: mov    %r11,%r10
  0.38%    0.49%   │   ││   0x00007fc22549c929: sar    $0x30,%r10
  0.04%    0.03%   │   ││   0x00007fc22549c92d: mov    %r8d,%r8d
  0.30%    0.50%   │   ││   0x00007fc22549c930: mov    %r10d,%r10d
  0.25%    0.29%   │   ││   0x00007fc22549c933: mov    %r11,%rcx
  0.25%    0.33%   │   ││   0x00007fc22549c936: sar    $0x28,%rcx
  0.04%            │   ││   0x00007fc22549c93a: mov    %r11,%r9
  0.04%    0.20%   │   ││   0x00007fc22549c93d: sar    $0x20,%r9
  0.13%    0.42%   │   ││   0x00007fc22549c941: mov    %ecx,%ecx
  0.21%    0.52%   │   ││   0x00007fc22549c943: mov    %r9d,%r9d
           0.03%   │   ││   0x00007fc22549c946: mov    %r11,%rdi
  0.08%    0.13%   │   ││   0x00007fc22549c949: sar    $0x18,%rdi
  0.38%    0.65%   │   ││   0x00007fc22549c94d: mov    %r11,%rbx
  0.38%    0.57%   │   ││   0x00007fc22549c950: sar    $0x10,%rbx
  0.04%            │   ││   0x00007fc22549c954: mov    %edi,%edi
  0.17%    0.11%   │   ││   0x00007fc22549c956: mov    %ebx,%ebx
  0.25%    0.15%   │   ││   0x00007fc22549c958: sar    $0x8,%r11
  0.42%    0.45%   │   ││   0x00007fc22549c95c: mov    %r11d,%r11d
           0.01%   │   ││   0x00007fc22549c95f: mov    %r11b,0x11(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@20 (line 253)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.34%    0.22%   │   ││   0x00007fc22549c964: mov    %bl,0x12(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@31 (line 254)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.42%    0.59%   │   ││   0x00007fc22549c969: mov    %dil,0x13(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@42 (line 255)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.51%    0.30%   │   ││   0x00007fc22549c96e: mov    %r9b,0x14(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@53 (line 256)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.25%    0.89%   │   ││   0x00007fc22549c973: mov    %cl,0x15(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@64 (line 257)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.68%    0.26%   │   ││   0x00007fc22549c978: mov    %r10b,0x16(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@76 (line 258)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.30%    0.25%   │   ││   0x00007fc22549c97d: mov    %r8b,0x17(%r12,%r13,8)  ;*synchronization entry
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.25%    0.73%   │   ││   0x00007fc22549c982: xor    %ecx,%ecx
  0.21%    0.56%   │   ││   0x00007fc22549c984: xchg   %ax,%ax
           0.01%   │   ││   0x00007fc22549c987: callq  0x00007fc225046160  ; OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=NarrowOop [40]=NarrowOop off=332}
                   │   ││                                                 ;*invokestatic hash64
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │   ││                                                 ;   {static_call}
  0.13%    0.09%   │   ││   0x00007fc22549c98c: mov    0x18(%rsp),%r11d
  0.13%    0.49%   │   ││   0x00007fc22549c991: mov    0x28(%r12,%r11,8),%r10d  ;*getfield totalBlockCount
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@37 (line 198)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.55%    0.29%   │   ││   0x00007fc22549c996: mov    %eax,%r13d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@6 (line 187)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.04%    0.08%   │   ││   0x00007fc22549c999: shr    $0x20,%rax
  0.42%    0.28%   │   ││   0x00007fc22549c99d: mov    %eax,%r14d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@13 (line 188)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.01%   │   ││   0x00007fc22549c9a0: mov    %r13d,%eax
  0.38%    1.23%   │   ││   0x00007fc22549c9a3: add    %r14d,%eax         ;*iadd
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@20 (line 190)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.13%    0.13%   │   ││   0x00007fc22549c9a6: mov    %eax,%r9d
  0.30%    0.49%   │   ││   0x00007fc22549c9a9: not    %r9d
  0.42%    0.95%   │   ││   0x00007fc22549c9ac: test   %eax,%eax
  0.21%    0.48%   │   ││   0x00007fc22549c9ae: cmovl  %r9d,%eax          ;*iload
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@34 (line 198)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  1.14%    2.92%   │   ││   0x00007fc22549c9b2: test   %r10d,%r10d
                   │   ││   0x00007fc22549c9b5: je     0x00007fc22549cb09  ;*irem
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@40 (line 198)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │   ││   0x00007fc22549c9bb: mov    0xc(%r12,%r11,8),%ebp  ;*getfield k
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@58 (line 200)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.01%   │   ││   0x00007fc22549c9c0: cmp    $0x1,%ebp
                   ╰   ││   0x00007fc22549c9c3: jl     0x00007fc22549c8a0  ;*if_icmpgt
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.04%    0.08%       ││   0x00007fc22549c9c9: mov    0x34(%r12,%r11,8),%r9d  ;*getfield bitSet
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@123 (line 210)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.68%    1.43%       ││   0x00007fc22549c9ce: cmp    $0x80000000,%eax
                    ╭  ││   0x00007fc22549c9d3: jne    0x00007fc22549c9dd
                    │  ││   0x00007fc22549c9d5: xor    %edx,%edx
                    │  ││   0x00007fc22549c9d7: cmp    $0xffffffffffffffff,%r10d
                    │╭ ││   0x00007fc22549c9db: je     0x00007fc22549c9e1
           0.03%    ↘│ ││   0x00007fc22549c9dd: cltd   
  0.04%    0.05%     │ ││   0x00007fc22549c9de: idiv   %r10d
 17.66%   20.02%     ↘ ││   0x00007fc22549c9e1: imul   0x30(%r12,%r11,8),%edx  ;*imul
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@49 (line 199)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  2.16%    0.04%       ││   0x00007fc22549c9e7: mov    0xc(%r12,%r9,8),%r9d  ;*getfield data
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@126 (line 210)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                       ││                                                 ; implicit exception: dispatches to 0x00007fc22549cbb6
                       ││   0x00007fc22549c9ec: mov    0xc(%r12,%r9,8),%eax  ;*laload
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                       ││                                                 ; implicit exception: dispatches to 0x00007fc22549cbb6
                       ││   0x00007fc22549c9f1: cmp    $0x7ffffffe,%ebp
                       ││   0x00007fc22549c9f7: jg     0x00007fc22549cb51
                       ││   0x00007fc22549c9fd: vmovd  %r11d,%xmm1
  0.72%                ││   0x00007fc22549ca02: mov    0x2c(%r12,%r11,8),%r8d
                       ││   0x00007fc22549ca07: lea    (%r12,%r9,8),%r10
                       ││   0x00007fc22549ca0b: dec    %r8d
                       ││   0x00007fc22549ca0e: movslq %edx,%r11
  0.76%                ││   0x00007fc22549ca11: mov    $0x1,%edi
                       ││   0x00007fc22549ca16: mov    %r13d,0x18(%rsp)
                       ││   0x00007fc22549ca1b: nopl   0x0(%rax,%rax,1)   ;*iload
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@64 (line 201)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                       ││↗  0x00007fc22549ca20: mov    %edi,%r13d
  0.68%    0.01%       │││  0x00007fc22549ca23: inc    %r13d              ;*iadd
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@69 (line 201)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.25%    0.11%       │││  0x00007fc22549ca26: mov    %r13d,%ebx
  0.13%    0.08%       │││  0x00007fc22549ca29: imul   %r14d,%ebx
  0.72%    0.29%       │││  0x00007fc22549ca2d: add    0x18(%rsp),%ebx    ;*iadd
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@73 (line 201)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  2.24%    0.16%       │││  0x00007fc22549ca31: mov    %ebx,%esi
  0.08%    0.01%       │││  0x00007fc22549ca33: not    %esi
  0.42%    0.12%       │││  0x00007fc22549ca35: test   %ebx,%ebx
  0.13%    0.07%       │││  0x00007fc22549ca37: cmovl  %esi,%ebx
  1.95%    0.03%       │││  0x00007fc22549ca3a: mov    %r8d,%esi
  0.04%    0.05%       │││  0x00007fc22549ca3d: and    %ebx,%esi          ;*iand
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@95 (line 206)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.38%    0.01%       │││  0x00007fc22549ca3f: mov    %esi,%ebx
  0.47%    0.01%       │││  0x00007fc22549ca41: and    $0xffffffffffffffc0,%ebx
  0.17%    0.03%       │││  0x00007fc22549ca44: mov    %esi,%ecx
  0.13%    0.22%       │││  0x00007fc22549ca46: sub    %ebx,%ecx          ;*isub
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@119 (line 209)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.51%    0.15%       │││  0x00007fc22549ca48: shr    $0x6,%esi          ;*iushr
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@102 (line 207)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.80%                │││  0x00007fc22549ca4b: mov    %esi,%ebx
  0.08%    0.03%       │││  0x00007fc22549ca4d: add    %edx,%ebx          ;*iadd
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@109 (line 208)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.25%    0.45%       │││  0x00007fc22549ca4f: cmp    %eax,%ebx
                      ╭│││  0x00007fc22549ca51: jae    0x00007fc22549ca81  ;*laload
                      ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                      ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                      ││││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.47%    0.59%      ││││  0x00007fc22549ca53: mov    $0x1,%ebx
  0.76%               ││││  0x00007fc22549ca58: shl    %cl,%rbx
  0.59%    1.19%      ││││  0x00007fc22549ca5b: movslq %esi,%rcx
  0.13%    0.17%      ││││  0x00007fc22549ca5e: mov    %r11,%rdi
  1.02%               ││││  0x00007fc22549ca61: add    %rcx,%rdi
  0.04%    0.04%      ││││  0x00007fc22549ca64: test   %rbx,0x10(%r10,%rdi,8)
                      │╰││  0x00007fc22549ca69: je     0x00007fc22549c8a0  ;*ifne
                      │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@143 (line 211)
                      │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                      │ ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  4.74%    3.29%      │ ││  0x00007fc22549ca6f: mov    %ebp,%ebx
  2.33%    3.69%      │ ││  0x00007fc22549ca71: inc    %ebx
  0.89%    0.86%      │ ││  0x00007fc22549ca73: cmp    %ebx,%r13d
                      │ ╰│  0x00007fc22549ca76: jge    0x00007fc22549c8a0  ;*if_icmpgt
                      │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                      │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                      │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.42%    0.21%      │  │  0x00007fc22549ca7c: mov    %r13d,%edi
  0.08%    0.09%      │  ╰  0x00007fc22549ca7f: jmp    0x00007fc22549ca20
                      ↘     0x00007fc22549ca81: mov    $0xffffffe4,%esi
                            0x00007fc22549ca86: mov    (%rsp),%rbp
                            0x00007fc22549ca8a: mov    %rax,-0x8(%rsp)
                            0x00007fc22549ca8f: mov    0x8(%rsp),%eax
                            0x00007fc22549ca93: mov    %eax,(%rsp)
                            0x00007fc22549ca96: mov    -0x8(%rsp),%rax
                            0x00007fc22549ca9b: mov    %rax,-0x8(%rsp)
                            0x00007fc22549caa0: mov    0xc(%rsp),%eax
                            0x00007fc22549caa4: mov    %eax,0x4(%rsp)
                            0x00007fc22549caa8: mov    -0x8(%rsp),%rax
....................................................................................................
 70.52%   58.89%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 583 (300 bytes) 

                     Decoding compiled method 0x00007fc225485ed0:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007fc23876b6f0} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  0.47%    0.99%       0x00007fc225486060: mov    %eax,-0x14000(%rsp)
  0.51%    0.71%       0x00007fc225486067: push   %rbp
  0.13%    0.21%       0x00007fc225486068: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  0.51%    0.93%       0x00007fc22548606c: mov    %edx,0x8(%rsp)
  0.72%    0.42%       0x00007fc225486070: mov    %edx,%ebx
  0.38%    0.08%       0x00007fc225486072: sar    $0x3,%ebx          ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  0.25%    0.49%       0x00007fc225486075: movslq %ecx,%r14          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
  0.21%    0.78%       0x00007fc225486078: mov    $0x87c37b91114253d5,%rdi
  0.08%    0.01%       0x00007fc225486082: test   %ebx,%ebx
                  ╭    0x00007fc225486084: jle    0x00007fc22548616c  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.17%    0.59%  │    0x00007fc22548608a: mov    0xc(%rsi),%r10d    ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007fc2254864d1
  0.34%    0.46%  │    0x00007fc22548608e: xor    %r9d,%r9d
  0.30%    0.71%  │    0x00007fc225486091: xor    %r8d,%r8d
           0.15%  │    0x00007fc225486094: nopl   0x0(%rax,%rax,1)
  0.30%    0.20%  │    0x00007fc22548609c: xchg   %ax,%ax            ;*iload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  0.30%    0.62%  │ ↗  0x00007fc2254860a0: cmp    %r10d,%r9d
                  │ │  0x00007fc2254860a3: jae    0x00007fc22548631e  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
  0.08%    0.36%  │ │  0x00007fc2254860a9: movzbq 0x10(%rsi,%r9,1),%rcx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.08%    0.11%  │ │  0x00007fc2254860af: mov    %r9d,%r11d
  0.38%    0.03%  │ │  0x00007fc2254860b2: add    $0x7,%r11d
  0.47%    0.44%  │ │  0x00007fc2254860b6: cmp    %r10d,%r11d
                  │ │  0x00007fc2254860b9: jae    0x00007fc225486351  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
  0.25%    0.36%  │ │  0x00007fc2254860bf: mov    %rcx,(%rsp)
  0.04%    0.15%  │ │  0x00007fc2254860c3: movslq %r9d,%r11          ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
  0.17%    0.41%  │ │  0x00007fc2254860c6: movzbq 0x11(%rsi,%r11,1),%r9
  0.25%    0.58%  │ │  0x00007fc2254860cc: movzbq 0x17(%rsi,%r11,1),%rcx
  0.38%    0.62%  │ │  0x00007fc2254860d2: movzbq 0x12(%rsi,%r11,1),%rdx
           0.16%  │ │  0x00007fc2254860d8: movzbq 0x13(%rsi,%r11,1),%rax
  0.30%    0.41%  │ │  0x00007fc2254860de: movzbq 0x14(%rsi,%r11,1),%rbp
  0.21%    0.59%  │ │  0x00007fc2254860e4: movzbq 0x15(%rsi,%r11,1),%r13
  0.30%    0.57%  │ │  0x00007fc2254860ea: movzbq 0x16(%rsi,%r11,1),%r11
  0.04%    0.13%  │ │  0x00007fc2254860f0: shl    $0x8,%r9
  0.34%    0.32%  │ │  0x00007fc2254860f4: or     (%rsp),%r9
  0.21%    0.58%  │ │  0x00007fc2254860f8: shl    $0x30,%r11
  0.25%    0.46%  │ │  0x00007fc2254860fc: shl    $0x28,%r13
  0.13%    0.15%  │ │  0x00007fc225486100: shl    $0x20,%rbp
  0.17%    0.57%  │ │  0x00007fc225486104: shl    $0x18,%rax
  0.17%    0.53%  │ │  0x00007fc225486108: shl    $0x10,%rdx
  0.25%    0.49%  │ │  0x00007fc22548610c: or     %rdx,%r9
  0.08%    0.11%  │ │  0x00007fc22548610f: or     %rax,%r9
  0.08%    0.56%  │ │  0x00007fc225486112: or     %rbp,%r9
  0.30%    0.62%  │ │  0x00007fc225486115: or     %r13,%r9
  0.17%    0.45%  │ │  0x00007fc225486118: or     %r11,%r9
  0.04%    0.15%  │ │  0x00007fc22548611b: shl    $0x38,%rcx
  0.13%    0.45%  │ │  0x00007fc22548611f: or     %rcx,%r9
  0.25%    0.40%  │ │  0x00007fc225486122: imul   %rdi,%r9           ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.51%    1.03%  │ │  0x00007fc225486126: rol    $0x1f,%r9
  0.42%    0.50%  │ │  0x00007fc22548612a: mov    $0x4cf5ad432745937f,%r11
           0.04%  │ │  0x00007fc225486134: imul   %r11,%r9
  1.52%    1.89%  │ │  0x00007fc225486138: xor    %r14,%r9           ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.72%    0.87%  │ │  0x00007fc22548613b: rol    $0x1b,%r9          ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.80%    0.93%  │ │  0x00007fc22548613f: mov    %r9,%r14
  0.04%           │ │  0x00007fc225486142: shl    $0x2,%r14
  0.25%    1.20%  │ │  0x00007fc225486146: add    %r9,%r14
  0.59%    1.23%  │ │  0x00007fc225486149: add    $0x52dce729,%r14   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.68%    1.30%  │ │  0x00007fc225486150: mov    %r8d,%ecx
  0.04%    0.07%  │ │  0x00007fc225486153: inc    %ecx               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
  0.04%    0.08%  │ │  0x00007fc225486155: cmp    %ebx,%ecx
                  │╭│  0x00007fc225486157: jge    0x00007fc22548616c  ;*if_icmpge
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │││  0x00007fc225486159: shl    $0x3,%r8d
                  │││  0x00007fc22548615d: mov    %r8d,%r9d
                  │││  0x00007fc225486160: add    $0x8,%r9d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007fc225486164: mov    %ecx,%r8d
                  ││╰  0x00007fc225486167: jmpq   0x00007fc2254860a0  ;*if_icmpge
                  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.30%    0.42%  ↘↘   0x00007fc22548616c: mov    0x8(%rsp),%r8d
  0.51%    0.94%       0x00007fc225486171: and    $0xfffffffffffffff8,%r8d  ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
  0.04%    0.08%       0x00007fc225486175: mov    0x8(%rsp),%r10d
  0.17%    0.08%       0x00007fc22548617a: sub    %r8d,%r10d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
  0.21%    0.26%       0x00007fc22548617d: movslq %r8d,%r9           ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.30%    0.79%       0x00007fc225486180: xor    %ecx,%ecx
                       0x00007fc225486182: cmp    $0x4,%r10d
                       0x00007fc225486186: je     0x00007fc22548622d
  0.04%    0.15%       0x00007fc22548618c: cmp    $0x4,%r10d
                       0x00007fc225486190: jle    0x00007fc2254861ad
                       0x00007fc225486192: cmp    $0x7,%r10d
                       0x00007fc225486196: je     0x00007fc2254861d0
                       0x00007fc225486198: cmp    $0x7,%r10d
                       0x00007fc22548619c: jg     0x00007fc2254862d0
                       0x00007fc2254861a2: cmp    $0x6,%r10d
                       0x00007fc2254861a6: je     0x00007fc2254861ed
                       0x00007fc2254861a8: xor    %r11d,%r11d
                       0x00007fc2254861ab: jmp    0x00007fc22548620d
  0.30%    0.26%       0x00007fc2254861ad: cmp    $0x2,%r10d
....................................................................................................
 17.41%   29.93%  <total for region 2>

....[Hottest Regions]...............................................................................
 70.52%   58.89%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 616 (479 bytes) 
 17.41%   29.93%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 583 (300 bytes) 
  6.65%    7.69%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 583 (77 bytes) 
  1.19%    0.20%   [kernel.kallsyms]  native_write_msr_safe (0 bytes) 
  0.93%    1.30%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 583 (30 bytes) 
  0.25%    0.04%   [kernel.kallsyms]  do_numa_page (0 bytes) 
  0.21%            [kernel.kallsyms]  page_fault (0 bytes) 
  0.13%    0.17%           libjvm.so  [unknown] (70 bytes) 
  0.08%            [kernel.kallsyms]  page_waitqueue (14 bytes) 
  0.08%            [kernel.kallsyms]  numa_migrate_prep (0 bytes) 
  0.08%    0.01%   [kernel.kallsyms]  __sb_start_write (9 bytes) 
  0.08%            [kernel.kallsyms]  timerqueue_add (19 bytes) 
  0.08%            [kernel.kallsyms]  copy_page_rep (0 bytes) 
  0.08%    0.01%   [kernel.kallsyms]  __percpu_counter_add (6 bytes) 
  0.08%                    libjvm.so  [unknown] (0 bytes) 
  0.04%            [kernel.kallsyms]  enqueue_hrtimer (0 bytes) 
  0.04%            [kernel.kallsyms]  __hrtimer_run_queues (0 bytes) 
  0.04%    0.01%   [kernel.kallsyms]  up_read (0 bytes) 
  0.04%    0.01%   [kernel.kallsyms]  __srcu_read_lock (16 bytes) 
  0.04%            [kernel.kallsyms]  __srcu_read_unlock (0 bytes) 
  1.91%    1.72%  <...other 135 warm regions...>
....................................................................................................
100.00%   99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 70.52%   58.89%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 616 
 24.99%   38.92%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 583 
  1.19%    0.20%   [kernel.kallsyms]  native_write_msr_safe 
  0.51%    0.36%           libjvm.so  [unknown] 
  0.25%    0.04%   [kernel.kallsyms]  do_numa_page 
  0.21%            [kernel.kallsyms]  page_fault 
  0.17%    0.01%      hsdis-amd64.so  print_insn 
  0.13%    0.01%   [kernel.kallsyms]  __sb_start_write 
  0.13%    0.01%   [kernel.kallsyms]  __percpu_counter_add 
  0.08%    0.01%   [kernel.kallsyms]  fsnotify 
  0.08%                 libc-2.17.so  _IO_fflush 
  0.08%            [kernel.kallsyms]  copy_page_rep 
  0.08%            [kernel.kallsyms]  numa_migrate_prep 
  0.08%            [kernel.kallsyms]  page_waitqueue 
  0.08%            [kernel.kallsyms]  timerqueue_add 
  0.04%                 libc-2.17.so  _IO_do_write@@GLIBC_2.2.5 
  0.04%            [kernel.kallsyms]  change_protection_range 
  0.04%    0.04%   [kernel.kallsyms]  avc_has_perm_flags 
  0.04%    0.03%        libc-2.17.so  _IO_default_xsputn 
  0.04%            [kernel.kallsyms]  __srcu_read_unlock 
  1.19%    0.30%  <...other 28 warm methods...>
....................................................................................................
100.00%   98.82%  <totals>

....[Distribution by Source]........................................................................
 95.51%   97.81%         C2, level 4
  3.39%    1.31%   [kernel.kallsyms]
  0.51%    0.36%           libjvm.so
  0.25%    0.03%      hsdis-amd64.so
  0.25%    0.34%        libc-2.17.so
  0.08%    0.07%              [jbd2]
....................................................................................................
100.00%   99.99%  <totals>


Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·perf":
Perf stats:
--------------------------------------------------

      21046.595067      task-clock (msec)         #    0.801 CPUs utilized          
             1,748      context-switches          #    0.083 K/sec                  
             1,228      cpu-migrations            #    0.058 K/sec                  
           130,100      page-faults               #    0.006 M/sec                  
    40,779,684,801      cycles                    #    1.938 GHz                      (83.99%)
    10,447,867,891      stalled-cycles-frontend   #   25.62% frontend cycles idle     (84.01%)
   <not supported>      stalled-cycles-backend   
    76,079,323,448      instructions              #    1.87  insns per cycle        
                                                  #    0.14  stalled cycles per insn  (84.09%)
     7,959,443,577      branches                  #  378.182 M/sec                    (70.43%)
       273,815,887      branch-misses             #    3.44% of all branches          (32.04%)
    12,198,390,328      L1-dcache-loads           #  579.590 M/sec                    (5.32%)
        76,543,962      L1-dcache-load-misses     #    0.63% of all L1-dcache hits    (2.76%)
        13,793,885      LLC-loads                 #    0.655 M/sec                    (2.76%)
         4,042,603      LLC-load-misses           #   29.31% of all LL-cache hits     (4.14%)
   <not supported>      L1-icache-loads          
        68,944,216      L1-icache-load-misses     #    3.276 M/sec                    (5.49%)
    12,116,029,389      dTLB-loads                #  575.676 M/sec                    (5.30%)
         9,017,921      dTLB-load-misses          #    0.07% of all dTLB cache hits   (2.74%)
         1,297,880      iTLB-loads                #    0.062 M/sec                    (2.74%)
           495,078      iTLB-load-misses          #   38.15% of all iTLB cache hits   (4.10%)
   <not supported>      L1-dcache-prefetches     
        20,393,272      L1-dcache-prefetch-misses #    0.969 M/sec                    (5.46%)

      26.286489093 seconds time elapsed



# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: -XX:AllocatePrefetchStyle=2
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe
# Parameters: (blockSize = 4, numEntries = 10000000)

# Run progress: 62.50% complete, ETA 00:01:33
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 87.181 ns/op
# Warmup Iteration   2: 86.680 ns/op
# Warmup Iteration   3: 88.312 ns/op
# Warmup Iteration   4: 83.678 ns/op
# Warmup Iteration   5: 86.852 ns/op
Iteration   1: 83.772 ns/op
Iteration   2: 84.002 ns/op
Iteration   3: 85.747 ns/op
Iteration   4: 83.729 ns/op
Iteration   5: 83.706 ns/op
Iteration   6: 83.504 ns/op
Iteration   7: 84.605 ns/op
Iteration   8: 84.676 ns/op
Iteration   9: 83.353 ns/op
Iteration  10: 83.230 ns/op
# Processing profiler results: LinuxPerfAsmProfiler LinuxPerfProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe":
  84.032 ±(99.9%) 1.164 ns/op [Average]
  (min, avg, max) = (83.230, 84.032, 85.747), stdev = 0.770
  CI (99.9%): [82.868, 85.196] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·asm":
PrintAssembly processed: 190092 total address lines.
Perf output processed (skipped 15.894 seconds):
 Column 1: cycles (2741 events)
 Column 2: instructions (9684 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 628 (479 bytes) 

                             0x00007fa77d4a1ecc: dec    %r11d
                             0x00007fa77d4a1ecf: cmp    %r8d,%r11d
                             0x00007fa77d4a1ed2: jae    0x00007fa77d4a21cd  ;*aload_1
                                                                           ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
                             0x00007fa77d4a1ed8: lea    (%r12,%rbx,8),%rsi  ;*getfield probeArray
                                                                           ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@1 (line 74)
                             0x00007fa77d4a1edc: xor    %edi,%edi
                  ╭          0x00007fa77d4a1ede: jmp    0x00007fa77d4a1f02  ;*invokevirtual testBytes
                  │                                                        ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                  │                                                        ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
 20.54%   10.77%  │ ↗   ↗↗   0x00007fa77d4a1ee0: mov    0xc(%rsp),%edi
  2.12%    0.98%  │ │   ││   0x00007fa77d4a1ee4: inc    %edi               ;*iinc
                  │ │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@31 (line 74)
  0.22%    0.09%  │ │   ││   0x00007fa77d4a1ee6: cmp    0x8(%rsp),%edi
                  │╭│   ││   0x00007fa77d4a1eea: jge    0x00007fa77d4a20c1  ;*if_icmpge
                  │││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@12 (line 74)
  0.26%    0.05%  │││   ││   0x00007fa77d4a1ef0: mov    (%rsp),%rax
  0.26%    0.10%  │││   ││   0x00007fa77d4a1ef4: mov    0x28(%rsp),%ebx
                  │││   ││   0x00007fa77d4a1ef8: mov    0x8(%rsp),%r8d
                  │││   ││   0x00007fa77d4a1efd: mov    0x10(%rsp),%rsi    ;*aload_1
                  │││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
  0.33%    0.02%  ↘││   ││   0x00007fa77d4a1f02: mov    0x10(%rsi,%rdi,4),%r10d  ;*iaload
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@17 (line 74)
  1.31%    0.14%   ││   ││   0x00007fa77d4a1f07: mov    0x18(%rax),%r9d    ;*getfield bf
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
  0.07%    0.04%   ││   ││   0x00007fa77d4a1f0b: movslq %r10d,%r11         ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@26 (line 75)
  0.29%            ││   ││   0x00007fa77d4a1f0e: test   %r9d,%r9d
                   ││   ││   0x00007fa77d4a1f11: je     0x00007fa77d4a2135  ;*invokevirtual testLong
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.01%   ││   ││   0x00007fa77d4a1f17: mov    $0x588668818,%rcx  ;   {oop(a &apos;java/lang/Class&apos; = &apos;com/github/prasanthj/bloomfilter/BloomKFilter&apos;)}
  0.47%    0.14%   ││   ││   0x00007fa77d4a1f21: mov    0x6c(%rcx),%r13d   ;*getstatic BYTE_ARRAY_8
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.01%   ││   ││   0x00007fa77d4a1f25: movsbl %r10b,%ecx         ;*i2b  ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@8 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.07%    0.01%   ││   ││   0x00007fa77d4a1f29: mov    0xc(%r12,%r13,8),%edx  ; implicit exception: dispatches to 0x00007fa77d4a2231
  0.44%            ││   ││   0x00007fa77d4a1f2e: cmp    $0x7,%edx
                   ││   ││   0x00007fa77d4a1f31: jbe    0x00007fa77d4a215d
  0.55%    0.11%   ││   ││   0x00007fa77d4a1f37: mov    %edi,0xc(%rsp)
  0.04%    0.03%   ││   ││   0x00007fa77d4a1f3b: mov    %rsi,0x10(%rsp)
  0.15%    0.01%   ││   ││   0x00007fa77d4a1f40: mov    %r8d,0x8(%rsp)
  0.04%            ││   ││   0x00007fa77d4a1f45: mov    %ebx,0x28(%rsp)
  0.69%    0.17%   ││   ││   0x00007fa77d4a1f49: mov    %rax,(%rsp)
  0.07%    0.05%   ││   ││   0x00007fa77d4a1f4d: mov    %r10b,0x10(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@9 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.36%    0.11%   ││   ││   0x00007fa77d4a1f52: lea    (%r12,%r9,8),%rbp  ;*getfield bf
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
  0.29%    0.15%   ││   ││   0x00007fa77d4a1f56: mov    %r9d,0x18(%rsp)
  0.04%    0.03%   ││   ││   0x00007fa77d4a1f5b: lea    (%r12,%r13,8),%rsi  ;*getstatic BYTE_ARRAY_8
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.03%   ││   ││   0x00007fa77d4a1f5f: mov    %r11,%r8
  0.18%    0.09%   ││   ││   0x00007fa77d4a1f62: sar    $0x38,%r8
  0.36%    0.15%   ││   ││   0x00007fa77d4a1f66: mov    %r11,%r10
  0.11%    0.04%   ││   ││   0x00007fa77d4a1f69: sar    $0x30,%r10
           0.06%   ││   ││   0x00007fa77d4a1f6d: mov    %r8d,%r8d
  0.15%    0.43%   ││   ││   0x00007fa77d4a1f70: mov    %r10d,%r10d
  0.40%    0.24%   ││   ││   0x00007fa77d4a1f73: mov    %r11,%rcx
  0.04%    0.03%   ││   ││   0x00007fa77d4a1f76: sar    $0x28,%rcx
           0.01%   ││   ││   0x00007fa77d4a1f7a: mov    %r11,%r9
           0.21%   ││   ││   0x00007fa77d4a1f7d: sar    $0x20,%r9
  0.33%    0.38%   ││   ││   0x00007fa77d4a1f81: mov    %ecx,%ecx
  0.07%    0.10%   ││   ││   0x00007fa77d4a1f83: mov    %r9d,%r9d
                   ││   ││   0x00007fa77d4a1f86: mov    %r11,%rdi
  0.07%    0.17%   ││   ││   0x00007fa77d4a1f89: sar    $0x18,%rdi
  0.36%    0.23%   ││   ││   0x00007fa77d4a1f8d: mov    %r11,%rbx
  0.04%    0.13%   ││   ││   0x00007fa77d4a1f90: sar    $0x10,%rbx
  0.04%    0.01%   ││   ││   0x00007fa77d4a1f94: mov    %edi,%edi
  0.07%    0.03%   ││   ││   0x00007fa77d4a1f96: mov    %ebx,%ebx
  0.47%    0.05%   ││   ││   0x00007fa77d4a1f98: sar    $0x8,%r11
  0.07%    0.02%   ││   ││   0x00007fa77d4a1f9c: mov    %r11d,%r11d
           0.02%   ││   ││   0x00007fa77d4a1f9f: mov    %r11b,0x11(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@20 (line 253)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.73%    0.15%   ││   ││   0x00007fa77d4a1fa4: mov    %bl,0x12(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@31 (line 254)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.04%    0.06%   ││   ││   0x00007fa77d4a1fa9: mov    %dil,0x13(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@42 (line 255)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.69%    0.12%   ││   ││   0x00007fa77d4a1fae: mov    %r9b,0x14(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@53 (line 256)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.11%    0.03%   ││   ││   0x00007fa77d4a1fb3: mov    %cl,0x15(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@64 (line 257)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.55%    0.14%   ││   ││   0x00007fa77d4a1fb8: mov    %r10b,0x16(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@76 (line 258)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.11%    0.02%   ││   ││   0x00007fa77d4a1fbd: mov    %r8b,0x17(%r12,%r13,8)  ;*synchronization entry
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.66%    0.72%   ││   ││   0x00007fa77d4a1fc2: xor    %ecx,%ecx
  0.11%    0.07%   ││   ││   0x00007fa77d4a1fc4: xchg   %ax,%ax
  0.04%    0.03%   ││   ││   0x00007fa77d4a1fc7: callq  0x00007fa77d046160  ; OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=NarrowOop [40]=NarrowOop off=332}
                   ││   ││                                                 ;*invokestatic hash64
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   ││   ││                                                 ;   {static_call}
  0.22%    0.62%   ││   ││   0x00007fa77d4a1fcc: mov    0x18(%rsp),%r11d
           0.03%   ││   ││   0x00007fa77d4a1fd1: mov    0x28(%r12,%r11,8),%r10d  ;*getfield totalBlockCount
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@37 (line 198)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.29%    0.33%   ││   ││   0x00007fa77d4a1fd6: mov    %eax,%r13d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@6 (line 187)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.18%    0.72%   ││   ││   0x00007fa77d4a1fd9: shr    $0x20,%rax
                   ││   ││   0x00007fa77d4a1fdd: mov    %eax,%r14d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@13 (line 188)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.02%   ││   ││   0x00007fa77d4a1fe0: mov    %r13d,%eax
  0.51%    1.29%   ││   ││   0x00007fa77d4a1fe3: add    %r14d,%eax         ;*iadd
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@20 (line 190)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.18%    0.58%   ││   ││   0x00007fa77d4a1fe6: mov    %eax,%r9d
                   ││   ││   0x00007fa77d4a1fe9: not    %r9d
  0.33%    1.28%   ││   ││   0x00007fa77d4a1fec: test   %eax,%eax
  0.29%    0.46%   ││   ││   0x00007fa77d4a1fee: cmovl  %r9d,%eax          ;*iload
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@34 (line 198)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.84%    3.08%   ││   ││   0x00007fa77d4a1ff2: test   %r10d,%r10d
                   ││   ││   0x00007fa77d4a1ff5: je     0x00007fa77d4a2149  ;*irem
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@40 (line 198)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.01%   ││   ││   0x00007fa77d4a1ffb: mov    0xc(%r12,%r11,8),%ebp  ;*getfield k
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@58 (line 200)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.05%   ││   ││   0x00007fa77d4a2000: cmp    $0x1,%ebp
                   │╰   ││   0x00007fa77d4a2003: jl     0x00007fa77d4a1ee0  ;*if_icmpgt
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.04%    0.57%   │    ││   0x00007fa77d4a2009: mov    0x34(%r12,%r11,8),%r9d  ;*getfield bitSet
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@123 (line 210)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.36%    0.74%   │    ││   0x00007fa77d4a200e: cmp    $0x80000000,%eax
                   │ ╭  ││   0x00007fa77d4a2013: jne    0x00007fa77d4a201d
                   │ │  ││   0x00007fa77d4a2015: xor    %edx,%edx
                   │ │  ││   0x00007fa77d4a2017: cmp    $0xffffffffffffffff,%r10d
                   │ │╭ ││   0x00007fa77d4a201b: je     0x00007fa77d4a2021
           0.01%   │ ↘│ ││   0x00007fa77d4a201d: cltd   
  0.07%    0.20%   │  │ ││   0x00007fa77d4a201e: idiv   %r10d
  9.60%   11.04%   │  ↘ ││   0x00007fa77d4a2021: imul   0x30(%r12,%r11,8),%edx  ;*imul
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@49 (line 199)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  1.35%    0.44%   │    ││   0x00007fa77d4a2027: mov    0xc(%r12,%r9,8),%r9d  ;*getfield data
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@126 (line 210)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │    ││                                                 ; implicit exception: dispatches to 0x00007fa77d4a21f6
  0.11%    0.69%   │    ││   0x00007fa77d4a202c: mov    0xc(%r12,%r9,8),%eax  ;*laload
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │    ││                                                 ; implicit exception: dispatches to 0x00007fa77d4a21f6
                   │    ││   0x00007fa77d4a2031: cmp    $0x7ffffffe,%ebp
                   │    ││   0x00007fa77d4a2037: jg     0x00007fa77d4a2191
                   │    ││   0x00007fa77d4a203d: vmovd  %r11d,%xmm1
  0.44%    0.08%   │    ││   0x00007fa77d4a2042: mov    0x2c(%r12,%r11,8),%r8d
  0.26%    0.52%   │    ││   0x00007fa77d4a2047: lea    (%r12,%r9,8),%r10
           0.01%   │    ││   0x00007fa77d4a204b: dec    %r8d
                   │    ││   0x00007fa77d4a204e: movslq %edx,%r11
  0.36%    0.18%   │    ││   0x00007fa77d4a2051: mov    $0x1,%edi
  0.36%    0.96%   │    ││   0x00007fa77d4a2056: mov    %r13d,0x18(%rsp)
                   │    ││   0x00007fa77d4a205b: nopl   0x0(%rax,%rax,1)   ;*iload
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@64 (line 201)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │    ││↗  0x00007fa77d4a2060: mov    %edi,%r13d
  0.11%    0.14%   │    │││  0x00007fa77d4a2063: inc    %r13d              ;*iadd
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@69 (line 201)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.55%    0.74%   │    │││  0x00007fa77d4a2066: mov    %r13d,%ebx
  0.33%    0.04%   │    │││  0x00007fa77d4a2069: imul   %r14d,%ebx
  0.62%    0.15%   │    │││  0x00007fa77d4a206d: add    0x18(%rsp),%ebx    ;*iadd
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@73 (line 201)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  1.20%    0.13%   │    │││  0x00007fa77d4a2071: mov    %ebx,%esi
  0.26%    0.64%   │    │││  0x00007fa77d4a2073: not    %esi
  0.47%    0.07%   │    │││  0x00007fa77d4a2075: test   %ebx,%ebx
                   │    │││  0x00007fa77d4a2077: cmovl  %esi,%ebx
  1.09%    0.62%   │    │││  0x00007fa77d4a207a: mov    %r8d,%esi
  0.29%    0.03%   │    │││  0x00007fa77d4a207d: and    %ebx,%esi          ;*iand
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@95 (line 206)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.40%    0.01%   │    │││  0x00007fa77d4a207f: mov    %esi,%ebx
  0.44%    0.05%   │    │││  0x00007fa77d4a2081: and    $0xffffffffffffffc0,%ebx
  0.40%    0.62%   │    │││  0x00007fa77d4a2084: mov    %esi,%ecx
  0.07%    0.03%   │    │││  0x00007fa77d4a2086: sub    %ebx,%ecx          ;*isub
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@119 (line 209)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.26%    0.12%   │    │││  0x00007fa77d4a2088: shr    $0x6,%esi          ;*iushr
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@102 (line 207)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.40%    0.03%   │    │││  0x00007fa77d4a208b: mov    %esi,%ebx
  0.26%    0.41%   │    │││  0x00007fa77d4a208d: add    %edx,%ebx          ;*iadd
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@109 (line 208)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.47%    0.23%   │    │││  0x00007fa77d4a208f: cmp    %eax,%ebx
                   │   ╭│││  0x00007fa77d4a2091: jae    0x00007fa77d4a20cd  ;*laload
                   │   ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                   │   ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.22%    0.54%   │   ││││  0x00007fa77d4a2093: mov    $0x1,%ebx
  0.29%    0.03%   │   ││││  0x00007fa77d4a2098: shl    %cl,%rbx
  1.31%    1.36%   │   ││││  0x00007fa77d4a209b: movslq %esi,%rcx
                   │   ││││  0x00007fa77d4a209e: mov    %r11,%rdi
  0.33%    0.02%   │   ││││  0x00007fa77d4a20a1: add    %rcx,%rdi
  0.15%    0.73%   │   ││││  0x00007fa77d4a20a4: test   %rbx,0x10(%r10,%rdi,8)
                   │   │╰││  0x00007fa77d4a20a9: je     0x00007fa77d4a1ee0  ;*ifne
                   │   │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@143 (line 211)
                   │   │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   │ ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
 17.51%    9.41%   │   │ ││  0x00007fa77d4a20af: mov    %ebp,%ebx
  1.71%    0.57%   │   │ ││  0x00007fa77d4a20b1: inc    %ebx
  1.02%    0.51%   │   │ ││  0x00007fa77d4a20b3: cmp    %ebx,%r13d
                   │   │ ╰│  0x00007fa77d4a20b6: jge    0x00007fa77d4a1ee0  ;*if_icmpgt
                   │   │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                   │   │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.33%    0.08%   │   │  │  0x00007fa77d4a20bc: mov    %r13d,%edi
  0.07%    0.08%   │   │  ╰  0x00007fa77d4a20bf: jmp    0x00007fa77d4a2060  ;*if_icmpge
                   │   │                                                   ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@12 (line 74)
                   ↘   │     0x00007fa77d4a20c1: add    $0x40,%rsp
                       │     0x00007fa77d4a20c5: pop    %rbp
                       │     0x00007fa77d4a20c6: test   %eax,0x15b34f34(%rip)        # 0x00007fa792fd7000
                       │                                                   ;   {poll_return}
                       │     0x00007fa77d4a20cc: retq   
                       ↘     0x00007fa77d4a20cd: mov    $0xffffffe4,%esi
                             0x00007fa77d4a20d2: mov    (%rsp),%rbp
                             0x00007fa77d4a20d6: mov    %rax,-0x8(%rsp)
                             0x00007fa77d4a20db: mov    0x8(%rsp),%eax
....................................................................................................
 80.77%   58.20%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 587 (300 bytes) 

                     Decoding compiled method 0x00007fa77d48c950:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007fa774b8b6f0} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  0.29%    1.70%       0x00007fa77d48cae0: mov    %eax,-0x14000(%rsp)
  0.04%    0.18%       0x00007fa77d48cae7: push   %rbp
  0.04%    0.40%       0x00007fa77d48cae8: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  0.22%    1.07%       0x00007fa77d48caec: mov    %edx,0x8(%rsp)
  0.22%    0.45%       0x00007fa77d48caf0: mov    %edx,%ebx
  0.11%    0.21%       0x00007fa77d48caf2: sar    $0x3,%ebx          ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  0.36%    1.03%       0x00007fa77d48caf5: movslq %ecx,%r14          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
  0.04%    0.07%       0x00007fa77d48caf8: mov    $0x87c37b91114253d5,%rdi
  0.04%    0.09%       0x00007fa77d48cb02: test   %ebx,%ebx
                  ╭    0x00007fa77d48cb04: jle    0x00007fa77d48cbec  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.04%    0.53%  │    0x00007fa77d48cb0a: mov    0xc(%rsi),%r10d    ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007fa77d48cf51
  0.40%    0.86%  │    0x00007fa77d48cb0e: xor    %r9d,%r9d
  0.04%    0.10%  │    0x00007fa77d48cb11: xor    %r8d,%r8d
  0.04%    0.17%  │    0x00007fa77d48cb14: nopl   0x0(%rax,%rax,1)
  0.15%    0.26%  │    0x00007fa77d48cb1c: xchg   %ax,%ax            ;*iload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  0.26%    1.45%  │ ↗  0x00007fa77d48cb20: cmp    %r10d,%r9d
                  │ │  0x00007fa77d48cb23: jae    0x00007fa77d48cd9e  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
           0.05%  │ │  0x00007fa77d48cb29: movzbq 0x10(%rsi,%r9,1),%rcx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.07%    0.17%  │ │  0x00007fa77d48cb2f: mov    %r9d,%r11d
  0.11%    0.10%  │ │  0x00007fa77d48cb32: add    $0x7,%r11d
  0.55%    0.73%  │ │  0x00007fa77d48cb36: cmp    %r10d,%r11d
                  │ │  0x00007fa77d48cb39: jae    0x00007fa77d48cdd1  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
  0.04%    0.03%  │ │  0x00007fa77d48cb3f: mov    %rcx,(%rsp)
  0.29%    0.26%  │ │  0x00007fa77d48cb43: movslq %r9d,%r11          ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
  0.15%    0.32%  │ │  0x00007fa77d48cb46: movzbq 0x11(%rsi,%r11,1),%r9
  0.40%    0.82%  │ │  0x00007fa77d48cb4c: movzbq 0x17(%rsi,%r11,1),%rcx
  0.04%    0.05%  │ │  0x00007fa77d48cb52: movzbq 0x12(%rsi,%r11,1),%rdx
  0.07%    0.19%  │ │  0x00007fa77d48cb58: movzbq 0x13(%rsi,%r11,1),%rax
  0.11%    0.39%  │ │  0x00007fa77d48cb5e: movzbq 0x14(%rsi,%r11,1),%rbp
  0.62%    1.05%  │ │  0x00007fa77d48cb64: movzbq 0x15(%rsi,%r11,1),%r13
           0.05%  │ │  0x00007fa77d48cb6a: movzbq 0x16(%rsi,%r11,1),%r11
  0.15%    0.21%  │ │  0x00007fa77d48cb70: shl    $0x8,%r9
  0.22%    0.41%  │ │  0x00007fa77d48cb74: or     (%rsp),%r9
  0.33%    1.06%  │ │  0x00007fa77d48cb78: shl    $0x30,%r11
  0.04%    0.05%  │ │  0x00007fa77d48cb7c: shl    $0x28,%r13
  0.04%    0.22%  │ │  0x00007fa77d48cb80: shl    $0x20,%rbp
  0.22%    0.46%  │ │  0x00007fa77d48cb84: shl    $0x18,%rax
  0.40%    1.08%  │ │  0x00007fa77d48cb88: shl    $0x10,%rdx
  0.04%    0.04%  │ │  0x00007fa77d48cb8c: or     %rdx,%r9
  0.07%    0.12%  │ │  0x00007fa77d48cb8f: or     %rax,%r9
  0.04%    0.43%  │ │  0x00007fa77d48cb92: or     %rbp,%r9
  0.47%    0.98%  │ │  0x00007fa77d48cb95: or     %r13,%r9
           0.03%  │ │  0x00007fa77d48cb98: or     %r11,%r9
  0.07%    0.14%  │ │  0x00007fa77d48cb9b: shl    $0x38,%rcx
  0.11%    0.27%  │ │  0x00007fa77d48cb9f: or     %rcx,%r9
  0.40%    0.63%  │ │  0x00007fa77d48cba2: imul   %rdi,%r9           ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.58%    0.67%  │ │  0x00007fa77d48cba6: rol    $0x1f,%r9
  0.33%    0.41%  │ │  0x00007fa77d48cbaa: mov    $0x4cf5ad432745937f,%r11
  0.04%    0.07%  │ │  0x00007fa77d48cbb4: imul   %r11,%r9
  1.17%    1.71%  │ │  0x00007fa77d48cbb8: xor    %r14,%r9           ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.29%    0.71%  │ │  0x00007fa77d48cbbb: rol    $0x1b,%r9          ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.33%    0.96%  │ │  0x00007fa77d48cbbf: mov    %r9,%r14
  0.04%    0.07%  │ │  0x00007fa77d48cbc2: shl    $0x2,%r14
  0.69%    1.53%  │ │  0x00007fa77d48cbc6: add    %r9,%r14
  0.47%    1.29%  │ │  0x00007fa77d48cbc9: add    $0x52dce729,%r14   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.18%    0.96%  │ │  0x00007fa77d48cbd0: mov    %r8d,%ecx
           0.05%  │ │  0x00007fa77d48cbd3: inc    %ecx               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
  0.04%    0.32%  │ │  0x00007fa77d48cbd5: cmp    %ebx,%ecx
                  │╭│  0x00007fa77d48cbd7: jge    0x00007fa77d48cbec  ;*if_icmpge
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │││  0x00007fa77d48cbd9: shl    $0x3,%r8d
                  │││  0x00007fa77d48cbdd: mov    %r8d,%r9d
                  │││  0x00007fa77d48cbe0: add    $0x8,%r9d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007fa77d48cbe4: mov    %ecx,%r8d
                  ││╰  0x00007fa77d48cbe7: jmpq   0x00007fa77d48cb20  ;*if_icmpge
                  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  ↘↘   0x00007fa77d48cbec: mov    0x8(%rsp),%r8d
  0.36%    1.04%       0x00007fa77d48cbf1: and    $0xfffffffffffffff8,%r8d  ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
  0.11%    0.07%       0x00007fa77d48cbf5: mov    0x8(%rsp),%r10d
  0.15%    0.46%       0x00007fa77d48cbfa: sub    %r8d,%r10d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
                       0x00007fa77d48cbfd: movslq %r8d,%r9           ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.36%    0.96%       0x00007fa77d48cc00: xor    %ecx,%ecx
           0.01%       0x00007fa77d48cc02: cmp    $0x4,%r10d
                       0x00007fa77d48cc06: je     0x00007fa77d48ccad
  0.15%    0.44%       0x00007fa77d48cc0c: cmp    $0x4,%r10d
                       0x00007fa77d48cc10: jle    0x00007fa77d48cc2d
                       0x00007fa77d48cc12: cmp    $0x7,%r10d
                       0x00007fa77d48cc16: je     0x00007fa77d48cc50
                       0x00007fa77d48cc18: cmp    $0x7,%r10d
                       0x00007fa77d48cc1c: jg     0x00007fa77d48cd50
                       0x00007fa77d48cc22: cmp    $0x6,%r10d
                       0x00007fa77d48cc26: je     0x00007fa77d48cc6d
                       0x00007fa77d48cc28: xor    %r11d,%r11d
                       0x00007fa77d48cc2b: jmp    0x00007fa77d48cc8d
                       0x00007fa77d48cc2d: cmp    $0x2,%r10d
....................................................................................................
 12.59%   30.70%  <total for region 2>

....[Hottest Regions]...............................................................................
 80.77%   58.20%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 628 (479 bytes) 
 12.59%   30.70%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 587 (300 bytes) 
  4.34%    7.59%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 587 (77 bytes) 
  0.62%    1.48%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 587 (20 bytes) 
  0.51%    0.02%   [kernel.kallsyms]  native_write_msr_safe (10 bytes) 
  0.07%    0.03%   [kernel.kallsyms]  __srcu_read_lock (42 bytes) 
  0.07%                       [ext4]  ext4_mark_iloc_dirty (11 bytes) 
  0.07%    0.01%           libjvm.so  [unknown] (33 bytes) 
  0.04%    0.03%   [kernel.kallsyms]  down_read_trylock (11 bytes) 
  0.04%            [kernel.kallsyms]  wait_for_stable_page (0 bytes) 
  0.04%            [kernel.kallsyms]  handle_mm_fault (0 bytes) 
  0.04%            [kernel.kallsyms]  change_protection_range (0 bytes) 
  0.04%            [kernel.kallsyms]  mpol_misplaced (0 bytes) 
  0.04%    0.01%   [kernel.kallsyms]  __mem_cgroup_count_vm_event (0 bytes) 
  0.04%    0.01%   [kernel.kallsyms]  sys_write (9 bytes) 
  0.04%            [kernel.kallsyms]  path_put (0 bytes) 
  0.04%            [kernel.kallsyms]  file_update_time (0 bytes) 
  0.04%            [kernel.kallsyms]  __mark_inode_dirty (0 bytes) 
  0.04%            [kernel.kallsyms]  __block_write_begin (0 bytes) 
  0.04%            [kernel.kallsyms]  avc_has_perm_flags (0 bytes) 
  0.51%    1.92%  <...other 135 warm regions...>
....................................................................................................
100.00%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 80.77%   58.20%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 628 
 17.55%   39.77%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 587 
  0.51%    0.02%   [kernel.kallsyms]  native_write_msr_safe 
  0.22%    0.40%           libjvm.so  [unknown] 
  0.07%    0.04%   [kernel.kallsyms]  avc_has_perm_flags 
  0.07%    0.01%              [ext4]  ext4_mark_iloc_dirty 
  0.07%    0.04%   [kernel.kallsyms]  __srcu_read_lock 
  0.04%            [kernel.kallsyms]  change_protection_range 
  0.04%           libpthread-2.17.so  __pthread_disable_asynccancel 
  0.04%                       [jbd2]  jbd2_journal_dirty_metadata 
  0.04%    0.03%   [kernel.kallsyms]  down_read_trylock 
  0.04%            [kernel.kallsyms]  __block_write_begin 
  0.04%    0.02%   [kernel.kallsyms]  __mem_cgroup_count_vm_event 
  0.04%    0.01%              [jbd2]  jbd2_journal_stop 
  0.04%    0.01%   [kernel.kallsyms]  sysret_check 
  0.04%    0.03%   [kernel.kallsyms]  __do_page_fault 
  0.04%            [kernel.kallsyms]  __mark_inode_dirty 
  0.04%            [kernel.kallsyms]  wait_for_stable_page 
  0.04%               hsdis-amd64.so  OP_J 
  0.04%            [kernel.kallsyms]  mpol_misplaced 
  0.26%    0.05%  <...other 7 warm methods...>
....................................................................................................
100.00%   98.64%  <totals>

....[Distribution by Source]........................................................................
 98.32%   97.97%         C2, level 4
  1.24%    1.13%   [kernel.kallsyms]
  0.22%    0.40%           libjvm.so
  0.07%    0.06%              [ext4]
  0.07%    0.04%              [jbd2]
  0.04%    0.06%      hsdis-amd64.so
  0.04%    0.06%  libpthread-2.17.so
....................................................................................................
100.00%  100.00%  <totals>


Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·perf":
Perf stats:
--------------------------------------------------

      27717.346461      task-clock (msec)         #    0.841 CPUs utilized          
             1,469      context-switches          #    0.053 K/sec                  
               506      cpu-migrations            #    0.018 K/sec                  
           139,748      page-faults               #    0.005 M/sec                  
    54,008,275,309      cycles                    #    1.949 GHz                      (84.28%)
    22,276,921,812      stalled-cycles-frontend   #   41.25% frontend cycles idle     (84.32%)
   <not supported>      stalled-cycles-backend   
    77,159,685,196      instructions              #    1.43  insns per cycle        
                                                  #    0.29  stalled cycles per insn  (84.39%)
     8,003,527,867      branches                  #  288.755 M/sec                    (70.97%)
       278,871,180      branch-misses             #    3.48% of all branches          (31.93%)
    12,373,443,607      L1-dcache-loads           #  446.415 M/sec                    (5.24%)
       546,982,663      L1-dcache-load-misses     #    4.42% of all L1-dcache hits    (2.73%)
       400,365,153      LLC-loads                 #   14.445 M/sec                    (2.71%)
        20,792,754      LLC-load-misses           #    5.19% of all LL-cache hits     (4.06%)
   <not supported>      L1-icache-loads          
        58,496,510      L1-icache-load-misses     #    2.110 M/sec                    (5.40%)
    12,219,525,406      dTLB-loads                #  440.862 M/sec                    (5.26%)
       220,181,022      dTLB-load-misses          #    1.80% of all dTLB cache hits   (2.69%)
           629,353      iTLB-loads                #    0.023 M/sec                    (2.71%)
           578,532      iTLB-load-misses          #   91.92% of all iTLB cache hits   (4.05%)
   <not supported>      L1-dcache-prefetches     
        62,369,362      L1-dcache-prefetch-misses #    2.250 M/sec                    (5.39%)

      32.974239981 seconds time elapsed



# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: -XX:AllocatePrefetchStyle=2
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe
# Parameters: (blockSize = 8, numEntries = 10000)

# Run progress: 75.00% complete, ETA 00:01:04
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 58.272 ns/op
# Warmup Iteration   2: 55.295 ns/op
# Warmup Iteration   3: 54.083 ns/op
# Warmup Iteration   4: 57.674 ns/op
# Warmup Iteration   5: 56.905 ns/op
Iteration   1: 55.887 ns/op
Iteration   2: 54.354 ns/op
Iteration   3: 53.707 ns/op
Iteration   4: 54.298 ns/op
Iteration   5: 57.900 ns/op
Iteration   6: 55.092 ns/op
Iteration   7: 50.773 ns/op
Iteration   8: 55.442 ns/op
Iteration   9: 62.731 ns/op
Iteration  10: 62.847 ns/op
# Processing profiler results: LinuxPerfAsmProfiler LinuxPerfProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe":
  56.303 ±(99.9%) 5.838 ns/op [Average]
  (min, avg, max) = (50.773, 56.303, 62.847), stdev = 3.862
  CI (99.9%): [50.465, 62.141] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·asm":
PrintAssembly processed: 189182 total address lines.
Perf output processed (skipped 12.018 seconds):
 Column 1: cycles (3203 events)
 Column 2: instructions (7922 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 621 (474 bytes) 

                            0x00007fbcb149e50c: dec    %r11d
                            0x00007fbcb149e50f: cmp    %r8d,%r11d
                            0x00007fbcb149e512: jae    0x00007fbcb149e809  ;*aload_1
                                                                          ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
                            0x00007fbcb149e518: lea    (%r12,%rbx,8),%rsi  ;*getfield probeArray
                                                                          ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@1 (line 74)
                            0x00007fbcb149e51c: xor    %edi,%edi
                  ╭         0x00007fbcb149e51e: jmp    0x00007fbcb149e542  ;*invokevirtual testBytes
                  │                                                       ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                  │                                                       ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  3.18%    3.05%  │↗   ↗↗   0x00007fbcb149e520: mov    0xc(%rsp),%edi
  3.37%    2.83%  ││   ││   0x00007fbcb149e524: inc    %edi               ;*iinc
                  ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@31 (line 74)
  0.56%    0.13%  ││   ││   0x00007fbcb149e526: cmp    0x8(%rsp),%edi
                  ││   ││   0x00007fbcb149e52a: jge    0x00007fbcb149e765  ;*if_icmpge
                  ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@12 (line 74)
  0.50%    0.11%  ││   ││   0x00007fbcb149e530: mov    (%rsp),%rax
  0.19%    0.11%  ││   ││   0x00007fbcb149e534: mov    0x28(%rsp),%ebx
           0.01%  ││   ││   0x00007fbcb149e538: mov    0x8(%rsp),%r8d
  0.16%    0.08%  ││   ││   0x00007fbcb149e53d: mov    0x10(%rsp),%rsi    ;*aload_1
                  ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
  0.44%    0.14%  ↘│   ││   0x00007fbcb149e542: mov    0x10(%rsi,%rdi,4),%r10d  ;*iaload
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@17 (line 74)
  2.37%    0.29%   │   ││   0x00007fbcb149e547: mov    0x18(%rax),%r9d    ;*getfield bf
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
  0.03%    0.03%   │   ││   0x00007fbcb149e54b: movslq %r10d,%r11         ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@26 (line 75)
  0.72%    0.01%   │   ││   0x00007fbcb149e54e: test   %r9d,%r9d
                   │   ││   0x00007fbcb149e551: je     0x00007fbcb149e771  ;*invokevirtual testLong
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.03%   │   ││   0x00007fbcb149e557: mov    $0x5886687b8,%rcx  ;   {oop(a &apos;java/lang/Class&apos; = &apos;com/github/prasanthj/bloomfilter/BloomKFilter&apos;)}
  0.12%    0.15%   │   ││   0x00007fbcb149e561: mov    0x6c(%rcx),%r13d   ;*getstatic BYTE_ARRAY_8
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.09%    0.03%   │   ││   0x00007fbcb149e565: movsbl %r10b,%ecx         ;*i2b  ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@8 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.50%    0.27%   │   ││   0x00007fbcb149e569: mov    0xc(%r12,%r13,8),%edx  ; implicit exception: dispatches to 0x00007fbcb149e86d
  0.47%    0.09%   │   ││   0x00007fbcb149e56e: cmp    $0x7,%edx
                   │   ││   0x00007fbcb149e571: jbe    0x00007fbcb149e799
  0.37%    0.15%   │   ││   0x00007fbcb149e577: mov    %edi,0xc(%rsp)
           0.08%   │   ││   0x00007fbcb149e57b: mov    %rsi,0x10(%rsp)
  0.19%    0.03%   │   ││   0x00007fbcb149e580: mov    %r8d,0x8(%rsp)
  0.06%    0.09%   │   ││   0x00007fbcb149e585: mov    %ebx,0x28(%rsp)
  0.50%    0.21%   │   ││   0x00007fbcb149e589: mov    %rax,(%rsp)
  0.09%    0.06%   │   ││   0x00007fbcb149e58d: mov    %r10b,0x10(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@9 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.50%    0.14%   │   ││   0x00007fbcb149e592: lea    (%r12,%r9,8),%rbp  ;*getfield bf
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
  0.37%    0.24%   │   ││   0x00007fbcb149e596: mov    %r9d,0x18(%rsp)
  0.09%    0.06%   │   ││   0x00007fbcb149e59b: lea    (%r12,%r13,8),%rsi  ;*getstatic BYTE_ARRAY_8
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.16%    0.62%   │   ││   0x00007fbcb149e59f: mov    %r11,%r8
  0.16%    0.06%   │   ││   0x00007fbcb149e5a2: sar    $0x38,%r8
  0.22%    0.33%   │   ││   0x00007fbcb149e5a6: mov    %r11,%r10
  0.06%    0.06%   │   ││   0x00007fbcb149e5a9: sar    $0x30,%r10
  0.22%    0.38%   │   ││   0x00007fbcb149e5ad: mov    %r8d,%r8d
  0.28%    0.48%   │   ││   0x00007fbcb149e5b0: mov    %r10d,%r10d
  0.25%    0.27%   │   ││   0x00007fbcb149e5b3: mov    %r11,%rcx
  0.03%    0.11%   │   ││   0x00007fbcb149e5b6: sar    $0x28,%rcx
  0.16%    0.35%   │   ││   0x00007fbcb149e5ba: mov    %r11,%r9
  0.22%    0.11%   │   ││   0x00007fbcb149e5bd: sar    $0x20,%r9
  0.25%    0.48%   │   ││   0x00007fbcb149e5c1: mov    %ecx,%ecx
  0.12%    0.09%   │   ││   0x00007fbcb149e5c3: mov    %r9d,%r9d
  0.28%    0.39%   │   ││   0x00007fbcb149e5c6: mov    %r11,%rdi
  0.28%    0.18%   │   ││   0x00007fbcb149e5c9: sar    $0x18,%rdi
  0.22%    0.33%   │   ││   0x00007fbcb149e5cd: mov    %r11,%rbx
  0.06%    0.11%   │   ││   0x00007fbcb149e5d0: sar    $0x10,%rbx
  0.19%    0.37%   │   ││   0x00007fbcb149e5d4: mov    %edi,%edi
  0.25%    0.06%   │   ││   0x00007fbcb149e5d6: mov    %ebx,%ebx
  0.16%    0.20%   │   ││   0x00007fbcb149e5d8: sar    $0x8,%r11
  0.19%    0.05%   │   ││   0x00007fbcb149e5dc: mov    %r11d,%r11d
  0.16%    0.56%   │   ││   0x00007fbcb149e5df: mov    %r11b,0x11(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@20 (line 253)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.41%    0.11%   │   ││   0x00007fbcb149e5e4: mov    %bl,0x12(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@31 (line 254)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.37%    0.53%   │   ││   0x00007fbcb149e5e9: mov    %dil,0x13(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@42 (line 255)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.47%    0.18%   │   ││   0x00007fbcb149e5ee: mov    %r9b,0x14(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@53 (line 256)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.34%    0.54%   │   ││   0x00007fbcb149e5f3: mov    %cl,0x15(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@64 (line 257)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.56%    0.30%   │   ││   0x00007fbcb149e5f8: mov    %r10b,0x16(%r12,%r13,8)  ;*bastore
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@76 (line 258)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.37%    0.38%   │   ││   0x00007fbcb149e5fd: mov    %r8b,0x17(%r12,%r13,8)  ;*synchronization entry
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.28%    0.73%   │   ││   0x00007fbcb149e602: xor    %ecx,%ecx
  0.09%    0.06%   │   ││   0x00007fbcb149e604: xchg   %ax,%ax
  0.34%    0.34%   │   ││   0x00007fbcb149e607: callq  0x00007fbcb1046160  ; OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=NarrowOop [40]=NarrowOop off=332}
                   │   ││                                                 ;*invokestatic hash64
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │   ││                                                 ;   {static_call}
  0.03%    0.06%   │   ││   0x00007fbcb149e60c: mov    0x18(%rsp),%r11d
  0.19%    0.56%   │   ││   0x00007fbcb149e611: mov    0x28(%r12,%r11,8),%r10d  ;*getfield totalBlockCount
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@37 (line 198)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.62%    0.35%   │   ││   0x00007fbcb149e616: mov    %eax,%r13d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@6 (line 187)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.06%    0.05%   │   ││   0x00007fbcb149e619: shr    $0x20,%rax
                   │   ││   0x00007fbcb149e61d: mov    %eax,%r14d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@13 (line 188)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.19%    0.33%   │   ││   0x00007fbcb149e620: mov    %r13d,%eax
  0.62%    1.12%   │   ││   0x00007fbcb149e623: add    %r14d,%eax         ;*iadd
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@20 (line 190)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.03%   │   ││   0x00007fbcb149e626: mov    %eax,%r9d
           0.04%   │   ││   0x00007fbcb149e629: not    %r9d
  0.81%    1.46%   │   ││   0x00007fbcb149e62c: test   %eax,%eax
  0.19%    0.58%   │   ││   0x00007fbcb149e62e: cmovl  %r9d,%eax          ;*iload
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@34 (line 198)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.69%    3.23%   │   ││   0x00007fbcb149e632: test   %r10d,%r10d
                   │   ││   0x00007fbcb149e635: je     0x00007fbcb149e785  ;*irem
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@40 (line 198)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.25%    0.40%   │   ││   0x00007fbcb149e63b: mov    0xc(%r12,%r11,8),%ebp  ;*getfield k
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@58 (line 200)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.03%    0.03%   │   ││   0x00007fbcb149e640: cmp    $0x1,%ebp
                   ╰   ││   0x00007fbcb149e643: jl     0x00007fbcb149e520  ;*if_icmpgt
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.03%    0.01%       ││   0x00007fbcb149e649: mov    0x34(%r12,%r11,8),%r9d  ;*getfield bitSet
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@123 (line 210)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.37%    0.93%       ││   0x00007fbcb149e64e: cmp    $0x80000000,%eax
                    ╭  ││   0x00007fbcb149e653: jne    0x00007fbcb149e65d
                    │  ││   0x00007fbcb149e655: xor    %edx,%edx
                    │  ││   0x00007fbcb149e657: cmp    $0xffffffffffffffff,%r10d
                    │╭ ││   0x00007fbcb149e65b: je     0x00007fbcb149e661
  0.22%    0.40%    ↘│ ││   0x00007fbcb149e65d: cltd   
  0.03%    0.16%     │ ││   0x00007fbcb149e65e: idiv   %r10d
 17.64%   18.57%     ↘ ││   0x00007fbcb149e661: imul   0x30(%r12,%r11,8),%edx  ;*imul
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@49 (line 199)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  2.09%    0.01%       ││   0x00007fbcb149e667: mov    0xc(%r12,%r9,8),%r9d  ;*getfield data
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@126 (line 210)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                       ││                                                 ; implicit exception: dispatches to 0x00007fbcb149e832
                       ││   0x00007fbcb149e66c: mov    0xc(%r12,%r9,8),%eax  ;*laload
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                       ││                                                 ; implicit exception: dispatches to 0x00007fbcb149e832
                       ││   0x00007fbcb149e671: cmp    $0x7ffffffe,%ebp
                       ││   0x00007fbcb149e677: jg     0x00007fbcb149e7cd
                       ││   0x00007fbcb149e67d: vmovd  %r11d,%xmm1
  1.00%                ││   0x00007fbcb149e682: mov    0x2c(%r12,%r11,8),%r8d
                       ││   0x00007fbcb149e687: lea    (%r12,%r9,8),%r10
                       ││   0x00007fbcb149e68b: dec    %r8d
                       ││   0x00007fbcb149e68e: movslq %edx,%r11
  0.78%                ││   0x00007fbcb149e691: mov    $0x1,%edi
                       ││   0x00007fbcb149e696: mov    %r13d,0x18(%rsp)   ;*iload
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@64 (line 201)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.03%    0.01%       ││↗  0x00007fbcb149e69b: mov    %edi,%r13d
                       │││  0x00007fbcb149e69e: inc    %r13d              ;*iadd
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@69 (line 201)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  1.31%    0.10%       │││  0x00007fbcb149e6a1: mov    %r13d,%ebx
  0.28%    0.13%       │││  0x00007fbcb149e6a4: imul   %r14d,%ebx
  1.34%    0.32%       │││  0x00007fbcb149e6a8: add    0x18(%rsp),%ebx    ;*iadd
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@73 (line 201)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  1.12%    0.21%       │││  0x00007fbcb149e6ac: mov    %ebx,%esi
  0.84%    0.04%       │││  0x00007fbcb149e6ae: not    %esi
  0.50%    0.09%       │││  0x00007fbcb149e6b0: test   %ebx,%ebx
  0.03%    0.03%       │││  0x00007fbcb149e6b2: cmovl  %esi,%ebx
  1.72%    0.06%       │││  0x00007fbcb149e6b5: mov    %r8d,%esi
  0.09%    0.10%       │││  0x00007fbcb149e6b8: and    %ebx,%esi          ;*iand
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@95 (line 206)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.41%    0.01%       │││  0x00007fbcb149e6ba: mov    %esi,%ebx
  0.12%    0.01%       │││  0x00007fbcb149e6bc: and    $0xffffffffffffffc0,%ebx
  1.19%    0.21%       │││  0x00007fbcb149e6bf: mov    %esi,%ecx
  0.25%    0.06%       │││  0x00007fbcb149e6c1: sub    %ebx,%ecx          ;*isub
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@119 (line 209)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.41%    0.08%       │││  0x00007fbcb149e6c3: shr    $0x6,%esi          ;*iushr
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@102 (line 207)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                       │││  0x00007fbcb149e6c6: mov    %esi,%ebx
  1.12%    0.18%       │││  0x00007fbcb149e6c8: add    %edx,%ebx          ;*iadd
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@109 (line 208)
                       │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                       │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.28%    0.98%       │││  0x00007fbcb149e6ca: cmp    %eax,%ebx
                      ╭│││  0x00007fbcb149e6cc: jae    0x00007fbcb149e6fc  ;*laload
                      ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                      ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                      ││││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.34%    0.29%      ││││  0x00007fbcb149e6ce: mov    $0x1,%ebx
           0.14%      ││││  0x00007fbcb149e6d3: shl    %cl,%rbx
  1.59%    0.58%      ││││  0x00007fbcb149e6d6: movslq %esi,%rcx
                      ││││  0x00007fbcb149e6d9: mov    %r11,%rdi
  0.09%    0.10%      ││││  0x00007fbcb149e6dc: add    %rcx,%rdi
  0.84%    0.21%      ││││  0x00007fbcb149e6df: test   %rbx,0x10(%r10,%rdi,8)
                      │╰││  0x00007fbcb149e6e4: je     0x00007fbcb149e520  ;*ifne
                      │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@143 (line 211)
                      │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                      │ ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  3.84%    3.07%      │ ││  0x00007fbcb149e6ea: mov    %ebp,%ebx
  2.15%    3.65%      │ ││  0x00007fbcb149e6ec: inc    %ebx
  0.78%    0.77%      │ ││  0x00007fbcb149e6ee: cmp    %ebx,%r13d
                      │ ╰│  0x00007fbcb149e6f1: jge    0x00007fbcb149e520  ;*if_icmpgt
                      │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                      │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                      │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.34%    0.21%      │  │  0x00007fbcb149e6f7: mov    %r13d,%edi
  0.12%    0.05%      │  ╰  0x00007fbcb149e6fa: jmp    0x00007fbcb149e69b
                      ↘     0x00007fbcb149e6fc: mov    $0xffffffe4,%esi
                            0x00007fbcb149e701: mov    (%rsp),%rbp
                            0x00007fbcb149e705: mov    %rax,-0x8(%rsp)
                            0x00007fbcb149e70a: mov    0x8(%rsp),%eax
                            0x00007fbcb149e70e: mov    %eax,(%rsp)
                            0x00007fbcb149e711: mov    -0x8(%rsp),%rax
                            0x00007fbcb149e716: mov    %rax,-0x8(%rsp)
                            0x00007fbcb149e71b: mov    0xc(%rsp),%eax
                            0x00007fbcb149e71f: mov    %eax,0x4(%rsp)
                            0x00007fbcb149e723: mov    -0x8(%rsp),%rax
....................................................................................................
 69.06%   57.22%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 587 (300 bytes) 

                     Decoding compiled method 0x00007fbcb1488110:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007fbca904c6f0} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  0.31%    0.87%       0x00007fbcb14882a0: mov    %eax,-0x14000(%rsp)
  0.25%    0.88%       0x00007fbcb14882a7: push   %rbp
  0.16%    0.33%       0x00007fbcb14882a8: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  0.16%    0.38%       0x00007fbcb14882ac: mov    %edx,0x8(%rsp)
  0.62%    0.96%       0x00007fbcb14882b0: mov    %edx,%ebx
  0.19%    0.20%       0x00007fbcb14882b2: sar    $0x3,%ebx          ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  0.31%    0.40%       0x00007fbcb14882b5: movslq %ecx,%r14          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
           0.10%       0x00007fbcb14882b8: mov    $0x87c37b91114253d5,%rdi
  0.34%    0.61%       0x00007fbcb14882c2: test   %ebx,%ebx
                  ╭    0x00007fbcb14882c4: jle    0x00007fbcb14883ac  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.09%    0.47%  │    0x00007fbcb14882ca: mov    0xc(%rsi),%r10d    ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007fbcb1488711
  0.22%    0.27%  │    0x00007fbcb14882ce: xor    %r9d,%r9d
           0.03%  │    0x00007fbcb14882d1: xor    %r8d,%r8d
  0.37%    0.74%  │    0x00007fbcb14882d4: nopl   0x0(%rax,%rax,1)
  0.19%    0.19%  │    0x00007fbcb14882dc: xchg   %ax,%ax            ;*iload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  0.19%    0.58%  │ ↗  0x00007fbcb14882e0: cmp    %r10d,%r9d
                  │ │  0x00007fbcb14882e3: jae    0x00007fbcb148855e  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
  0.03%    0.08%  │ │  0x00007fbcb14882e9: movzbq 0x10(%rsi,%r9,1),%rcx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.22%    0.73%  │ │  0x00007fbcb14882ef: mov    %r9d,%r11d
  0.25%    0.10%  │ │  0x00007fbcb14882f2: add    $0x7,%r11d
  0.28%    0.39%  │ │  0x00007fbcb14882f6: cmp    %r10d,%r11d
                  │ │  0x00007fbcb14882f9: jae    0x00007fbcb1488591  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
           0.04%  │ │  0x00007fbcb14882ff: mov    %rcx,(%rsp)
  0.37%    0.57%  │ │  0x00007fbcb1488303: movslq %r9d,%r11          ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
  0.28%    0.38%  │ │  0x00007fbcb1488306: movzbq 0x11(%rsi,%r11,1),%r9
  0.19%    0.57%  │ │  0x00007fbcb148830c: movzbq 0x17(%rsi,%r11,1),%rcx
           0.04%  │ │  0x00007fbcb1488312: movzbq 0x12(%rsi,%r11,1),%rdx
  0.28%    0.63%  │ │  0x00007fbcb1488318: movzbq 0x13(%rsi,%r11,1),%rax
  0.25%    0.37%  │ │  0x00007fbcb148831e: movzbq 0x14(%rsi,%r11,1),%rbp
  0.37%    0.52%  │ │  0x00007fbcb1488324: movzbq 0x15(%rsi,%r11,1),%r13
  0.03%    0.05%  │ │  0x00007fbcb148832a: movzbq 0x16(%rsi,%r11,1),%r11
  0.22%    0.61%  │ │  0x00007fbcb1488330: shl    $0x8,%r9
  0.12%    0.34%  │ │  0x00007fbcb1488334: or     (%rsp),%r9
  0.34%    0.53%  │ │  0x00007fbcb1488338: shl    $0x30,%r11
  0.03%    0.05%  │ │  0x00007fbcb148833c: shl    $0x28,%r13
  0.31%    0.56%  │ │  0x00007fbcb1488340: shl    $0x20,%rbp
  0.09%    0.30%  │ │  0x00007fbcb1488344: shl    $0x18,%rax
  0.19%    0.57%  │ │  0x00007fbcb1488348: shl    $0x10,%rdx
  0.03%    0.04%  │ │  0x00007fbcb148834c: or     %rdx,%r9
  0.22%    0.64%  │ │  0x00007fbcb148834f: or     %rax,%r9
  0.12%    0.33%  │ │  0x00007fbcb1488352: or     %rbp,%r9
  0.47%    0.53%  │ │  0x00007fbcb1488355: or     %r13,%r9
  0.06%    0.10%  │ │  0x00007fbcb1488358: or     %r11,%r9
  0.31%    0.53%  │ │  0x00007fbcb148835b: shl    $0x38,%rcx
  0.28%    0.38%  │ │  0x00007fbcb148835f: or     %rcx,%r9
  0.25%    0.27%  │ │  0x00007fbcb1488362: imul   %rdi,%r9           ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.47%    0.58%  │ │  0x00007fbcb1488366: rol    $0x1f,%r9
  0.97%    0.72%  │ │  0x00007fbcb148836a: mov    $0x4cf5ad432745937f,%r11
  0.09%    0.04%  │ │  0x00007fbcb1488374: imul   %r11,%r9
  1.59%    1.58%  │ │  0x00007fbcb1488378: xor    %r14,%r9           ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.59%    0.67%  │ │  0x00007fbcb148837b: rol    $0x1b,%r9          ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.69%    1.21%  │ │  0x00007fbcb148837f: mov    %r9,%r14
           0.03%  │ │  0x00007fbcb1488382: shl    $0x2,%r14
  0.37%    1.11%  │ │  0x00007fbcb1488386: add    %r9,%r14
  0.41%    1.24%  │ │  0x00007fbcb1488389: add    $0x52dce729,%r14   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.75%    1.41%  │ │  0x00007fbcb1488390: mov    %r8d,%ecx
  0.03%    0.05%  │ │  0x00007fbcb1488393: inc    %ecx               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
  0.03%    0.03%  │ │  0x00007fbcb1488395: cmp    %ebx,%ecx
                  │╭│  0x00007fbcb1488397: jge    0x00007fbcb14883ac  ;*if_icmpge
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │││  0x00007fbcb1488399: shl    $0x3,%r8d
                  │││  0x00007fbcb148839d: mov    %r8d,%r9d
                  │││  0x00007fbcb14883a0: add    $0x8,%r9d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007fbcb14883a4: mov    %ecx,%r8d
                  ││╰  0x00007fbcb14883a7: jmpq   0x00007fbcb14882e0  ;*if_icmpge
                  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
           0.05%  ↘↘   0x00007fbcb14883ac: mov    0x8(%rsp),%r8d
  0.66%    1.33%       0x00007fbcb14883b1: and    $0xfffffffffffffff8,%r8d  ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
           0.05%       0x00007fbcb14883b5: mov    0x8(%rsp),%r10d
           0.05%       0x00007fbcb14883ba: sub    %r8d,%r10d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
           0.03%       0x00007fbcb14883bd: movslq %r8d,%r9           ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.69%    1.24%       0x00007fbcb14883c0: xor    %ecx,%ecx
           0.05%       0x00007fbcb14883c2: cmp    $0x4,%r10d
                       0x00007fbcb14883c6: je     0x00007fbcb148846d
           0.06%       0x00007fbcb14883cc: cmp    $0x4,%r10d
                       0x00007fbcb14883d0: jle    0x00007fbcb14883ed
                       0x00007fbcb14883d2: cmp    $0x7,%r10d
                       0x00007fbcb14883d6: je     0x00007fbcb1488410
                       0x00007fbcb14883d8: cmp    $0x7,%r10d
                       0x00007fbcb14883dc: jg     0x00007fbcb1488510
                       0x00007fbcb14883e2: cmp    $0x6,%r10d
                       0x00007fbcb14883e6: je     0x00007fbcb148842d
                       0x00007fbcb14883e8: xor    %r11d,%r11d
                       0x00007fbcb14883eb: jmp    0x00007fbcb148844d
           0.04%       0x00007fbcb14883ed: cmp    $0x2,%r10d
....................................................................................................
 16.36%   28.74%  <total for region 2>

....[Hottest Regions]...............................................................................
 69.06%   57.22%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 621 (474 bytes) 
 16.36%   28.74%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 587 (300 bytes) 
  6.31%    7.75%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 587 (77 bytes) 
  3.18%    0.95%   [kernel.kallsyms]  native_write_msr_safe (0 bytes) 
  0.91%    1.58%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 587 (30 bytes) 
  0.19%            [kernel.kallsyms]  page_fault (0 bytes) 
  0.16%    0.01%   [kernel.kallsyms]  do_numa_page (0 bytes) 
  0.16%    0.01%   [kernel.kallsyms]  __sb_end_write (0 bytes) 
  0.12%            [kernel.kallsyms]  fget_light (0 bytes) 
  0.12%    0.05%   [kernel.kallsyms]  mutex_unlock (0 bytes) 
  0.09%    0.01%   [kernel.kallsyms]  mutex_lock (18 bytes) 
  0.09%    0.19%           libjvm.so  [unknown] (75 bytes) 
  0.09%    0.01%  libpthread-2.17.so  __pthread_disable_asynccancel (0 bytes) 
  0.06%    0.01%   [kernel.kallsyms]  change_protection_range (0 bytes) 
  0.06%    0.03%   [kernel.kallsyms]  rw_verify_area (41 bytes) 
  0.06%    0.04%   [kernel.kallsyms]  __sb_start_write (9 bytes) 
  0.06%    0.04%   [kernel.kallsyms]  __percpu_counter_add (26 bytes) 
  0.06%    0.01%   [kernel.kallsyms]  _raw_spin_lock (0 bytes) 
  0.06%            [kernel.kallsyms]  system_call (12 bytes) 
  0.06%                       [ext4]  __ext4_get_inode_loc (5 bytes) 
  2.68%    3.35%  <...other 224 warm regions...>
....................................................................................................
 99.97%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 69.06%   57.22%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 621 
 23.57%   38.07%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 587 
  3.18%    0.95%   [kernel.kallsyms]  native_write_msr_safe 
  0.69%    0.74%           libjvm.so  [unknown] 
  0.22%    0.01%      hsdis-amd64.so  print_insn 
  0.19%    0.01%   [kernel.kallsyms]  do_numa_page 
  0.19%            [kernel.kallsyms]  page_fault 
  0.16%    0.03%   [kernel.kallsyms]  __sb_end_write 
  0.12%    0.08%        libc-2.17.so  vfprintf 
  0.12%    0.05%   [kernel.kallsyms]  mutex_unlock 
  0.12%    0.01%   [kernel.kallsyms]  fget_light 
  0.09%    0.01%  libpthread-2.17.so  __pthread_disable_asynccancel 
  0.09%    0.03%              [ext4]  __ext4_get_inode_loc 
  0.09%    0.01%   [kernel.kallsyms]  mutex_lock 
  0.09%    0.04%        libc-2.17.so  _IO_fwrite 
  0.09%    0.14%   [kernel.kallsyms]  __audit_syscall_exit 
  0.06%    0.03%   [kernel.kallsyms]  avc_has_perm_flags 
  0.06%    0.05%   [kernel.kallsyms]  vfs_write 
  0.06%    0.04%   [kernel.kallsyms]  __percpu_counter_add 
  0.06%    0.01%   [kernel.kallsyms]  _raw_spin_lock 
  1.62%    0.48%  <...other 48 warm methods...>
....................................................................................................
 99.97%   98.01%  <totals>

....[Distribution by Source]........................................................................
 92.63%   95.29%         C2, level 4
  5.65%    3.13%   [kernel.kallsyms]
  0.69%    0.74%           libjvm.so
  0.31%    0.47%        libc-2.17.so
  0.28%    0.08%      hsdis-amd64.so
  0.12%    0.09%  libpthread-2.17.so
  0.12%    0.10%              [ext4]
  0.06%    0.09%              [jbd2]
  0.06%    0.01%         interpreter
  0.03%             Unknown, level 0
....................................................................................................
 99.97%  100.00%  <totals>


Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·perf":
Perf stats:
--------------------------------------------------

      18162.037445      task-clock (msec)         #    0.771 CPUs utilized          
             1,223      context-switches          #    0.067 K/sec                  
               661      cpu-migrations            #    0.036 K/sec                  
            89,884      page-faults               #    0.005 M/sec                  
    39,957,619,115      cycles                    #    2.200 GHz                      (83.92%)
    10,076,777,084      stalled-cycles-frontend   #   25.22% frontend cycles idle     (83.93%)
   <not supported>      stalled-cycles-backend   
    74,815,789,485      instructions              #    1.87  insns per cycle        
                                                  #    0.13  stalled cycles per insn  (83.98%)
     7,746,145,087      branches                  #  426.502 M/sec                    (61.72%)
       272,410,748      branch-misses             #    3.52% of all branches          (23.23%)
    11,725,996,323      L1-dcache-loads           #  645.632 M/sec                    (5.33%)
        64,296,633      L1-dcache-load-misses     #    0.55% of all L1-dcache hits    (2.82%)
        12,633,279      LLC-loads                 #    0.696 M/sec                    (2.83%)
         3,749,801      LLC-load-misses           #   29.68% of all LL-cache hits     (4.23%)
   <not supported>      L1-icache-loads          
        55,437,023      L1-icache-load-misses     #    3.052 M/sec                    (5.64%)
    11,519,405,858      dTLB-loads                #  634.257 M/sec                    (5.43%)
         6,042,365      dTLB-load-misses          #    0.05% of all dTLB cache hits   (2.80%)
         1,299,135      iTLB-loads                #    0.072 M/sec                    (2.78%)
           511,214      iTLB-load-misses          #   39.35% of all iTLB cache hits   (4.17%)
   <not supported>      L1-dcache-prefetches     
        19,162,466      L1-dcache-prefetch-misses #    1.055 M/sec                    (5.56%)

      23.547944831 seconds time elapsed



# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: -XX:AllocatePrefetchStyle=2
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe
# Parameters: (blockSize = 8, numEntries = 10000000)

# Run progress: 87.50% complete, ETA 00:00:31
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 106.966 ns/op
# Warmup Iteration   2: 94.703 ns/op
# Warmup Iteration   3: 92.397 ns/op
# Warmup Iteration   4: 92.692 ns/op
# Warmup Iteration   5: 92.152 ns/op
Iteration   1: 93.824 ns/op
Iteration   2: 90.111 ns/op
Iteration   3: 90.589 ns/op
Iteration   4: 89.805 ns/op
Iteration   5: 92.869 ns/op
Iteration   6: 89.676 ns/op
Iteration   7: 86.412 ns/op
Iteration   8: 90.729 ns/op
Iteration   9: 89.385 ns/op
Iteration  10: 90.553 ns/op
# Processing profiler results: LinuxPerfAsmProfiler LinuxPerfProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe":
  90.395 ±(99.9%) 3.019 ns/op [Average]
  (min, avg, max) = (86.412, 90.395, 93.824), stdev = 1.997
  CI (99.9%): [87.376, 93.414] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·asm":
PrintAssembly processed: 187089 total address lines.
Perf output processed (skipped 17.467 seconds):
 Column 1: cycles (3673 events)
 Column 2: instructions (11210 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 610 (479 bytes) 

                             0x00007f3e2106070c: dec    %r11d
                             0x00007f3e2106070f: cmp    %r8d,%r11d
                             0x00007f3e21060712: jae    0x00007f3e21060a0d  ;*aload_1
                                                                           ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
                             0x00007f3e21060718: lea    (%r12,%rbx,8),%rsi  ;*getfield probeArray
                                                                           ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@1 (line 74)
                             0x00007f3e2106071c: xor    %edi,%edi
                  ╭          0x00007f3e2106071e: jmp    0x00007f3e21060742  ;*invokevirtual testBytes
                  │                                                        ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                  │                                                        ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
 20.75%   10.60%  │ ↗   ↗↗   0x00007f3e21060720: mov    0xc(%rsp),%edi
  2.21%    1.04%  │ │   ││   0x00007f3e21060724: inc    %edi               ;*iinc
                  │ │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@31 (line 74)
  0.22%    0.08%  │ │   ││   0x00007f3e21060726: cmp    0x8(%rsp),%edi
                  │╭│   ││   0x00007f3e2106072a: jge    0x00007f3e21060901  ;*if_icmpge
                  │││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@12 (line 74)
  0.38%    0.06%  │││   ││   0x00007f3e21060730: mov    (%rsp),%rax
  0.27%    0.04%  │││   ││   0x00007f3e21060734: mov    0x28(%rsp),%ebx
           0.02%  │││   ││   0x00007f3e21060738: mov    0x8(%rsp),%r8d
  0.03%    0.02%  │││   ││   0x00007f3e2106073d: mov    0x10(%rsp),%rsi    ;*aload_1
                  │││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@15 (line 74)
  0.41%    0.05%  ↘││   ││   0x00007f3e21060742: mov    0x10(%rsi,%rdi,4),%r10d  ;*iaload
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@17 (line 74)
  2.29%    0.15%   ││   ││   0x00007f3e21060747: mov    0x18(%rax),%r9d    ;*getfield bf
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
           0.01%   ││   ││   0x00007f3e2106074b: movslq %r10d,%r11         ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@26 (line 75)
  0.22%    0.04%   ││   ││   0x00007f3e2106074e: test   %r9d,%r9d
                   ││   ││   0x00007f3e21060751: je     0x00007f3e21060975  ;*invokevirtual testLong
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.01%   ││   ││   0x00007f3e21060757: mov    $0x5886687b8,%rcx  ;   {oop(a &apos;java/lang/Class&apos; = &apos;com/github/prasanthj/bloomfilter/BloomKFilter&apos;)}
  0.27%    0.07%   ││   ││   0x00007f3e21060761: mov    0x6c(%rcx),%r13d   ;*getstatic BYTE_ARRAY_8
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.01%   ││   ││   0x00007f3e21060765: movsbl %r10b,%ecx         ;*i2b  ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@8 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.30%    0.08%   ││   ││   0x00007f3e21060769: mov    0xc(%r12,%r13,8),%edx  ; implicit exception: dispatches to 0x00007f3e21060a71
  0.11%    0.06%   ││   ││   0x00007f3e2106076e: cmp    $0x7,%edx
                   ││   ││   0x00007f3e21060771: jbe    0x00007f3e2106099d
  0.44%    0.06%   ││   ││   0x00007f3e21060777: mov    %edi,0xc(%rsp)
           0.02%   ││   ││   0x00007f3e2106077b: mov    %rsi,0x10(%rsp)
  0.05%    0.02%   ││   ││   0x00007f3e21060780: mov    %r8d,0x8(%rsp)
  0.05%    0.02%   ││   ││   0x00007f3e21060785: mov    %ebx,0x28(%rsp)
  0.38%    0.12%   ││   ││   0x00007f3e21060789: mov    %rax,(%rsp)
           0.04%   ││   ││   0x00007f3e2106078d: mov    %r10b,0x10(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@9 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.49%    0.13%   ││   ││   0x00007f3e21060792: lea    (%r12,%r9,8),%rbp  ;*getfield bf
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@21 (line 75)
  0.25%    0.15%   ││   ││   0x00007f3e21060796: mov    %r9d,0x18(%rsp)
  0.03%    0.01%   ││   ││   0x00007f3e2106079b: lea    (%r12,%r13,8),%rsi  ;*getstatic BYTE_ARRAY_8
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@0 (line 252)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.03%    0.02%   ││   ││   0x00007f3e2106079f: mov    %r11,%r8
  0.27%    0.09%   ││   ││   0x00007f3e210607a2: sar    $0x38,%r8
  0.19%    0.09%   ││   ││   0x00007f3e210607a6: mov    %r11,%r10
  0.08%    0.03%   ││   ││   0x00007f3e210607a9: sar    $0x30,%r10
           0.03%   ││   ││   0x00007f3e210607ad: mov    %r8d,%r8d
  0.16%    0.55%   ││   ││   0x00007f3e210607b0: mov    %r10d,%r10d
  0.33%    0.18%   ││   ││   0x00007f3e210607b3: mov    %r11,%rcx
           0.02%   ││   ││   0x00007f3e210607b6: sar    $0x28,%rcx
           0.02%   ││   ││   0x00007f3e210607ba: mov    %r11,%r9
  0.19%    0.27%   ││   ││   0x00007f3e210607bd: sar    $0x20,%r9
  0.38%    0.29%   ││   ││   0x00007f3e210607c1: mov    %ecx,%ecx
           0.05%   ││   ││   0x00007f3e210607c3: mov    %r9d,%r9d
           0.02%   ││   ││   0x00007f3e210607c6: mov    %r11,%rdi
  0.05%    0.20%   ││   ││   0x00007f3e210607c9: sar    $0x18,%rdi
  0.27%    0.13%   ││   ││   0x00007f3e210607cd: mov    %r11,%rbx
  0.11%    0.10%   ││   ││   0x00007f3e210607d0: sar    $0x10,%rbx
  0.03%    0.03%   ││   ││   0x00007f3e210607d4: mov    %edi,%edi
  0.16%    0.05%   ││   ││   0x00007f3e210607d6: mov    %ebx,%ebx
  0.33%    0.06%   ││   ││   0x00007f3e210607d8: sar    $0x8,%r11
           0.04%   ││   ││   0x00007f3e210607dc: mov    %r11d,%r11d
           0.02%   ││   ││   0x00007f3e210607df: mov    %r11b,0x11(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@20 (line 253)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.41%    0.12%   ││   ││   0x00007f3e210607e4: mov    %bl,0x12(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@31 (line 254)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.05%    0.04%   ││   ││   0x00007f3e210607e9: mov    %dil,0x13(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@42 (line 255)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.52%    0.15%   ││   ││   0x00007f3e210607ee: mov    %r9b,0x14(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@53 (line 256)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.05%    0.04%   ││   ││   0x00007f3e210607f3: mov    %cl,0x15(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@64 (line 257)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.71%    0.26%   ││   ││   0x00007f3e210607f8: mov    %r10b,0x16(%r12,%r13,8)  ;*bastore
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::longToByteArrayLE@76 (line 258)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@2 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.08%            ││   ││   0x00007f3e210607fd: mov    %r8b,0x17(%r12,%r13,8)  ;*synchronization entry
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.49%    0.55%   ││   ││   0x00007f3e21060802: xor    %ecx,%ecx
           0.06%   ││   ││   0x00007f3e21060804: xchg   %ax,%ax
           0.04%   ││   ││   0x00007f3e21060807: callq  0x00007f3e20c0d160  ; OopMap{rbp=Oop [0]=Oop [16]=Oop [24]=NarrowOop [40]=NarrowOop off=332}
                   ││   ││                                                 ;*invokestatic hash64
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@1 (line 186)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   ││   ││                                                 ;   {static_call}
  0.19%    0.59%   ││   ││   0x00007f3e2106080c: mov    0x18(%rsp),%r11d
           0.02%   ││   ││   0x00007f3e21060811: mov    0x28(%r12,%r11,8),%r10d  ;*getfield totalBlockCount
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@37 (line 198)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.44%    0.23%   ││   ││   0x00007f3e21060816: mov    %eax,%r13d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@6 (line 187)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.19%    0.56%   ││   ││   0x00007f3e21060819: shr    $0x20,%rax
           0.01%   ││   ││   0x00007f3e2106081d: mov    %eax,%r14d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@13 (line 188)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.04%   ││   ││   0x00007f3e21060820: mov    %r13d,%eax
  0.35%    1.18%   ││   ││   0x00007f3e21060823: add    %r14d,%eax         ;*iadd
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@20 (line 190)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.14%    0.48%   ││   ││   0x00007f3e21060826: mov    %eax,%r9d
  0.03%            ││   ││   0x00007f3e21060829: not    %r9d
  0.27%    0.87%   ││   ││   0x00007f3e2106082c: test   %eax,%eax
  0.19%    0.44%   ││   ││   0x00007f3e2106082e: cmovl  %r9d,%eax          ;*iload
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@34 (line 198)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.76%    3.03%   ││   ││   0x00007f3e21060832: test   %r10d,%r10d
                   ││   ││   0x00007f3e21060835: je     0x00007f3e21060989  ;*irem
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@40 (line 198)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.03%    0.03%   ││   ││   0x00007f3e2106083b: mov    0xc(%r12,%r11,8),%ebp  ;*getfield k
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@58 (line 200)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   ││   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
           0.11%   ││   ││   0x00007f3e21060840: cmp    $0x1,%ebp
                   │╰   ││   0x00007f3e21060843: jl     0x00007f3e21060720  ;*if_icmpgt
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.19%    0.62%   │    ││   0x00007f3e21060849: mov    0x34(%r12,%r11,8),%r9d  ;*getfield bitSet
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@123 (line 210)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.16%    0.79%   │    ││   0x00007f3e2106084e: cmp    $0x80000000,%eax
                   │ ╭  ││   0x00007f3e21060853: jne    0x00007f3e2106085d
                   │ │  ││   0x00007f3e21060855: xor    %edx,%edx
                   │ │  ││   0x00007f3e21060857: cmp    $0xffffffffffffffff,%r10d
                   │ │╭ ││   0x00007f3e2106085b: je     0x00007f3e21060861
           0.01%   │ ↘│ ││   0x00007f3e2106085d: cltd   
  0.08%    0.21%   │  │ ││   0x00007f3e2106085e: idiv   %r10d
  8.17%   11.75%   │  ↘ ││   0x00007f3e21060861: imul   0x30(%r12,%r11,8),%edx  ;*imul
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@49 (line 199)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  1.36%    0.50%   │    ││   0x00007f3e21060867: mov    0xc(%r12,%r9,8),%r9d  ;*getfield data
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@126 (line 210)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │    ││                                                 ; implicit exception: dispatches to 0x00007f3e21060a36
  0.16%    0.66%   │    ││   0x00007f3e2106086c: mov    0xc(%r12,%r9,8),%eax  ;*laload
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │    ││                                                 ; implicit exception: dispatches to 0x00007f3e21060a36
                   │    ││   0x00007f3e21060871: cmp    $0x7ffffffe,%ebp
                   │    ││   0x00007f3e21060877: jg     0x00007f3e210609d1
                   │    ││   0x00007f3e2106087d: vmovd  %r11d,%xmm1
  0.30%    0.19%   │    ││   0x00007f3e21060882: mov    0x2c(%r12,%r11,8),%r8d
  0.16%    0.45%   │    ││   0x00007f3e21060887: lea    (%r12,%r9,8),%r10
                   │    ││   0x00007f3e2106088b: dec    %r8d
                   │    ││   0x00007f3e2106088e: movslq %edx,%r11
  0.46%    0.15%   │    ││   0x00007f3e21060891: mov    $0x1,%edi
  0.14%    1.08%   │    ││   0x00007f3e21060896: mov    %r13d,0x18(%rsp)
                   │    ││   0x00007f3e2106089b: nopl   0x0(%rax,%rax,1)   ;*iload
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@64 (line 201)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
                   │    ││↗  0x00007f3e210608a0: mov    %edi,%r13d
  0.30%    0.21%   │    │││  0x00007f3e210608a3: inc    %r13d              ;*iadd
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@69 (line 201)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.38%    0.66%   │    │││  0x00007f3e210608a6: mov    %r13d,%ebx
  0.19%    0.03%   │    │││  0x00007f3e210608a9: imul   %r14d,%ebx
  0.90%    0.12%   │    │││  0x00007f3e210608ad: add    0x18(%rsp),%ebx    ;*iadd
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@73 (line 201)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  1.20%    0.19%   │    │││  0x00007f3e210608b1: mov    %ebx,%esi
  0.30%    0.53%   │    │││  0x00007f3e210608b3: not    %esi
  0.38%    0.06%   │    │││  0x00007f3e210608b5: test   %ebx,%ebx
                   │    │││  0x00007f3e210608b7: cmovl  %esi,%ebx
  1.09%    0.68%   │    │││  0x00007f3e210608ba: mov    %r8d,%esi
  0.25%    0.04%   │    │││  0x00007f3e210608bd: and    %ebx,%esi          ;*iand
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@95 (line 206)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.25%    0.01%   │    │││  0x00007f3e210608bf: mov    %esi,%ebx
  0.25%    0.06%   │    │││  0x00007f3e210608c1: and    $0xffffffffffffffc0,%ebx
  0.49%    0.57%   │    │││  0x00007f3e210608c4: mov    %esi,%ecx
  0.16%    0.04%   │    │││  0x00007f3e210608c6: sub    %ebx,%ecx          ;*isub
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@119 (line 209)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.38%    0.08%   │    │││  0x00007f3e210608c8: shr    $0x6,%esi          ;*iushr
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@102 (line 207)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.41%    0.06%   │    │││  0x00007f3e210608cb: mov    %esi,%ebx
  0.44%    0.49%   │    │││  0x00007f3e210608cd: add    %edx,%ebx          ;*iadd
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@109 (line 208)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │    │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.33%    0.20%   │    │││  0x00007f3e210608cf: cmp    %eax,%ebx
                   │   ╭│││  0x00007f3e210608d1: jae    0x00007f3e2106090d  ;*laload
                   │   ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@131 (line 210)
                   │   ││││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   ││││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.33%    0.44%   │   ││││  0x00007f3e210608d3: mov    $0x1,%ebx
  0.33%    0.06%   │   ││││  0x00007f3e210608d8: shl    %cl,%rbx
  0.82%    1.27%   │   ││││  0x00007f3e210608db: movslq %esi,%rcx
                   │   ││││  0x00007f3e210608de: mov    %r11,%rdi
  0.35%    0.04%   │   ││││  0x00007f3e210608e1: add    %rcx,%rdi
  0.14%    0.67%   │   ││││  0x00007f3e210608e4: test   %rbx,0x10(%r10,%rdi,8)
           0.01%   │   │╰││  0x00007f3e210608e9: je     0x00007f3e21060720  ;*ifne
                   │   │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@143 (line 211)
                   │   │ ││                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   │ ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
 18.98%    9.92%   │   │ ││  0x00007f3e210608ef: mov    %ebp,%ebx
  1.66%    0.65%   │   │ ││  0x00007f3e210608f1: inc    %ebx
  0.74%    0.41%   │   │ ││  0x00007f3e210608f3: cmp    %ebx,%r13d
                   │   │ ╰│  0x00007f3e210608f6: jge    0x00007f3e21060720  ;*if_icmpgt
                   │   │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testBytes@61 (line 200)
                   │   │  │                                                ; - com.github.prasanthj.bloomfilter.BloomKFilter::testLong@5 (line 232)
                   │   │  │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@27 (line 75)
  0.22%    0.09%   │   │  │  0x00007f3e210608fc: mov    %r13d,%edi
  0.05%    0.05%   │   │  ╰  0x00007f3e210608ff: jmp    0x00007f3e210608a0  ;*if_icmpge
                   │   │                                                   ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe@12 (line 74)
                   ↘   │     0x00007f3e21060901: add    $0x40,%rsp
                       │     0x00007f3e21060905: pop    %rbp
                       │     0x00007f3e21060906: test   %eax,0x159a46f4(%rip)        # 0x00007f3e36a05000
                       │                                                   ;   {poll_return}
                       │     0x00007f3e2106090c: retq   
                       ↘     0x00007f3e2106090d: mov    $0xffffffe4,%esi
                             0x00007f3e21060912: mov    (%rsp),%rbp
                             0x00007f3e21060916: mov    %rax,-0x8(%rsp)
                             0x00007f3e2106091b: mov    0x8(%rsp),%eax
....................................................................................................
 79.09%   58.07%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 575 (300 bytes) 

                     Decoding compiled method 0x00007f3e2104be50:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007f3dfbe4c6f0} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  0.41%    1.84%       0x00007f3e2104bfe0: mov    %eax,-0x14000(%rsp)
  0.05%    0.08%       0x00007f3e2104bfe7: push   %rbp
  0.16%    0.29%       0x00007f3e2104bfe8: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  0.30%    0.88%       0x00007f3e2104bfec: mov    %edx,0x8(%rsp)
  0.14%    0.45%       0x00007f3e2104bff0: mov    %edx,%ebx
  0.11%    0.16%       0x00007f3e2104bff2: sar    $0x3,%ebx          ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  0.35%    1.03%       0x00007f3e2104bff5: movslq %ecx,%r14          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
  0.03%    0.04%       0x00007f3e2104bff8: mov    $0x87c37b91114253d5,%rdi
  0.11%    0.04%       0x00007f3e2104c002: test   %ebx,%ebx
                  ╭    0x00007f3e2104c004: jle    0x00007f3e2104c0ec  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.22%    0.48%  │    0x00007f3e2104c00a: mov    0xc(%rsi),%r10d    ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007f3e2104c451
  0.35%    1.00%  │    0x00007f3e2104c00e: xor    %r9d,%r9d
           0.03%  │    0x00007f3e2104c011: xor    %r8d,%r8d
  0.05%    0.11%  │    0x00007f3e2104c014: nopl   0x0(%rax,%rax,1)
  0.08%    0.21%  │    0x00007f3e2104c01c: xchg   %ax,%ax            ;*iload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  0.41%    1.22%  │ ↗  0x00007f3e2104c020: cmp    %r10d,%r9d
                  │ │  0x00007f3e2104c023: jae    0x00007f3e2104c29e  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
           0.02%  │ │  0x00007f3e2104c029: movzbq 0x10(%rsi,%r9,1),%rcx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.16%    0.13%  │ │  0x00007f3e2104c02f: mov    %r9d,%r11d
  0.19%    0.05%  │ │  0x00007f3e2104c032: add    $0x7,%r11d
  0.16%    0.61%  │ │  0x00007f3e2104c036: cmp    %r10d,%r11d
                  │ │  0x00007f3e2104c039: jae    0x00007f3e2104c2d1  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
           0.04%  │ │  0x00007f3e2104c03f: mov    %rcx,(%rsp)
  0.03%    0.24%  │ │  0x00007f3e2104c043: movslq %r9d,%r11          ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
  0.16%    0.52%  │ │  0x00007f3e2104c046: movzbq 0x11(%rsi,%r11,1),%r9
  0.30%    0.98%  │ │  0x00007f3e2104c04c: movzbq 0x17(%rsi,%r11,1),%rcx
           0.03%  │ │  0x00007f3e2104c052: movzbq 0x12(%rsi,%r11,1),%rdx
  0.05%    0.20%  │ │  0x00007f3e2104c058: movzbq 0x13(%rsi,%r11,1),%rax
  0.11%    0.44%  │ │  0x00007f3e2104c05e: movzbq 0x14(%rsi,%r11,1),%rbp
  0.22%    0.84%  │ │  0x00007f3e2104c064: movzbq 0x15(%rsi,%r11,1),%r13
           0.03%  │ │  0x00007f3e2104c06a: movzbq 0x16(%rsi,%r11,1),%r11
  0.05%    0.17%  │ │  0x00007f3e2104c070: shl    $0x8,%r9
  0.19%    0.34%  │ │  0x00007f3e2104c074: or     (%rsp),%r9
  0.35%    1.17%  │ │  0x00007f3e2104c078: shl    $0x30,%r11
           0.04%  │ │  0x00007f3e2104c07c: shl    $0x28,%r13
  0.11%    0.16%  │ │  0x00007f3e2104c080: shl    $0x20,%rbp
  0.22%    0.43%  │ │  0x00007f3e2104c084: shl    $0x18,%rax
  0.60%    0.96%  │ │  0x00007f3e2104c088: shl    $0x10,%rdx
  0.05%    0.01%  │ │  0x00007f3e2104c08c: or     %rdx,%r9
  0.05%    0.14%  │ │  0x00007f3e2104c08f: or     %rax,%r9
  0.08%    0.41%  │ │  0x00007f3e2104c092: or     %rbp,%r9
  0.33%    1.08%  │ │  0x00007f3e2104c095: or     %r13,%r9
  0.03%    0.04%  │ │  0x00007f3e2104c098: or     %r11,%r9
  0.11%    0.12%  │ │  0x00007f3e2104c09b: shl    $0x38,%rcx
  0.16%    0.40%  │ │  0x00007f3e2104c09f: or     %rcx,%r9
  0.27%    0.73%  │ │  0x00007f3e2104c0a2: imul   %rdi,%r9           ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.46%    0.57%  │ │  0x00007f3e2104c0a6: rol    $0x1f,%r9
  0.19%    0.43%  │ │  0x00007f3e2104c0aa: mov    $0x4cf5ad432745937f,%r11
  0.03%    0.06%  │ │  0x00007f3e2104c0b4: imul   %r11,%r9
  0.82%    1.77%  │ │  0x00007f3e2104c0b8: xor    %r14,%r9           ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.41%    0.54%  │ │  0x00007f3e2104c0bb: rol    $0x1b,%r9          ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.25%    0.87%  │ │  0x00007f3e2104c0bf: mov    %r9,%r14
  0.03%    0.04%  │ │  0x00007f3e2104c0c2: shl    $0x2,%r14
  0.74%    1.47%  │ │  0x00007f3e2104c0c6: add    %r9,%r14
  0.27%    1.14%  │ │  0x00007f3e2104c0c9: add    $0x52dce729,%r14   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.19%    1.11%  │ │  0x00007f3e2104c0d0: mov    %r8d,%ecx
           0.04%  │ │  0x00007f3e2104c0d3: inc    %ecx               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
  0.16%    0.35%  │ │  0x00007f3e2104c0d5: cmp    %ebx,%ecx
                  │╭│  0x00007f3e2104c0d7: jge    0x00007f3e2104c0ec  ;*if_icmpge
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
                  │││  0x00007f3e2104c0d9: shl    $0x3,%r8d
                  │││  0x00007f3e2104c0dd: mov    %r8d,%r9d
                  │││  0x00007f3e2104c0e0: add    $0x8,%r9d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007f3e2104c0e4: mov    %ecx,%r8d
                  ││╰  0x00007f3e2104c0e7: jmpq   0x00007f3e2104c020  ;*if_icmpge
                  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
           0.03%  ↘↘   0x00007f3e2104c0ec: mov    0x8(%rsp),%r8d
  0.35%    1.02%       0x00007f3e2104c0f1: and    $0xfffffffffffffff8,%r8d  ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
           0.10%       0x00007f3e2104c0f5: mov    0x8(%rsp),%r10d
  0.19%    0.49%       0x00007f3e2104c0fa: sub    %r8d,%r10d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
                       0x00007f3e2104c0fd: movslq %r8d,%r9           ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.41%    0.88%       0x00007f3e2104c100: xor    %ecx,%ecx
  0.08%    0.04%       0x00007f3e2104c102: cmp    $0x4,%r10d
                       0x00007f3e2104c106: je     0x00007f3e2104c1ad
  0.14%    0.40%       0x00007f3e2104c10c: cmp    $0x4,%r10d
                       0x00007f3e2104c110: jle    0x00007f3e2104c12d
                       0x00007f3e2104c112: cmp    $0x7,%r10d
                       0x00007f3e2104c116: je     0x00007f3e2104c150
                       0x00007f3e2104c118: cmp    $0x7,%r10d
                       0x00007f3e2104c11c: jg     0x00007f3e2104c250
                       0x00007f3e2104c122: cmp    $0x6,%r10d
                       0x00007f3e2104c126: je     0x00007f3e2104c16d
                       0x00007f3e2104c128: xor    %r11d,%r11d
                       0x00007f3e2104c12b: jmp    0x00007f3e2104c18d
                       0x00007f3e2104c12d: cmp    $0x2,%r10d
....................................................................................................
 11.49%   29.53%  <total for region 2>

....[Hottest Regions]...............................................................................
 79.09%   58.07%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 610 (479 bytes) 
 11.49%   29.53%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 575 (300 bytes) 
  3.95%    7.63%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 575 (77 bytes) 
  0.98%    0.22%   [kernel.kallsyms]  native_write_msr_safe (0 bytes) 
  0.49%    1.59%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 575 (20 bytes) 
  0.27%    0.02%   [kernel.kallsyms]  page_fault (0 bytes) 
  0.19%    0.02%   [kernel.kallsyms]  mutex_unlock (0 bytes) 
  0.11%            [kernel.kallsyms]  copy_page_rep (0 bytes) 
  0.11%    0.14%           libjvm.so  [unknown] (83 bytes) 
  0.11%    0.05%           libjvm.so  [unknown] (56 bytes) 
  0.08%    0.02%   [kernel.kallsyms]  do_numa_page (0 bytes) 
  0.08%            [kernel.kallsyms]  change_protection_range (0 bytes) 
  0.08%    0.01%   [kernel.kallsyms]  sys_write (30 bytes) 
  0.05%    0.02%   [kernel.kallsyms]  numa_migrate_prep (0 bytes) 
  0.05%            [kernel.kallsyms]  __mem_cgroup_count_vm_event (0 bytes) 
  0.05%            [kernel.kallsyms]  __list_del_entry (0 bytes) 
  0.05%            [kernel.kallsyms]  _raw_spin_unlock_irqrestore (0 bytes) 
  0.05%            [kernel.kallsyms]  system_call (29 bytes) 
  0.05%                 libc-2.17.so  read_int (9 bytes) 
  0.05%           libpthread-2.17.so  pthread_getspecific (0 bytes) 
  2.56%    2.65%  <...other 249 warm regions...>
....................................................................................................
 99.97%   99.96%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 79.09%   58.07%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe::testProbe, version 610 
 15.93%   38.74%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 575 
  0.98%    0.22%   [kernel.kallsyms]  native_write_msr_safe 
  0.60%    0.53%           libjvm.so  [unknown] 
  0.27%    0.02%   [kernel.kallsyms]  page_fault 
  0.19%    0.02%   [kernel.kallsyms]  mutex_unlock 
  0.14%    0.04%   [kernel.kallsyms]  do_numa_page 
  0.11%            [kernel.kallsyms]  copy_page_rep 
  0.11%    0.01%   [kernel.kallsyms]  sys_write 
  0.11%    0.03%   [kernel.kallsyms]  handle_mm_fault 
  0.08%    0.03%   [kernel.kallsyms]  change_protection_range 
  0.08%            [kernel.kallsyms]  __mem_cgroup_count_vm_event 
  0.05%    0.04%   [kernel.kallsyms]  avc_has_perm_flags 
  0.05%    0.04%   [kernel.kallsyms]  selinux_file_permission 
  0.05%    0.02%   [kernel.kallsyms]  numa_migrate_prep 
  0.05%            [kernel.kallsyms]  system_call 
  0.05%            [kernel.kallsyms]  _raw_spin_unlock_irqrestore 
  0.05%    0.03%        libc-2.17.so  _IO_default_xsputn 
  0.05%    0.02%        libc-2.17.so  __GI___mempcpy 
  0.05%    0.01%  libpthread-2.17.so  pthread_getspecific 
  1.85%    0.68%  <...other 63 warm methods...>
....................................................................................................
 99.97%   98.53%  <totals>

....[Distribution by Source]........................................................................
 95.02%   96.82%         C2, level 4
  3.62%    2.08%   [kernel.kallsyms]
  0.60%    0.54%           libjvm.so
  0.38%    0.39%        libc-2.17.so
  0.11%    0.03%      hsdis-amd64.so
  0.11%    0.04%  libpthread-2.17.so
  0.08%    0.03%              [jbd2]
  0.05%    0.03%              [ext4]
....................................................................................................
 99.97%   99.96%  <totals>


Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomKFilterProbe.testProbe:·perf":
Perf stats:
--------------------------------------------------

      30634.861546      task-clock (msec)         #    0.856 CPUs utilized          
             1,928      context-switches          #    0.063 K/sec                  
             1,623      cpu-migrations            #    0.053 K/sec                  
           220,627      page-faults               #    0.007 M/sec                  
    58,752,970,862      cycles                    #    1.918 GHz                      (84.33%)
    25,756,597,922      stalled-cycles-frontend   #   43.84% frontend cycles idle     (84.37%)
   <not supported>      stalled-cycles-backend   
    79,213,567,162      instructions              #    1.35  insns per cycle        
                                                  #    0.33  stalled cycles per insn  (84.41%)
     8,263,955,345      branches                  #  269.757 M/sec                    (69.10%)
       282,907,827      branch-misses             #    3.42% of all branches          (30.10%)
    12,926,875,289      L1-dcache-loads           #  421.966 M/sec                    (5.20%)
       645,627,372      L1-dcache-load-misses     #    4.99% of all L1-dcache hits    (2.70%)
       468,847,540      LLC-loads                 #   15.304 M/sec                    (2.69%)
        26,868,847      LLC-load-misses           #    5.73% of all LL-cache hits     (4.04%)
   <not supported>      L1-icache-loads          
        66,011,105      L1-icache-load-misses     #    2.155 M/sec                    (5.37%)
    12,615,004,518      dTLB-loads                #  411.786 M/sec                    (5.25%)
       228,140,071      dTLB-load-misses          #    1.81% of all dTLB cache hits   (2.68%)
         1,713,022      iTLB-loads                #    0.056 M/sec                    (2.68%)
           476,053      iTLB-load-misses          #   27.79% of all iTLB cache hits   (4.01%)
   <not supported>      L1-dcache-prefetches     
        43,048,284      L1-dcache-prefetch-misses #    1.405 M/sec                    (5.34%)

      35.796171045 seconds time elapsed



# Run complete. Total time: 00:04:17

Benchmark                                   (blockSize)  (numEntries)  Mode  Cnt   Score   Error  Units
BenchmarkBloomKFilterProbe.testProbe                  1         10000  avgt   10  61.668 ± 5.332  ns/op
BenchmarkBloomKFilterProbe.testProbe:·asm             1         10000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe:·cpi             1         10000  avgt        0.536            CPI
BenchmarkBloomKFilterProbe.testProbe:·perf            1         10000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe                  1      10000000  avgt   10  89.083 ± 1.910  ns/op
BenchmarkBloomKFilterProbe.testProbe:·asm             1      10000000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe:·cpi             1      10000000  avgt        0.717            CPI
BenchmarkBloomKFilterProbe.testProbe:·perf            1      10000000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe                  2         10000  avgt   10  55.255 ± 6.234  ns/op
BenchmarkBloomKFilterProbe.testProbe:·asm             2         10000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe:·cpi             2         10000  avgt        0.535            CPI
BenchmarkBloomKFilterProbe.testProbe:·perf            2         10000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe                  2      10000000  avgt   10  80.488 ± 8.962  ns/op
BenchmarkBloomKFilterProbe.testProbe:·asm             2      10000000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe:·cpi             2      10000000  avgt        0.705            CPI
BenchmarkBloomKFilterProbe.testProbe:·perf            2      10000000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe                  4         10000  avgt   10  62.973 ± 1.643  ns/op
BenchmarkBloomKFilterProbe.testProbe:·asm             4         10000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe:·cpi             4         10000  avgt        0.536            CPI
BenchmarkBloomKFilterProbe.testProbe:·perf            4         10000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe                  4      10000000  avgt   10  84.032 ± 1.164  ns/op
BenchmarkBloomKFilterProbe.testProbe:·asm             4      10000000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe:·cpi             4      10000000  avgt        0.700            CPI
BenchmarkBloomKFilterProbe.testProbe:·perf            4      10000000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe                  8         10000  avgt   10  56.303 ± 5.838  ns/op
BenchmarkBloomKFilterProbe.testProbe:·asm             8         10000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe:·cpi             8         10000  avgt        0.534            CPI
BenchmarkBloomKFilterProbe.testProbe:·perf            8         10000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe                  8      10000000  avgt   10  90.395 ± 3.019  ns/op
BenchmarkBloomKFilterProbe.testProbe:·asm             8      10000000  avgt          NaN            ---
BenchmarkBloomKFilterProbe.testProbe:·cpi             8      10000000  avgt        0.742            CPI
BenchmarkBloomKFilterProbe.testProbe:·perf            8      10000000  avgt          NaN            ---
