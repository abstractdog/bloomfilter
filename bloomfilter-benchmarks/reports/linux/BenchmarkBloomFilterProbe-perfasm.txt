# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: -XX:AllocatePrefetchStyle=2
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe.testProbe
# Parameters: (numEntries = 10000)

# Run progress: 0.00% complete, ETA 00:00:30
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 91.996 ns/op
# Warmup Iteration   2: 73.091 ns/op
# Warmup Iteration   3: 67.835 ns/op
# Warmup Iteration   4: 90.944 ns/op
# Warmup Iteration   5: 79.273 ns/op
Iteration   1: 80.207 ns/op
Iteration   2: 70.397 ns/op
Iteration   3: 68.029 ns/op
Iteration   4: 78.159 ns/op
Iteration   5: 92.121 ns/op
Iteration   6: 89.802 ns/op
Iteration   7: 76.937 ns/op
Iteration   8: 82.119 ns/op
Iteration   9: 73.876 ns/op
Iteration  10: 74.084 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe.testProbe":
  78.573 ±(99.9%) 11.797 ns/op [Average]
  (min, avg, max) = (68.029, 78.573, 92.121), stdev = 7.803
  CI (99.9%): [66.776, 90.370] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe.testProbe:·asm":
PrintAssembly processed: 188719 total address lines.
Perf output processed (skipped 15.331 seconds):
 Column 1: cycles (16136 events)
 Column 2: instructions (16109 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe, version 618 (496 bytes) 

                            0x00007f3b6949bccb: dec    %r11d
                            0x00007f3b6949bcce: cmp    %ebp,%r11d
                            0x00007f3b6949bcd1: jae    0x00007f3b6949c031  ;*aload_1
                                                                          ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@15 (line 71)
                            0x00007f3b6949bcd7: lea    (%r12,%r9,8),%rcx  ;*getfield probeArray
                                                                          ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@1 (line 71)
                            0x00007f3b6949bcdb: xor    %r10d,%r10d
                  ╭         0x00007f3b6949bcde: jmp    0x00007f3b6949bd05  ;*invokevirtual testBytes
                  │                                                       ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                  │                                                       ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  4.66%    1.50%  │ ↗  ↗↗   0x00007f3b6949bce0: mov    0xc(%rsp),%r10d
  2.64%    1.30%  │ │  ││   0x00007f3b6949bce5: inc    %r10d              ;*iinc
                  │ │  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@31 (line 71)
  0.24%           │ │  ││   0x00007f3b6949bce8: cmp    0x8(%rsp),%r10d
                  │ │  ││   0x00007f3b6949bced: jge    0x00007f3b6949bf91  ;*if_icmpge
                  │ │  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@12 (line 71)
  0.26%           │ │  ││   0x00007f3b6949bcf3: mov    (%rsp),%r8
  0.43%    0.12%  │ │  ││   0x00007f3b6949bcf7: mov    0x28(%rsp),%r9d
                  │ │  ││   0x00007f3b6949bcfc: mov    0x8(%rsp),%ebp
           0.01%  │ │  ││   0x00007f3b6949bd00: mov    0x10(%rsp),%rcx    ;*aload_1
                  │ │  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@15 (line 71)
  0.36%    0.01%  ↘ │  ││   0x00007f3b6949bd05: mov    0x10(%rcx,%r10,4),%edi  ;*iaload
                    │  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@17 (line 71)
  2.43%    0.19%    │  ││   0x00007f3b6949bd0a: mov    0x14(%r8),%ebx     ;*getfield bf
                    │  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@21 (line 72)
                    │  ││   0x00007f3b6949bd0e: movslq %edi,%rdx          ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@26 (line 72)
  0.33%    0.02%    │  ││   0x00007f3b6949bd11: test   %ebx,%ebx
                    │  ││   0x00007f3b6949bd13: je     0x00007f3b6949bf9d  ;*invokevirtual testLong
                    │  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
           0.01%    │  ││   0x00007f3b6949bd19: mov    0x60(%r15),%rax
  0.34%    0.04%    │  ││   0x00007f3b6949bd1d: mov    %rax,%r11
                    │  ││   0x00007f3b6949bd20: add    $0x18,%r11
  0.25%    0.01%    │  ││   0x00007f3b6949bd24: lea    (%r12,%rbx,8),%rsi  ;*getfield bf
                    │  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@21 (line 72)
  0.01%             │  ││   0x00007f3b6949bd28: cmp    0x70(%r15),%r11
                   ╭│  ││   0x00007f3b6949bd2c: jae    0x00007f3b6949bed2
  0.34%    0.04%   ││  ││   0x00007f3b6949bd32: mov    %rsi,0x30(%rsp)
  0.04%            ││  ││   0x00007f3b6949bd37: mov    %rdx,0x20(%rsp)
  0.38%    0.02%   ││  ││   0x00007f3b6949bd3c: mov    %ebx,0x1c(%rsp)
  0.01%            ││  ││   0x00007f3b6949bd40: mov    %edi,0x18(%rsp)
  0.43%    0.04%   ││  ││   0x00007f3b6949bd44: mov    %r10d,0xc(%rsp)
  0.34%    0.01%   ││  ││   0x00007f3b6949bd49: mov    %rcx,0x10(%rsp)
  0.24%    0.01%   ││  ││   0x00007f3b6949bd4e: mov    %ebp,0x8(%rsp)
  0.13%            ││  ││   0x00007f3b6949bd52: mov    %r9d,0x28(%rsp)
  0.44%    0.03%   ││  ││   0x00007f3b6949bd57: mov    %r8,(%rsp)
  0.20%    0.01%   ││  ││   0x00007f3b6949bd5b: mov    0x68(%r15),%r10
  0.01%            ││  ││   0x00007f3b6949bd5f: cmp    %r10,%r11
                   ││  ││   0x00007f3b6949bd62: jae    0x00007f3b6949bf15
  0.09%    0.01%   ││  ││   0x00007f3b6949bd68: mov    %r11,0x60(%r15)
  0.76%    0.27%   ││  ││   0x00007f3b6949bd6c: movq   $0x1,(%rax)
  0.66%    0.24%   ││  ││   0x00007f3b6949bd73: movl   $0x768,0x8(%rax)   ;   {metadata({type array byte})}
  0.33%    0.18%   ││  ││   0x00007f3b6949bd7a: movl   $0x8,0xc(%rax)
  0.42%    0.22%   ││  ││   0x00007f3b6949bd81: movq   $0x0,0x10(%rax)
  0.51%    0.96%   ││  ││   0x00007f3b6949bd89: mov    0x18(%rsp),%r11d
  0.02%    0.04%   ││  ││   0x00007f3b6949bd8e: mov    %r11b,0x10(%rax)
  0.26%    0.17%   ││  ││   0x00007f3b6949bd92: mov    %rax,%rsi          ;*newarray
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::longToByteArrayLE@2 (line 195)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@2 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.02%    0.01%   ││  ││   0x00007f3b6949bd95: mov    0x20(%rsp),%r10
  0.43%    0.43%   ││  ││   0x00007f3b6949bd9a: sar    $0x30,%r10
  0.03%    0.01%   ││  ││   0x00007f3b6949bd9e: mov    0x20(%rsp),%r11
  0.27%    0.09%   ││  ││   0x00007f3b6949bda3: sar    $0x28,%r11
  0.02%    0.02%   ││  ││   0x00007f3b6949bda7: mov    %r10d,%r10d
  0.32%    0.50%   ││  ││   0x00007f3b6949bdaa: mov    %r11d,%r8d
  0.02%            ││  ││   0x00007f3b6949bdad: mov    0x20(%rsp),%r11
  0.24%    0.04%   ││  ││   0x00007f3b6949bdb2: sar    $0x20,%r11
  0.03%    0.01%   ││  ││   0x00007f3b6949bdb6: mov    0x20(%rsp),%r9
  0.33%    0.59%   ││  ││   0x00007f3b6949bdbb: sar    $0x18,%r9
  0.02%            ││  ││   0x00007f3b6949bdbf: mov    %r11d,%r11d
  0.35%    0.01%   ││  ││   0x00007f3b6949bdc2: mov    %r9d,%ecx
  0.03%    0.01%   ││  ││   0x00007f3b6949bdc5: mov    0x20(%rsp),%r9
  0.35%    0.16%   ││  ││   0x00007f3b6949bdca: sar    $0x10,%r9
  0.02%    0.01%   ││  ││   0x00007f3b6949bdce: mov    0x20(%rsp),%rbx
  0.18%    0.03%   ││  ││   0x00007f3b6949bdd3: sar    $0x8,%rbx
  0.04%            ││  ││   0x00007f3b6949bdd7: mov    %r9d,%r9d
  0.37%    0.11%   ││  ││   0x00007f3b6949bdda: mov    %ebx,%edi
  0.02%            ││  ││   0x00007f3b6949bddc: mov    %dil,0x11(%rsi)    ;*bastore
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::longToByteArrayLE@20 (line 195)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@2 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.21%    0.32%   ││  ││   0x00007f3b6949bde0: mov    %r9b,0x12(%rsi)    ;*bastore
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::longToByteArrayLE@29 (line 195)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@2 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.12%    0.09%   ││  ││   0x00007f3b6949bde4: mov    %cl,0x13(%rsi)     ;*bastore
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::longToByteArrayLE@38 (line 195)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@2 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.41%    0.26%   ││  ││   0x00007f3b6949bde7: mov    %r11b,0x14(%rsi)   ;*bastore
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::longToByteArrayLE@47 (line 195)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@2 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.10%    0.18%   ││  ││   0x00007f3b6949bdeb: mov    %r8b,0x15(%rsi)    ;*bastore
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::longToByteArrayLE@56 (line 195)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@2 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.25%    0.50%   ││  ││   0x00007f3b6949bdef: mov    %r10b,0x16(%rsi)   ;*bastore
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::longToByteArrayLE@66 (line 195)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@2 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.12%    0.27%   ││  ││   0x00007f3b6949bdf3: mov    0x20(%rsp),%r10
  0.43%    0.12%   ││  ││   0x00007f3b6949bdf8: sar    $0x38,%r10
           0.03%   ││  ││   0x00007f3b6949bdfc: mov    %r10d,%r10d
  0.15%    0.44%   ││  ││   0x00007f3b6949bdff: mov    %r10b,0x17(%rsi)   ;*synchronization entry
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@1 (line 145)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.17%    0.10%   ││  ││   0x00007f3b6949be03: mov    $0x8,%edx
  0.27%    1.26%   ││  ││   0x00007f3b6949be08: xor    %ecx,%ecx
  0.01%    0.01%   ││  ││   0x00007f3b6949be0a: nop    
  0.22%    0.32%   ││  ││   0x00007f3b6949be0b: callq  0x00007f3b69046160  ; OopMap{[0]=Oop [16]=Oop [28]=NarrowOop [40]=NarrowOop [48]=Oop off=400}
                   ││  ││                                                 ;*invokestatic hash64
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@1 (line 145)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
                   ││  ││                                                 ;   {static_call}
  0.01%    0.01%   ││  ││   0x00007f3b6949be10: mov    0x1c(%rsp),%r8d
  0.19%    0.55%   ││  ││   0x00007f3b6949be15: mov    0x20(%r12,%r8,8),%ebp  ;*getfield k
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@22 (line 149)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.38%    0.36%   ││  ││   0x00007f3b6949be1a: cmp    $0x1,%ebp
                   │╰  ││   0x00007f3b6949be1d: jl     0x00007f3b6949bce0  ;*if_icmpgt
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@25 (line 149)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.01%    0.01%   │   ││   0x00007f3b6949be23: mov    0xc(%r12,%r8,8),%r13d  ;*getfield m
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@52 (line 155)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.15%    0.46%   │   ││   0x00007f3b6949be28: mov    %eax,%r11d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@6 (line 146)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
                   │   ││   0x00007f3b6949be2b: shr    $0x20,%rax
  0.36%    1.49%   │   ││   0x00007f3b6949be2f: mov    %eax,%r10d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@13 (line 147)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.01%    0.01%   │   ││   0x00007f3b6949be32: test   %r13d,%r13d
                   │   ││   0x00007f3b6949be35: je     0x00007f3b6949bfb1  ;*iload
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@28 (line 150)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.19%    0.46%   │   ││   0x00007f3b6949be3b: mov    0x24(%r12,%r8,8),%r9d  ;*getfield bitSet
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@59 (line 156)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
                   │   ││   0x00007f3b6949be40: mov    0xc(%r12,%r9,8),%ebx  ;*getfield data
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter$BitSet::get@1 (line 296)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@65 (line 156)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
                   │   ││                                                 ; implicit exception: dispatches to 0x00007f3b6949bfb1
  0.38%    1.15%   │   ││   0x00007f3b6949be45: vmovss 0x1c(%rsp),%xmm0
  0.01%            │   ││   0x00007f3b6949be4b: mov    0xc(%r12,%rbx,8),%esi  ;*laload
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter$BitSet::get@9 (line 296)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@65 (line 156)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
                   │   ││                                                 ; implicit exception: dispatches to 0x00007f3b6949bfb1
  0.25%    0.45%   │   ││   0x00007f3b6949be50: cmp    $0x7ffffffe,%ebp
                   │   ││   0x00007f3b6949be56: jg     0x00007f3b6949bff1
                   │   ││   0x00007f3b6949be5c: lea    (%r12,%rbx,8),%r14
  0.37%    1.89%   │   ││   0x00007f3b6949be60: mov    %r10d,%eax
                   │   ││   0x00007f3b6949be63: mov    $0x1,%r8d
  0.23%    0.40%   │   ││   0x00007f3b6949be69: nopl   0x0(%rax)          ;*iload
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@28 (line 150)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
                   │   ││↗  0x00007f3b6949be70: add    %r11d,%eax         ;*iadd
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@35 (line 150)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  1.05%    0.69%   │   │││  0x00007f3b6949be73: mov    %eax,%ecx
                   │   │││  0x00007f3b6949be75: not    %ecx
  0.47%    0.50%   │   │││  0x00007f3b6949be77: test   %eax,%eax
  0.01%            │   │││  0x00007f3b6949be79: cmovl  %ecx,%eax
  1.23%    1.45%   │   │││  0x00007f3b6949be7c: cmp    $0x80000000,%eax
                   │ ╭ │││  0x00007f3b6949be81: jne    0x00007f3b6949be8b
                   │ │ │││  0x00007f3b6949be83: xor    %edx,%edx
                   │ │ │││  0x00007f3b6949be85: cmp    $0xffffffffffffffff,%r13d
                   │ │╭│││  0x00007f3b6949be89: je     0x00007f3b6949be8f
  0.68%    1.10%   │ ↘││││  0x00007f3b6949be8b: cltd   
  0.01%    0.01%   │  ││││  0x00007f3b6949be8c: idiv   %r13d              ;*irem
                   │  ││││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@55 (line 155)
                   │  ││││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │  ││││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
 19.56%   22.53%   │  ↘│││  0x00007f3b6949be8f: movslq %edx,%r9           ;*i2l  ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@64 (line 156)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  1.02%    0.35%   │   │││  0x00007f3b6949be92: mov    %r9,%rcx
                   │   │││  0x00007f3b6949be95: shr    $0x6,%rcx
  1.10%    0.42%   │   │││  0x00007f3b6949be99: mov    %ecx,%edi          ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomFilter$BitSet::get@8 (line 296)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@65 (line 156)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.01%            │   │││  0x00007f3b6949be9b: cmp    %esi,%edi
                   │   │││  0x00007f3b6949be9d: jae    0x00007f3b6949bf36  ;*laload
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter$BitSet::get@9 (line 296)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@65 (line 156)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  1.08%    0.12%   │   │││  0x00007f3b6949bea3: mov    $0x1,%r9d
  0.01%            │   │││  0x00007f3b6949bea9: mov    %edx,%ecx
  0.18%    0.14%   │   │││  0x00007f3b6949beab: shl    %cl,%r9
  1.08%    0.33%   │   │││  0x00007f3b6949beae: test   %r9,0x10(%r14,%rdi,8)
                   │   ╰││  0x00007f3b6949beb3: je     0x00007f3b6949bce0  ;*ifeq
                   │    ││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter$BitSet::get@17 (line 296)
                   │    ││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@65 (line 156)
                   │    ││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │    ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  4.96%    1.46%   │    ││  0x00007f3b6949beb9: mov    %ebp,%ecx
  1.76%    1.64%   │    ││  0x00007f3b6949bebb: inc    %ecx
  0.68%    0.37%   │    ││  0x00007f3b6949bebd: inc    %r8d               ;*iinc
                   │    ││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@73 (line 149)
                   │    ││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │    ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
                   │    ││  0x00007f3b6949bec0: cmp    %ecx,%r8d
                   │    ╰│  0x00007f3b6949bec3: jge    0x00007f3b6949bce0  ;*if_icmpgt
                   │     │                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@25 (line 149)
                   │     │                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.54%    0.09%   │     │  0x00007f3b6949bec9: mov    %r8d,%eax
                   │     │  0x00007f3b6949becc: imul   %r10d,%eax         ;*imul
                   │     │                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@34 (line 150)
                   │     │                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.24%    0.01%   │     ╰  0x00007f3b6949bed0: jmp    0x00007f3b6949be70
                   ↘        0x00007f3b6949bed2: mov    %rsi,0x30(%rsp)
                            0x00007f3b6949bed7: mov    %rdx,0x20(%rsp)
                            0x00007f3b6949bedc: mov    %ebx,0x1c(%rsp)
                            0x00007f3b6949bee0: mov    %edi,0x18(%rsp)
                            0x00007f3b6949bee4: mov    %r10d,0xc(%rsp)
                            0x00007f3b6949bee9: mov    %rcx,0x10(%rsp)
                            0x00007f3b6949beee: mov    %ebp,0x8(%rsp)
....................................................................................................
 61.35%   49.85%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.Murmur3::hash64, version 573 (298 bytes) 

                     Decoding compiled method 0x00007f3b6947e350:
                     Code:
                     [Entry Point]
                     [Verified Entry Point]
                     [Constants]
                       # {method} {0x00007f3b7c9bab50} &apos;hash64&apos; &apos;([BII)J&apos; in &apos;com/github/prasanthj/bloomfilter/Murmur3&apos;
                       # parm0:    rsi:rsi   = &apos;[B&apos;
                       # parm1:    rdx       = int
                       # parm2:    rcx       = int
                       #           [sp+0x50]  (sp of caller)
  0.58%    1.04%       0x00007f3b6947e4e0: mov    %eax,-0x14000(%rsp)
  0.40%    0.17%       0x00007f3b6947e4e7: push   %rbp
  0.30%    0.23%       0x00007f3b6947e4e8: sub    $0x40,%rsp         ;*synchronization entry
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 130)
  0.26%    0.96%       0x00007f3b6947e4ec: mov    %edx,0x10(%rsp)
  0.35%    0.61%       0x00007f3b6947e4f0: mov    %edx,%r10d
                       0x00007f3b6947e4f3: sar    $0x3,%r10d         ;*ishr
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@5 (line 131)
  0.37%    0.83%       0x00007f3b6947e4f7: movslq %ecx,%r11          ;*i2l  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@1 (line 130)
                       0x00007f3b6947e4fa: mov    $0x87c37b91114253d5,%rbx
  0.27%    0.76%       0x00007f3b6947e504: test   %r10d,%r10d
                  ╭    0x00007f3b6947e507: jle    0x00007f3b6947e5f0  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.01%           │    0x00007f3b6947e50d: mov    %rsi,%r9
  0.31%    0.94%  │    0x00007f3b6947e510: mov    0xc(%rsi),%edi     ;*baload
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │                                                  ; implicit exception: dispatches to 0x00007f3b6947e979
           0.01%  │    0x00007f3b6947e513: xor    %r8d,%r8d
  0.40%    0.42%  │    0x00007f3b6947e516: xor    %ecx,%ecx
           0.03%  │╭   0x00007f3b6947e518: jmp    0x00007f3b6947e530
                  ││   0x00007f3b6947e51a: nopw   0x0(%rax,%rax,1)
                  ││↗  0x00007f3b6947e520: shl    $0x3,%ecx
                  │││  0x00007f3b6947e523: mov    %ecx,%r8d
                  │││  0x00007f3b6947e526: add    $0x8,%r8d          ;*ishl
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@21 (line 135)
                  │││  0x00007f3b6947e52a: mov    %r9d,%ecx
                  │││  0x00007f3b6947e52d: mov    %rsi,%r9           ;*iload
                  │││                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@18 (line 135)
  0.32%    0.78%  │↘│  0x00007f3b6947e530: cmp    %edi,%r8d
                  │ │  0x00007f3b6947e533: jae    0x00007f3b6947e7ba  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@27 (line 136)
                  │ │  0x00007f3b6947e539: movzbq 0x10(%r9,%r8,1),%rdx  ;*land
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@32 (line 136)
  0.33%    0.50%  │ │  0x00007f3b6947e53f: mov    %r8d,%esi
  0.01%           │ │  0x00007f3b6947e542: add    $0x7,%esi
  0.36%    0.86%  │ │  0x00007f3b6947e545: cmp    %edi,%esi
                  │ │  0x00007f3b6947e547: jae    0x00007f3b6947e7f1  ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@38 (line 136)
                  │ │  0x00007f3b6947e54d: mov    %rdx,(%rsp)
  0.27%    0.66%  │ │  0x00007f3b6947e551: movslq %r8d,%r8           ;*baload
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@130 (line 136)
                  │ │  0x00007f3b6947e554: movzbq 0x11(%r9,%r8,1),%rdx
  0.38%    0.88%  │ │  0x00007f3b6947e55a: movzbq 0x17(%r9,%r8,1),%rax
                  │ │  0x00007f3b6947e560: movzbq 0x12(%r9,%r8,1),%rbp
  0.29%    0.69%  │ │  0x00007f3b6947e566: movzbq 0x13(%r9,%r8,1),%r13
  0.04%    0.04%  │ │  0x00007f3b6947e56c: movzbq 0x14(%r9,%r8,1),%r14
  0.36%    0.76%  │ │  0x00007f3b6947e572: mov    %r9,%rsi
                  │ │  0x00007f3b6947e575: movzbq 0x15(%r9,%r8,1),%r9
  0.33%    0.81%  │ │  0x00007f3b6947e57b: movzbq 0x16(%rsi,%r8,1),%r8
  0.01%    0.01%  │ │  0x00007f3b6947e581: shl    $0x8,%rdx
  0.32%    0.73%  │ │  0x00007f3b6947e585: or     (%rsp),%rdx
  0.06%    0.09%  │ │  0x00007f3b6947e589: shl    $0x30,%r8
  0.28%    0.73%  │ │  0x00007f3b6947e58d: shl    $0x28,%r9
  0.01%           │ │  0x00007f3b6947e591: shl    $0x20,%r14
  0.23%    0.66%  │ │  0x00007f3b6947e595: shl    $0x18,%r13
  0.04%    0.09%  │ │  0x00007f3b6947e599: shl    $0x10,%rbp
  0.19%    0.74%  │ │  0x00007f3b6947e59d: or     %rbp,%rdx
  0.01%    0.01%  │ │  0x00007f3b6947e5a0: or     %r13,%rdx
  0.31%    0.92%  │ │  0x00007f3b6947e5a3: or     %r14,%rdx
  0.07%    0.19%  │ │  0x00007f3b6947e5a6: or     %r9,%rdx
  0.33%    0.90%  │ │  0x00007f3b6947e5a9: or     %r8,%rdx
  0.22%    0.43%  │ │  0x00007f3b6947e5ac: shl    $0x38,%rax
  0.36%    0.79%  │ │  0x00007f3b6947e5b0: or     %rax,%rdx
  0.24%    0.48%  │ │  0x00007f3b6947e5b3: imul   %rbx,%rdx          ;*lmul
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@147 (line 146)
  0.89%    1.43%  │ │  0x00007f3b6947e5b7: rol    $0x1f,%rdx
  0.32%    0.48%  │ │  0x00007f3b6947e5bb: mov    $0x4cf5ad432745937f,%r8
  0.33%    0.79%  │ │  0x00007f3b6947e5c5: imul   %r8,%rdx
  1.04%    2.70%  │ │  0x00007f3b6947e5c9: xor    %r11,%rdx          ;*lxor
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@170 (line 149)
  0.37%    1.27%  │ │  0x00007f3b6947e5cc: rol    $0x1b,%rdx         ;*lor  ; - java.lang.Long::rotateLeft@7 (line 1500)
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@175 (line 150)
  0.38%    0.94%  │ │  0x00007f3b6947e5d0: mov    %rdx,%r11
  0.21%    0.52%  │ │  0x00007f3b6947e5d3: shl    $0x2,%r11
  0.39%    1.01%  │ │  0x00007f3b6947e5d7: add    %rdx,%r11
  0.43%    0.87%  │ │  0x00007f3b6947e5da: add    $0x52dce729,%r11   ;*ladd
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@185 (line 150)
  0.40%    1.03%  │ │  0x00007f3b6947e5e1: mov    %ecx,%r9d
  0.26%    0.59%  │ │  0x00007f3b6947e5e4: inc    %r9d               ;*iinc
                  │ │                                                ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@187 (line 134)
           0.01%  │ │  0x00007f3b6947e5e7: cmp    %r10d,%r9d
                  │ ╰  0x00007f3b6947e5ea: jl     0x00007f3b6947e520  ;*if_icmpge
                  │                                                  ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@15 (line 134)
  0.01%    0.02%  ↘    0x00007f3b6947e5f0: mov    0x10(%rsp),%r10d
  0.48%    0.99%       0x00007f3b6947e5f5: and    $0xfffffffffffffff8,%r10d
                                                                     ;*ishl
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@199 (line 155)
  0.20%    0.37%       0x00007f3b6947e5f9: mov    0x10(%rsp),%r8d
                       0x00007f3b6947e5fe: sub    %r10d,%r8d         ;*isub
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@205 (line 156)
           0.01%       0x00007f3b6947e601: movslq %r10d,%rdi         ;*baload
                                                                     ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@351 (line 168)
  0.42%    0.68%       0x00007f3b6947e604: cmp    $0x4,%r8d
                       0x00007f3b6947e608: je     0x00007f3b6947e66b
  0.23%    0.45%       0x00007f3b6947e60a: cmp    $0x4,%r8d
                       0x00007f3b6947e60e: jle    0x00007f3b6947e635
                       0x00007f3b6947e610: cmp    $0x7,%r8d
                       0x00007f3b6947e614: je     0x00007f3b6947e672
                       0x00007f3b6947e616: cmp    $0x7,%r8d
                       0x00007f3b6947e61a: jg     0x00007f3b6947e76c
                       0x00007f3b6947e620: cmp    $0x6,%r8d
                       0x00007f3b6947e624: jne    0x00007f3b6947e62e
                       0x00007f3b6947e626: xor    %r9d,%r9d
                       0x00007f3b6947e629: mov    %rsi,%r8
                       0x00007f3b6947e62c: jmp    0x00007f3b6947e692
....................................................................................................
 14.99%   32.93%  <total for region 2>

....[Hottest Regions]...............................................................................
 61.35%   49.85%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe, version 618 (496 bytes) 
 14.99%   32.93%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 573 (298 bytes) 
  6.57%    7.71%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 573 (77 bytes) 
  2.60%    0.03%   [kernel.kallsyms]  clear_page_c_e (2 bytes) 
  1.69%    0.06%   [kernel.kallsyms]  page_fault (0 bytes) 
  1.33%    1.08%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe, version 618 (28 bytes) 
  0.82%    0.12%   [kernel.kallsyms]  do_numa_page (155 bytes) 
  0.74%    1.33%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 573 (17 bytes) 
  0.68%    0.62%   [kernel.kallsyms]  native_write_msr_safe (2 bytes) 
  0.66%    0.21%   [kernel.kallsyms]  change_protection_range (45 bytes) 
  0.60%    0.12%   [kernel.kallsyms]  __list_del_entry (65 bytes) 
  0.51%    0.02%   [kernel.kallsyms]  mem_cgroup_charge_common (3 bytes) 
  0.44%    0.01%   [kernel.kallsyms]  __mem_cgroup_commit_charge (64 bytes) 
  0.33%            [kernel.kallsyms]  copy_page_rep (0 bytes) 
  0.29%    0.27%   [kernel.kallsyms]  get_page_from_freelist (518 bytes) 
  0.29%    0.06%   [kernel.kallsyms]  mem_cgroup_page_lruvec (84 bytes) 
  0.17%    0.20%   [kernel.kallsyms]  _raw_spin_lock (50 bytes) 
  0.14%    0.14%   [kernel.kallsyms]  next_zones_zonelist (71 bytes) 
  0.13%    0.07%   [kernel.kallsyms]  get_page_from_freelist (89 bytes) 
  0.12%    0.13%   [kernel.kallsyms]  get_page_from_freelist (56 bytes) 
  5.57%    5.03%  <...other 616 warm regions...>
....................................................................................................
100.00%   99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 62.68%   50.93%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe, version 618 
 22.29%   41.97%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 573 
  2.60%    0.03%   [kernel.kallsyms]  clear_page_c_e 
  1.69%    0.06%   [kernel.kallsyms]  page_fault 
  0.86%    0.17%   [kernel.kallsyms]  do_numa_page 
  0.86%    0.98%           libjvm.so  [unknown] 
  0.68%    0.24%   [kernel.kallsyms]  change_protection_range 
  0.68%    0.62%   [kernel.kallsyms]  native_write_msr_safe 
  0.64%    0.55%   [kernel.kallsyms]  get_page_from_freelist 
  0.60%    0.12%   [kernel.kallsyms]  __list_del_entry 
  0.53%    0.04%   [kernel.kallsyms]  mem_cgroup_charge_common 
  0.47%    0.04%   [kernel.kallsyms]  __mem_cgroup_commit_charge 
  0.33%            [kernel.kallsyms]  copy_page_rep 
  0.32%    0.26%   [kernel.kallsyms]  handle_mm_fault 
  0.29%    0.08%   [kernel.kallsyms]  mem_cgroup_page_lruvec 
  0.17%    0.20%   [kernel.kallsyms]  _raw_spin_lock 
  0.16%    0.20%   [kernel.kallsyms]  __alloc_pages_nodemask 
  0.14%    0.15%   [kernel.kallsyms]  __do_page_fault 
  0.14%    0.14%   [kernel.kallsyms]  next_zones_zonelist 
  0.12%    0.05%   [kernel.kallsyms]  numa_migrate_prep 
  3.74%    2.62%  <...other 212 warm methods...>
....................................................................................................
100.00%   99.44%  <totals>

....[Distribution by Source]........................................................................
 84.97%   92.90%         C2, level 4
 13.49%    5.51%   [kernel.kallsyms]
  0.86%    0.99%           libjvm.so
  0.33%    0.32%        libc-2.17.so
  0.09%    0.07%  libpthread-2.17.so
  0.08%    0.06%      hsdis-amd64.so
  0.06%    0.08%              [ext4]
  0.05%    0.02%              [jbd2]
  0.04%    0.03%         interpreter
  0.01%                      [ixgbe]
  0.01%    0.01%         [ip_tables]
  0.01%                  C1, level 3
  0.01%             Unknown, level 0
....................................................................................................
100.00%   99.99%  <totals>



# JMH version: 1.19
# VM version: JDK 1.8.0_131, VM 25.131-b12
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64/jre/bin/java
# VM options: -XX:AllocatePrefetchStyle=2
# Warmup: 5 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe.testProbe
# Parameters: (numEntries = 10000000)

# Run progress: 50.00% complete, ETA 00:00:35
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 121.466 ns/op
# Warmup Iteration   2: 126.936 ns/op
# Warmup Iteration   3: 108.742 ns/op
# Warmup Iteration   4: 116.378 ns/op
# Warmup Iteration   5: 100.743 ns/op
Iteration   1: 101.674 ns/op
Iteration   2: 106.079 ns/op
Iteration   3: 109.490 ns/op
Iteration   4: 116.854 ns/op
Iteration   5: 122.183 ns/op
Iteration   6: 114.186 ns/op
Iteration   7: 108.266 ns/op
Iteration   8: 108.098 ns/op
Iteration   9: 108.519 ns/op
Iteration  10: 110.914 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe.testProbe":
  110.626 ±(99.9%) 8.781 ns/op [Average]
  (min, avg, max) = (101.674, 110.626, 122.183), stdev = 5.808
  CI (99.9%): [101.845, 119.407] (assumes normal distribution)

Secondary result "com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe.testProbe:·asm":
PrintAssembly processed: 190604 total address lines.
Perf output processed (skipped 19.898 seconds):
 Column 1: cycles (23033 events)
 Column 2: instructions (22975 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe, version 626 (489 bytes) 

                            0x00007fbfb949fc0b: dec    %r11d
                            0x00007fbfb949fc0e: cmp    %ebp,%r11d
                            0x00007fbfb949fc11: jae    0x00007fbfb949ff69  ;*aload_1
                                                                          ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@15 (line 71)
                            0x00007fbfb949fc17: lea    (%r12,%r9,8),%rcx  ;*getfield probeArray
                                                                          ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@1 (line 71)
                            0x00007fbfb949fc1b: xor    %r10d,%r10d
                  ╭         0x00007fbfb949fc1e: jmp    0x00007fbfb949fc45  ;*invokevirtual testBytes
                  │                                                       ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                  │                                                       ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
 22.02%    9.20%  │ ↗  ↗↗   0x00007fbfb949fc20: mov    0xc(%rsp),%r10d
  1.88%    0.38%  │ │  ││   0x00007fbfb949fc25: inc    %r10d              ;*iinc
                  │ │  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@31 (line 71)
  0.20%           │ │  ││   0x00007fbfb949fc28: cmp    0x8(%rsp),%r10d
                  │ │  ││   0x00007fbfb949fc2d: jge    0x00007fbfb949fe6e  ;*if_icmpge
                  │ │  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@12 (line 71)
  0.16%    0.00%  │ │  ││   0x00007fbfb949fc33: mov    (%rsp),%r8
  0.20%    0.02%  │ │  ││   0x00007fbfb949fc37: mov    0x28(%rsp),%r9d
                  │ │  ││   0x00007fbfb949fc3c: mov    0x8(%rsp),%ebp
  0.00%           │ │  ││   0x00007fbfb949fc40: mov    0x10(%rsp),%rcx    ;*aload_1
                  │ │  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@15 (line 71)
  0.18%    0.00%  ↘ │  ││   0x00007fbfb949fc45: mov    0x10(%rcx,%r10,4),%edi  ;*iaload
                    │  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@17 (line 71)
  1.35%    0.07%    │  ││   0x00007fbfb949fc4a: mov    0x14(%r8),%ebx     ;*getfield bf
                    │  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@21 (line 72)
                    │  ││   0x00007fbfb949fc4e: movslq %edi,%rdx          ;*i2l  ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@26 (line 72)
  0.18%    0.01%    │  ││   0x00007fbfb949fc51: test   %ebx,%ebx
                    │  ││   0x00007fbfb949fc53: je     0x00007fbfb949fed5  ;*invokevirtual testLong
                    │  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.00%             │  ││   0x00007fbfb949fc59: mov    0x60(%r15),%rax
  0.28%    0.02%    │  ││   0x00007fbfb949fc5d: mov    %rax,%r11
                    │  ││   0x00007fbfb949fc60: add    $0x18,%r11
  0.18%    0.01%    │  ││   0x00007fbfb949fc64: lea    (%r12,%rbx,8),%rsi  ;*getfield bf
                    │  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@21 (line 72)
                    │  ││   0x00007fbfb949fc68: cmp    0x70(%r15),%r11
                   ╭│  ││   0x00007fbfb949fc6c: jae    0x00007fbfb949fe0b
  0.29%    0.06%   ││  ││   0x00007fbfb949fc72: mov    %rsi,0x30(%rsp)
  0.01%    0.02%   ││  ││   0x00007fbfb949fc77: mov    %rdx,0x20(%rsp)
  0.23%    0.03%   ││  ││   0x00007fbfb949fc7c: mov    %ebx,0x1c(%rsp)
           0.00%   ││  ││   0x00007fbfb949fc80: mov    %edi,0x18(%rsp)
  0.28%    0.07%   ││  ││   0x00007fbfb949fc84: mov    %r10d,0xc(%rsp)
  0.14%    0.00%   ││  ││   0x00007fbfb949fc89: mov    %rcx,0x10(%rsp)
  0.17%    0.01%   ││  ││   0x00007fbfb949fc8e: mov    %ebp,0x8(%rsp)
  0.09%            ││  ││   0x00007fbfb949fc92: mov    %r9d,0x28(%rsp)
  0.31%    0.02%   ││  ││   0x00007fbfb949fc97: mov    %r8,(%rsp)
  0.15%    0.01%   ││  ││   0x00007fbfb949fc9b: mov    0x68(%r15),%r10
  0.00%            ││  ││   0x00007fbfb949fc9f: cmp    %r10,%r11
                   ││  ││   0x00007fbfb949fca2: jae    0x00007fbfb949fe4d
  0.03%    0.01%   ││  ││   0x00007fbfb949fca8: mov    %r11,0x60(%r15)
  0.64%    0.25%   ││  ││   0x00007fbfb949fcac: movq   $0x1,(%rax)
  0.52%    0.13%   ││  ││   0x00007fbfb949fcb3: movl   $0x768,0x8(%rax)   ;   {metadata({type array byte})}
  0.22%    0.04%   ││  ││   0x00007fbfb949fcba: movl   $0x8,0xc(%rax)
  0.35%    0.16%   ││  ││   0x00007fbfb949fcc1: movq   $0x0,0x10(%rax)
  0.43%    0.67%   ││  ││   0x00007fbfb949fcc9: mov    0x18(%rsp),%r11d
  0.01%    0.02%   ││  ││   0x00007fbfb949fcce: mov    %r11b,0x10(%rax)
  0.24%    0.14%   ││  ││   0x00007fbfb949fcd2: mov    %rax,%rsi          ;*newarray
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::longToByteArrayLE@2 (line 195)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@2 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.01%            ││  ││   0x00007fbfb949fcd5: mov    0x20(%rsp),%r10
  0.32%    0.07%   ││  ││   0x00007fbfb949fcda: sar    $0x30,%r10
  0.00%    0.00%   ││  ││   0x00007fbfb949fcde: mov    0x20(%rsp),%r11
  0.18%    0.01%   ││  ││   0x00007fbfb949fce3: sar    $0x28,%r11
  0.00%    0.01%   ││  ││   0x00007fbfb949fce7: mov    %r10d,%r10d
  0.23%    0.07%   ││  ││   0x00007fbfb949fcea: mov    %r11d,%r8d
  0.00%    0.00%   ││  ││   0x00007fbfb949fced: mov    0x20(%rsp),%r11
  0.19%    0.00%   ││  ││   0x00007fbfb949fcf2: sar    $0x20,%r11
  0.00%    0.00%   ││  ││   0x00007fbfb949fcf6: mov    0x20(%rsp),%r9
  0.19%    0.01%   ││  ││   0x00007fbfb949fcfb: sar    $0x18,%r9
  0.00%            ││  ││   0x00007fbfb949fcff: mov    %r11d,%r11d
  0.15%    0.02%   ││  ││   0x00007fbfb949fd02: mov    %r9d,%ecx
           0.00%   ││  ││   0x00007fbfb949fd05: mov    0x20(%rsp),%r9
  0.26%    0.01%   ││  ││   0x00007fbfb949fd0a: sar    $0x10,%r9
                   ││  ││   0x00007fbfb949fd0e: mov    0x20(%rsp),%rbx
  0.18%    0.00%   ││  ││   0x00007fbfb949fd13: sar    $0x8,%rbx
                   ││  ││   0x00007fbfb949fd17: mov    %r9d,%r9d
  0.29%    0.09%   ││  ││   0x00007fbfb949fd1a: mov    %ebx,%edi
  0.00%            ││  ││   0x00007fbfb949fd1c: mov    %dil,0x11(%rsi)    ;*bastore
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::longToByteArrayLE@20 (line 195)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@2 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.20%    0.35%   ││  ││   0x00007fbfb949fd20: mov    %r9b,0x12(%rsi)    ;*bastore
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::longToByteArrayLE@29 (line 195)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@2 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.21%    0.03%   ││  ││   0x00007fbfb949fd24: mov    %cl,0x13(%rsi)     ;*bastore
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::longToByteArrayLE@38 (line 195)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@2 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.24%    0.14%   ││  ││   0x00007fbfb949fd27: mov    %r11b,0x14(%rsi)   ;*bastore
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::longToByteArrayLE@47 (line 195)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@2 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.09%    0.17%   ││  ││   0x00007fbfb949fd2b: mov    %r8b,0x15(%rsi)    ;*bastore
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::longToByteArrayLE@56 (line 195)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@2 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.19%    0.48%   ││  ││   0x00007fbfb949fd2f: mov    %r10b,0x16(%rsi)   ;*bastore
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::longToByteArrayLE@66 (line 195)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@2 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.11%    0.33%   ││  ││   0x00007fbfb949fd33: mov    0x20(%rsp),%r10
  0.21%    0.14%   ││  ││   0x00007fbfb949fd38: sar    $0x38,%r10
  0.01%    0.03%   ││  ││   0x00007fbfb949fd3c: mov    %r10d,%r10d
  0.14%    0.48%   ││  ││   0x00007fbfb949fd3f: mov    %r10b,0x17(%rsi)   ;*synchronization entry
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@-1 (line 118)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@1 (line 145)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.18%    0.17%   ││  ││   0x00007fbfb949fd43: mov    $0x8,%edx
  0.23%    1.19%   ││  ││   0x00007fbfb949fd48: xor    %ecx,%ecx
  0.02%    0.00%   ││  ││   0x00007fbfb949fd4a: nop    
  0.17%    0.40%   ││  ││   0x00007fbfb949fd4b: callq  0x00007fbfb9046160  ; OopMap{[0]=Oop [16]=Oop [28]=NarrowOop [40]=NarrowOop [48]=Oop off=400}
                   ││  ││                                                 ;*invokestatic hash64
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.Murmur3::hash64@4 (line 118)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@1 (line 145)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
                   ││  ││                                                 ;   {static_call}
  0.19%    0.86%   ││  ││   0x00007fbfb949fd50: mov    0x1c(%rsp),%r8d
  0.03%    0.10%   ││  ││   0x00007fbfb949fd55: mov    0x20(%r12,%r8,8),%ebp  ;*getfield k
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@22 (line 149)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   ││  ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.15%    0.18%   ││  ││   0x00007fbfb949fd5a: cmp    $0x1,%ebp
                   │╰  ││   0x00007fbfb949fd5d: jl     0x00007fbfb949fc20  ;*if_icmpgt
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@25 (line 149)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.21%    0.82%   │   ││   0x00007fbfb949fd63: mov    0xc(%r12,%r8,8),%r13d  ;*getfield m
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@52 (line 155)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
                   │   ││   0x00007fbfb949fd68: mov    %eax,%r11d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@6 (line 146)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.04%    0.18%   │   ││   0x00007fbfb949fd6b: shr    $0x20,%rax
  0.16%    0.83%   │   ││   0x00007fbfb949fd6f: mov    %eax,%r10d         ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@13 (line 147)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.17%    0.74%   │   ││   0x00007fbfb949fd72: test   %r13d,%r13d
                   │   ││   0x00007fbfb949fd75: je     0x00007fbfb949fee9  ;*iload
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@28 (line 150)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
                   │   ││   0x00007fbfb949fd7b: mov    0x24(%r12,%r8,8),%r9d  ;*getfield bitSet
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@59 (line 156)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.02%    0.16%   │   ││   0x00007fbfb949fd80: mov    0xc(%r12,%r9,8),%ebx  ;*getfield data
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter$BitSet::get@1 (line 296)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@65 (line 156)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
                   │   ││                                                 ; implicit exception: dispatches to 0x00007fbfb949fee9
  0.16%    0.69%   │   ││   0x00007fbfb949fd85: vmovss 0x1c(%rsp),%xmm0
  0.23%    0.82%   │   ││   0x00007fbfb949fd8b: mov    0xc(%r12,%rbx,8),%esi  ;*laload
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter$BitSet::get@9 (line 296)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@65 (line 156)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
                   │   ││                                                 ; implicit exception: dispatches to 0x00007fbfb949fee9
  0.03%    0.16%   │   ││   0x00007fbfb949fd90: cmp    $0x7ffffffe,%ebp
                   │   ││   0x00007fbfb949fd96: jg     0x00007fbfb949ff29
  0.03%    0.12%   │   ││   0x00007fbfb949fd9c: lea    (%r12,%rbx,8),%r14
  0.17%    0.92%   │   ││   0x00007fbfb949fda0: mov    %r10d,%eax
  0.23%    0.74%   │   ││   0x00007fbfb949fda3: mov    $0x1,%r8d          ;*iload
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@28 (line 150)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   ││                                                 ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.01%    0.09%   │   ││↗  0x00007fbfb949fda9: add    %r11d,%eax         ;*iadd
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@35 (line 150)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.42%    0.15%   │   │││  0x00007fbfb949fdac: mov    %eax,%ecx
  0.13%    1.12%   │   │││  0x00007fbfb949fdae: not    %ecx
  0.41%    0.85%   │   │││  0x00007fbfb949fdb0: test   %eax,%eax
  0.01%    0.10%   │   │││  0x00007fbfb949fdb2: cmovl  %ecx,%eax
  0.90%    0.81%   │   │││  0x00007fbfb949fdb5: cmp    $0x80000000,%eax
                   │ ╭ │││  0x00007fbfb949fdba: jne    0x00007fbfb949fdc4
                   │ │ │││  0x00007fbfb949fdbc: xor    %edx,%edx
                   │ │ │││  0x00007fbfb949fdbe: cmp    $0xffffffffffffffff,%r13d
                   │ │╭│││  0x00007fbfb949fdc2: je     0x00007fbfb949fdc8
  0.49%    0.89%   │ ↘││││  0x00007fbfb949fdc4: cltd   
  0.06%    0.13%   │  ││││  0x00007fbfb949fdc5: idiv   %r13d              ;*irem
                   │  ││││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@55 (line 155)
                   │  ││││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │  ││││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
 10.09%   13.63%   │  ↘│││  0x00007fbfb949fdc8: movslq %edx,%r9           ;*i2l  ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@64 (line 156)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.63%    0.81%   │   │││  0x00007fbfb949fdcb: mov    %r9,%rcx
  0.00%            │   │││  0x00007fbfb949fdce: shr    $0x6,%rcx
  0.57%    0.34%   │   │││  0x00007fbfb949fdd2: mov    %ecx,%edi          ;*l2i  ; - com.github.prasanthj.bloomfilter.BloomFilter$BitSet::get@8 (line 296)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@65 (line 156)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
                   │   │││  0x00007fbfb949fdd4: cmp    %esi,%edi
                   │   │││  0x00007fbfb949fdd6: jae    0x00007fbfb949fe7a  ;*laload
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter$BitSet::get@9 (line 296)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@65 (line 156)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │   │││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.54%    1.51%   │   │││  0x00007fbfb949fddc: mov    $0x1,%r9d
  0.00%    0.00%   │   │││  0x00007fbfb949fde2: mov    %edx,%ecx
  0.17%    0.14%   │   │││  0x00007fbfb949fde4: shl    %cl,%r9
  0.84%    1.00%   │   │││  0x00007fbfb949fde7: test   %r9,0x10(%r14,%rdi,8)
  0.28%    0.03%   │   ╰││  0x00007fbfb949fdec: je     0x00007fbfb949fc20  ;*ifeq
                   │    ││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter$BitSet::get@17 (line 296)
                   │    ││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@65 (line 156)
                   │    ││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │    ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
 20.60%    8.47%   │    ││  0x00007fbfb949fdf2: mov    %ebp,%ecx
  1.27%    0.19%   │    ││  0x00007fbfb949fdf4: inc    %ecx
  0.47%    0.24%   │    ││  0x00007fbfb949fdf6: inc    %r8d               ;*iinc
                   │    ││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@73 (line 149)
                   │    ││                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │    ││                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
                   │    ││  0x00007fbfb949fdf9: cmp    %ecx,%r8d
                   │    ╰│  0x00007fbfb949fdfc: jge    0x00007fbfb949fc20  ;*if_icmpgt
                   │     │                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@25 (line 149)
                   │     │                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.30%    0.05%   │     │  0x00007fbfb949fe02: mov    %r8d,%eax
                   │     │  0x00007fbfb949fe05: imul   %r10d,%eax         ;*imul
                   │     │                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testBytes@34 (line 150)
                   │     │                                                ; - com.github.prasanthj.bloomfilter.BloomFilter::testLong@5 (line 176)
                   │     │                                                ; - com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe@27 (line 72)
  0.33%    0.00%   │     ╰  0x00007fbfb949fe09: jmp    0x00007fbfb949fda9
                   ↘        0x00007fbfb949fe0b: mov    %rsi,0x30(%rsp)
                            0x00007fbfb949fe10: mov    %rdx,0x20(%rsp)
                            0x00007fbfb949fe15: mov    %ebx,0x1c(%rsp)
                            0x00007fbfb949fe19: mov    %edi,0x18(%rsp)
                            0x00007fbfb949fe1d: mov    %r10d,0xc(%rsp)
                            0x00007fbfb949fe22: mov    %rcx,0x10(%rsp)
                            0x00007fbfb949fe27: mov    %ebp,0x8(%rsp)
....................................................................................................
 75.12%   53.45%  <total for region 1>

....[Hottest Regions]...............................................................................
 75.12%   53.45%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe, version 626 (489 bytes) 
  9.84%   31.08%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 576 (300 bytes) 
  3.23%    6.44%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 576 (77 bytes) 
  1.29%    0.07%   [kernel.kallsyms]  page_fault (26 bytes) 
  1.23%    0.01%   [kernel.kallsyms]  clear_page_c_e (9 bytes) 
  1.19%    0.83%           libjvm.so  [unknown] (9 bytes) 
  0.98%    0.83%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe, version 626 (28 bytes) 
  0.79%    0.77%   [kernel.kallsyms]  native_write_msr_safe (0 bytes) 
  0.60%    0.54%           libjvm.so  [unknown] (36 bytes) 
  0.53%    0.08%   [kernel.kallsyms]  do_numa_page (0 bytes) 
  0.47%    1.22%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 576 (30 bytes) 
  0.28%    0.02%   [kernel.kallsyms]  __mem_cgroup_commit_charge (29 bytes) 
  0.26%    0.03%   [kernel.kallsyms]  mem_cgroup_charge_common (30 bytes) 
  0.25%    0.03%   [kernel.kallsyms]  __list_del_entry (12 bytes) 
  0.19%    0.02%   [kernel.kallsyms]  numa_migrate_prep (42 bytes) 
  0.17%    0.08%   [kernel.kallsyms]  change_protection_range (18 bytes) 
  0.12%    0.07%   [kernel.kallsyms]  __mem_cgroup_count_vm_event (5 bytes) 
  0.12%    0.17%   [kernel.kallsyms]  _raw_spin_lock (53 bytes) 
  0.10%    0.10%   [kernel.kallsyms]  __do_page_fault (70 bytes) 
  0.09%    0.03%   [kernel.kallsyms]  handle_mm_fault (128 bytes) 
  3.14%    4.12%  <...other 616 warm regions...>
....................................................................................................
100.00%  100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 76.10%   54.28%         C2, level 4  com.github.prasanthj.bloomfilter.benchmarks.BenchmarkBloomFilterProbe::testProbe, version 626 
 13.54%   38.73%         C2, level 4  com.github.prasanthj.bloomfilter.Murmur3::hash64, version 576 
  2.19%    2.18%           libjvm.so  [unknown] 
  1.29%    0.07%   [kernel.kallsyms]  page_fault 
  1.23%    0.01%   [kernel.kallsyms]  clear_page_c_e 
  0.79%    0.77%   [kernel.kallsyms]  native_write_msr_safe 
  0.55%    0.16%   [kernel.kallsyms]  do_numa_page 
  0.29%    0.05%   [kernel.kallsyms]  __mem_cgroup_commit_charge 
  0.27%    0.05%   [kernel.kallsyms]  mem_cgroup_charge_common 
  0.26%    0.06%   [kernel.kallsyms]  __list_del_entry 
  0.24%    0.23%   [kernel.kallsyms]  handle_mm_fault 
  0.19%    0.02%   [kernel.kallsyms]  numa_migrate_prep 
  0.18%    0.09%   [kernel.kallsyms]  change_protection_range 
  0.17%    0.13%   [kernel.kallsyms]  __do_page_fault 
  0.17%    0.10%   [kernel.kallsyms]  __mem_cgroup_count_vm_event 
  0.12%    0.17%   [kernel.kallsyms]  _raw_spin_lock 
  0.09%    0.04%   [kernel.kallsyms]  task_numa_fault 
  0.08%    0.09%   [kernel.kallsyms]  down_read_trylock 
  0.07%    0.20%   [kernel.kallsyms]  get_page_from_freelist 
  0.06%    0.03%      hsdis-amd64.so  print_insn 
  2.11%    2.12%  <...other 180 warm methods...>
....................................................................................................
100.00%   99.58%  <totals>

....[Distribution by Source]........................................................................
 89.65%   93.01%         C2, level 4
  7.60%    4.30%   [kernel.kallsyms]
  2.19%    2.18%           libjvm.so
  0.23%    0.33%        libc-2.17.so
  0.12%    0.05%      hsdis-amd64.so
  0.07%    0.03%              [ext4]
  0.07%    0.02%         interpreter
  0.03%    0.04%  libpthread-2.17.so
  0.03%    0.03%              [jbd2]
  0.00%                  C1, level 3
....................................................................................................
100.00%  100.00%  <totals>



# Run complete. Total time: 00:01:21

Benchmark                                 (numEntries)  Mode  Cnt    Score    Error  Units
BenchmarkBloomFilterProbe.testProbe              10000  avgt   10   78.573 ± 11.797  ns/op
BenchmarkBloomFilterProbe.testProbe:·asm         10000  avgt           NaN             ---
BenchmarkBloomFilterProbe.testProbe           10000000  avgt   10  110.626 ±  8.781  ns/op
BenchmarkBloomFilterProbe.testProbe:·asm      10000000  avgt           NaN             ---
